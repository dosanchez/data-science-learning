{"cells":[{"cell_type":"markdown","metadata":{"id":"4o_Cg0NzjKlp"},"source":["#Activar librerías"]},{"cell_type":"markdown","metadata":{"id":"AMWIGudDmXDL"},"source":["### Generar población y parámetros"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nHEo-2njJ5fA"},"outputs":[],"source":["%matplotlib inline\n","import numpy as np\n","import pandas as pd\n","import matplotlib as mpl\n","from matplotlib import pyplot as plt, ticker\n","from scipy.stats import gamma, norm, beta, expon, binom, multinomial as multnom\n","from scipy.stats import poisson, hypergeom as hyper, chi2, kurtosis, skew, f, ncf,t\n","from scipy.stats import f_oneway, ttest_ind\n","import seaborn as sns\n","import matplotlib.font_manager as font_manager\n","from numpy.lib.histograms import histogram\n","import math\n","from IPython.display import display, HTML, Latex\n","import sympy as sp\n","from sympy import symbols, sequence\n","plt.style.use('seaborn-v0_8-whitegrid')\n","from itertools import combinations"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":736,"status":"ok","timestamp":1724269439579,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"},"user_tz":240},"id":"8qNdV8VtdIHH","outputId":"193aa532-55da-4d66-a633-7d06b000ba5b"},"outputs":[{"name":"stderr","output_type":"stream","text":["WARNING:matplotlib.legend:No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# prompt: generate 100000 random normally distribuited numpy array with mean of 26 and standard deviation of 3\n","\n","mu = 26\n","sigma = 3\n","lam=2.5\n","rn = norm.rvs(loc=mu, scale=sigma, size=100000)\n","#rn = np.random.poisson(lam, size=100000)\n","# prompt: draw an histogram with rn\n","popmean =np.mean(rn)\n","popstd = np.std(rn)\n","popvar = np.power(popstd,2)\n","\n","plt.hist(rn, bins=20, density=True, alpha=0.6, color='g');\n","plt.legend(title='mean = {:.2f}\\nStddev = {:.2f}'.format(popmean, popstd));"]},{"cell_type":"markdown","metadata":{"id":"4Cdcm4A9mhVo"},"source":["### generando las muestras, calculando sus estadísticas"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dHT5lgDXdU2k"},"outputs":[],"source":["# select a q number of sample of size n from rn and store it in a numpy array\n","q = 20\n","n = 15\n","sample = np.random.choice(rn, size = (q,n), replace = True)\n","\n","#calculating mean of each sample\n","samplemean = np.mean(sample, axis = 1)\n","samplevar = np.power(np.std(sample, axis = 1),2)\n"]},{"cell_type":"markdown","metadata":{"id":"VmZxbY3Vnusm"},"source":["## Distribution of the sample variance"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":374,"status":"ok","timestamp":1724269439951,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"},"user_tz":240},"id":"zBCmcN-Wn4Xz","outputId":"2782c344-5fd3-4221-98f1-42151ca4a018"},"outputs":[{"name":"stdout","output_type":"stream","text":["6.80403095244264\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["Y = samplevar *(n-1)/popvar\n","print(np.min(Y))\n","x = np.linspace(np.min(Y), np.max(Y), 50)\n","### Plotting Y\n","plt.hist(Y, bins=10, density=True, alpha=0.6, color='g')\n","\n","### plotting equivalent CHI squared\n","chi2_pdf = chi2.pdf(x, n-1)\n","plt.scatter(x, chi2_pdf);\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":442,"status":"ok","timestamp":1724269440391,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"},"user_tz":240},"id":"Km0TkLZHt5KZ","outputId":"28910874-cb21-40d7-ff0a-ea17f971cb30"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# prompt: plot a chi squared distribution with 14 degrees of freedom\n","\n","import matplotlib.pyplot as plt\n","import numpy as np\n","x = np.linspace(0, 30, 100)\n","chi2_pdf = chi2.pdf(x, 14)\n","plt.plot(x, chi2_pdf)\n","plt.xlabel('Value')\n","plt.ylabel('Probability density')\n","plt.title('Chi-squared Distribution with 14 Degrees of Freedom')\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5-1byrbAtc84"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"pc3KZL00ncyP"},"source":["## Distribution of the sample mean"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":462},"executionInfo":{"elapsed":427,"status":"ok","timestamp":1724269440811,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"},"user_tz":240},"id":"lkOssgl2dejI","outputId":"f59a5c93-672c-473c-e90a-c924a8b7fd57"},"outputs":[{"name":"stderr","output_type":"stream","text":["WARNING:matplotlib.legend:No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["### Plotting sample Mean\n","plt.hist(samplemean, bins=20, density=True, alpha=0.6, color='g')\n","\n","# Adding the legend\n","plt.legend(title='mean = {:.2f}\\nStddev = {:.2f}\\npopmean = {:.2f}\\npodev = {:.2f} '.format(np.mean(samplemean),samplemean.std(),popmean, popstd));\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iyKod8QJnMft"},"outputs":[],"source":["###"]},{"cell_type":"markdown","metadata":{"id":"JT06keWZjzVP"},"source":["### prueba del cálculo del Standard Error of the mean"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1724269440811,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"},"user_tz":240},"id":"M-lEtlKodlVz","outputId":"a4f61680-84ca-4b67-9f25-056416ad805d"},"outputs":[{"name":"stdout","output_type":"stream","text":["0.6185851267666062 0.7768513651488645\n"]}],"source":["print(samplemean.std(), popstd/pow(15,0.5))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1724269440811,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"},"user_tz":240},"id":"lFrAymweoBnT","outputId":"1c9648ad-4d3d-4f5a-91b1-7f8a758d0147"},"outputs":[{"name":"stdout","output_type":"stream","text":["0 -3.516034 0.0009738444787160603\n","1 -4.492710000433644 9.053328371142761e-05\n","2 -5.4693860008672885 8.520972952580839e-06\n","3 -6.446062001300932 8.71251157955495e-07\n","4 -7.422738001734576 9.999649466002423e-08\n"]}],"source":["# prompt: calculate cumulative Student´s T probability for T = 1.435414\n","\n","from scipy.stats import t\n","for i in range(5):\n","  T = -3.516034 -(i/1.023881)\n","  # Calculate the cumulative Student's T probability for T = 1.435414\n","  prob =t.cdf(T, df=22)\n","  print(i, T, prob)\n","\n","# Print the result\n","#print(\"The cumulative Student's T probability for T = 1.435414 is:\", prob)\n"]},{"cell_type":"markdown","metadata":{"id":"s6FczmmFu9Ne"},"source":["# testing array plotting"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1724269440812,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"},"user_tz":240},"id":"1ykMAwTlBG5b","outputId":"f2aba721-b921-4395-9ed9-4dc661f4939e"},"outputs":[{"name":"stdout","output_type":"stream","text":["1.0\n"]}],"source":["print(math.gamma(2))\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":141},"executionInfo":{"elapsed":14,"status":"error","timestamp":1724269440812,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"},"user_tz":240},"id":"cqxTtJVDzdCz","outputId":"7eea5643-fc6f-4a85-81c7-0a23f574b6b5"},"outputs":[{"ename":"NameError","evalue":"name 'seccentr' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-13-4cad9eb396a4>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mintegrate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mseccentr\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'seccentr' is not defined"]}],"source":["sp.integrate(seccentr,x)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w9YjPl7cEkOm"},"outputs":[],"source":["expe =sp.Symbol(\"x\")\n","expe"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-EeKWaBhErqk"},"outputs":[],"source":["sp.integrate(expe,99,100)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8orUWZuF32Mn"},"outputs":[],"source":["sp.integrate(seccentr,(y,49,50),(x,99,100)) - (sp.integrate(expe,(y,49,50),(x,99,100)))**2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4oy8p6UeLX21"},"outputs":[],"source":["148207/144"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qbaXkvYP-DXb"},"outputs":[],"source":["sp.integrate(seccentr,x,y)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uUR08fwj-N_t"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BIvHQejtLFlW"},"outputs":[],"source":["x = [1, 2, 3, 4, 5]\n","y = [1, 8, 27, 64, 125]\n","plt.plot(x, y, label='$y = x^3$')\n","\n","# Adding the legend\n","plt.legend(title='Cube Root', title_fontsize=14, fontsize=12)\n","plt.title('Cube Root Plot', fontsize=16)\n","plt.xlabel('X-axis', fontsize=14)\n","plt.ylabel('Y-axis', fontsize=14)\n","\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HxuQPJZap9XA"},"outputs":[],"source":["print('parámetros n = {0}, p = {1}'.format(n,p))\n","print('media de la muestra binomial ->', xbin.mean())\n","print('desv std de la muestra binomial ->', xbin.std())\n","print('media binomial teórica \\u03bc = n*p ->', n*p)\n","print('desv std binomial teórica \\u03c3 = \\u221A [(n*p)(1-p)] ->', np.sqrt(n*p*(1-p)))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZZd3O1tz_vd6"},"outputs":[],"source":["fig = plt.figure()\n","fig.suptitle(r\"$Z = x_1^3 + 4x_2^2 + 16x_3$\", fontsize = 10)\n","fig.subplots_adjust (hspace = 0.3, wspace = 0.3)\n","a = np.linspace(1,4,500)\n","b = np.linspace(1,4,12)\n","solmatrix = np.zeros(shape=(500, 12, 4)) # Array x1, x2, z\n","plotcount = 0\n","for  x2 in b:\n","  plotpoint = 0\n","  for x1 in a:\n","    x3 = 4/(x1 * x2)\n","    if  x3 >=1:\n","      Z = pow(x1,3) + 4*pow(x2,2) + 16*x3\n","      solmatrix[plotpoint, plotcount, 0] = x1\n","      solmatrix[plotpoint, plotcount, 1] = x2\n","      solmatrix[plotpoint, plotcount, 2] = x3\n","      solmatrix[plotpoint, plotcount, 3] = Z\n","    plotpoint += 1\n","\n","  zvalmax = np.nanmax(solmatrix[solmatrix[:,plotcount, 3] > 0,plotcount,3])\n","  zvalmin = np.nanmin(solmatrix[solmatrix[:,plotcount, 3] > 0,plotcount,3])\n","  x1indmax  = np.nanargmax(solmatrix[:,plotcount,3])\n","  x1valmax = solmatrix[x1indmax,plotcount,0]\n","  x3valmax = solmatrix[x1indmax,plotcount,2]\n","  maxx1val = np.nanmax(solmatrix[solmatrix[:,plotcount, 3] > 0,plotcount,0])\n","  ax = fig.add_subplot(3,4,plotcount + 1)\n","  ax.set_title(\"$x_2 = {0}$\".format(round(x2,2)),fontweight=\"bold\", size=9, pad=3) # subplot Title\n","  ax.tick_params(axis='both', which='major', labelsize=7, pad=3)\n","  ax.scatter(solmatrix[solmatrix[:,plotcount, 3] > 0,plotcount,0],\n","             solmatrix[solmatrix[:,plotcount, 3] > 0,plotcount,3],\n","             s= 1, label = \"Z\")\n","  ax.legend(loc=\"upper center\", fontsize = \"xx-small\", markerscale = 2)\n","  if plotcount == 11:\n","    ax.annotate(text=\"max val {0}\\nfor x1 = {1}\\n     x3 = {2}\".format(np.round(zvalmax,3), np.round(x1valmax,4),np.round(x3valmax,4)),\n","                xy=(x1valmax, zvalmax), xytext = (1 + 0.35 *(maxx1val - 1),78),\n","                fontsize = 6, arrowprops=dict(arrowstyle=\"->\", shrinkA=0.1))\n","  else:\n","    ax.annotate(text=\"max val {0}\\nfor x1 = {1}\\n     x3 = {2}\".format(np.round(zvalmax,3), np.round(x1valmax,4),np.round(x3valmax,4)),\n","              xy=(x1valmax, zvalmax), xytext = (1 + 0.35 *(maxx1val - 1), zvalmin + 0.65 * (zvalmax - zvalmin)),\n","              fontsize = 6, arrowprops=dict(arrowstyle=\"->\", shrinkB=1))\n","\n","\n","  plotcount += 1\n","\n","fig.savefig(\"foo.pdf\", bbox_inches='tight')\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q27Sl8_mE2SW"},"outputs":[],"source":["def zfunction(x1,x2):\n","  return pow(x1,3) + 4*pow(x2,2) + 64/(x1*x2)\n","\n","fig = plt.figure()\n","fig.suptitle(\"$Z = x_1^3 + 4x_2^2 + 16x_3$  \\n$x_1x_2x_3 = 4$\", fontsize = 10)\n","ax = plt.axes(projection='3d')\n","ax.view_init(35, 35)\n","plt.xlim(1,4)\n","plt.ylim(1,4)\n","\n","\n","a = np.linspace(1,4,100)\n","b = np.linspace(1,4,100)\n","X, Y = np.meshgrid(a, b)\n","Z = zfunction(X,Y)\n","\n","factible = (4/np.multiply(X, Y))>=1\n","\n","x1 = np.multiply(X,factible)\n","x2 = np.multiply(Y,factible)\n","z = np.multiply(Z,factible)\n","\n","maxz = np.max(z)\n","maxindx= (np.argwhere(z == maxz)[0,0], np.argwhere(z == maxz)[0,1])\n","\n","minz = np.min(z[z>0])\n","minindx= (np.argwhere(z == minz)[0,0], np.argwhere(z == minz)[0,1])\n","\n","ax.plot_wireframe(x1, x2, z)\n","\n","ax.set_xlabel('x1')\n","ax.set_ylabel('x2')\n","ax.set_zlabel('Z')\n","ax.text(x1[maxindx], x2[maxindx], z[maxindx],\n","        \"max val {}\\nfor x1 = {}\\n     x2 = {}\\n     x3 = {}\".format(np.round(z[maxindx],3),\n","        np.round(x1[maxindx],3),np.round(x2[maxindx],4),np.round(4/(x1[maxindx]*x2[maxindx]),4)))\n","\n","ax.text(x1[minindx], x2[minindx], z[minindx],\n","        \"min val {}\\nfor x1 = {}\\n     x2 = {}\\n     x3 = {}\".format(np.round(z[minindx],3),\n","        np.round(x1[minindx],3),np.round(x2[minindx],4),np.round(4/(x1[minindx]*x2[minindx]),4)),\n","        verticalalignment='top')\n","\n","fig.savefig(\"foo.pdf\", bbox_inches='tight') ;\n"]},{"cell_type":"markdown","metadata":{"id":"x7W_JpcZvGRH"},"source":["*italicized text*# Prueba\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8d4PegZPvVsZ"},"outputs":[],"source":["def zfunction(x1,x2):y\n","  return pow(x1,3) + 4*pow(x2,2) + 64/(x1*x2)\n","\n","print(zfunction(1.90709, 1.61277), 4/(1.90709*1.61277), 8 / pow(192,3/11))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7b2E5I-mwIoB"},"outputs":[],"source":["for x in range(6):\n","  f =3+x+(6+(16/27))*pow(1/3,x)\n","  print(x,f)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5MKxZu7vlRHm"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"g8eSJOXJwPLr"},"outputs":[],"source":["\n","tot=multnom.pmf([27,18, 15], n= 60, p=[1/3, 1/3, 1/3])\n","print(tot)\n","\n","formula = math.factorial(60)*pow(1/3,27)*pow(1/3,18)*pow(1/3,15)/(math.factorial(27)*math.factorial(18)*math.factorial(15))\n","print(formula)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0ySrRTG3A3SE"},"outputs":[],"source":["import fractions\n","\n","def zfunction(x1,x2):\n","  return (3*pow(x2,2) - 5*pow(x1,2)*pow(x2,2) + 3*pow(x1,2))/16\n","\n","a = np.array([-1,0,1])\n","b = np.array([-1,0,1])\n","X, Y = np.meshgrid(a, b)\n","np.set_printoptions(formatter={'all':lambda x: str(fractions.Fraction(x).limit_denominator())})\n","print(zfunction(X,Y))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7W3CW1UH-zLl"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-2rPPa9BJJKH"},"outputs":[],"source":["def F(t1,t2):\n","  return (1-pow(np.e,-t1/5))*(1-pow(np.e,-10*t2))\n","\n","print(F(8,12/60))"]},{"cell_type":"markdown","metadata":{"id":"KdTDhEx6c0Kd"},"source":["# Dynamic programming test for exercise 11-3.7 Hillier y Liebermman\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oyKB9_mRdEWF"},"outputs":[],"source":["def Probability(sol, stage, probacum,costacum,mtr):\n","  for a in comp:\n","    for b in units:\n","      print (a, stage)\n","      probacum *= prob[a][b]\n","      costacum += cost[a][b]\n","      if stage < 3:\n","        stage += 1\n","        sol += a + str(b)\n","        return Probability(sol, stage, probacum,costacum, mtr)\n","      sol += a + str(b)\n","      mtr[sol] = [probacum, costacum]\n","    return\n","\n","sol =\"\"\n","mtr = {}\n","stage = 0\n","state = 0\n","probacum = 1\n","costacum = 0\n","prob = {'comp1':{1:.5,2:.6,3:.8},'comp2':{1:.6,2:.7,3:.8},'comp3':{1:.7,2:.8,3:.9},'comp4':{1:.5,2:.7,3:.9}}\n","cost = {'comp1':{1:1,2:1,3:3},'comp2':{1:2,2:4,3:5},'comp3':{1:1,2:3,3:4},'comp4':{1:2,2:3,3:4}}\n","comp = ['comp1', 'comp2', 'comp3', 'comp4']\n","units = [1,2,3]\n","budget = 10\n","\n","Probability(sol, stage, probacum,costacum, mtr)\n","\n","\n","\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hmIRKeZO49NE"},"outputs":[],"source":["def zfunction(x,y):\n","  return x*y\n","\n","fig = plt.figure()\n","fig.suptitle(\"Z = x * y\", fontsize = 10)\n","ax = plt.axes(projection='3d')\n","#ax.view_init(35, 35)\n","#plt.xlim(1,4)\n","#plt.ylim(1,4)\n","\n","\n","a = np.linspace(99,100,100)\n","b = np.linspace(49,50,100)\n","X, Y = np.meshgrid(a, b)\n","Z = zfunction(X,Y)\n","\n","print(np.max(Z))\n","print(np.min(Z))\n","\n","ax.plot_wireframe(X, Y, Z)\n","\n","ax.set_xlabel('x')\n","ax.set_ylabel('y')\n","ax.set_zlabel('Z')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ma_nw5MC-abn"},"outputs":[],"source":["def powerfunc(lb, ub, miu, sigma, n):\n","  powergraf = []\n","\n","  for i in miu:\n","    zl = (lb - i)*math.sqrt(n)/sigma\n","    zu = (ub - i)*math.sqrt(n)/sigma\n","    POWER = norm.cdf(zl)+(1-norm.cdf(zu))\n","    powergraf.append(POWER)\n","  print(powergraf)\n","  return powergraf\n","\n","fig, ax = plt.subplots()\n","\n","data = [19.5, 19.6, 19.7, 19.8, 19.9, 20.0,\n","        20.1, 20.2, 20.3, 20.4, 20.5]\n","#data = [0.05]\n","\n","n = 36\n","sigma = 0.5\n","lb = 19.8333\n","ub = 20.1667\n","etiqueta = \"lower bound = {},\\nupper bound ={}\".format(lb, ub)+\"\\n\"+ r\"$\\alpha = 0.0455$\"\n","ax.plot(data, powerfunc(lb, ub, data, sigma, n), label = etiqueta)\n","\n","lb= 19.75\n","ub = 20.25\n","etiqueta = \"lower bound = {},\\nupper bound ={}\".format(lb, ub)+\"\\n\"+ r\"$\\alpha = 0.0124$\"\n","ax.plot(data, powerfunc(lb, ub, data, sigma, n), label = etiqueta)\n","\n","\n","plt.xlabel('fill mean (oz)')\n","plt.ylabel('probability')\n","ax.legend()\n","fig.suptitle(r\"Power Function $H_0 = 20, H_1 \\neq 20, \\sigma = {}, n = {}$\".format(sigma, n), fontsize = 10)\n","#fig.savefig(\"foo.pdf\", bbox_inches='tight')\n","plt.show();\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DL33w3DBAm8p"},"outputs":[],"source":["def prob(p):\n","  prob = 0\n","  for i in range(2,37):\n","    prob += (math.factorial(36)/(math.factorial(36-i)*math.factorial(i)))*pow(p,i)*pow(1-p,36-i)\n","  return prob\n","\n","prob(.05)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2uc3MhmBO7Y_"},"outputs":[],"source":["n, p = sp.symbols(\"n,p\")\n","mse = (n*p*(1-p)+4*p**2-1)/(n+2)**2 - p*(1-p)/n\n","sp.solve(mse, p)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1BedSCfmRDh6"},"outputs":[],"source":["a = (n - sp.sqrt(3*n**2 + 3*n + 1) + 1)/(2*(2*n + 1))\n","a"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OD6S7kWdayeJ"},"outputs":[],"source":["def calc (n):\n","  b = (n - math.sqrt(3*n**2 + 3*n + 1) + 1)/(2*(2*n + 1))\n","  c = (n + math.sqrt(3*n**2 + 3*n + 1) + 1)/(2*(2*n + 1))\n","  mst1 = (c+0.1)*(1-(c+0.1))/n\n","  mst2 = (n*(c+0.1)*(1-(c+0.1))+4*(c+0.1)**2-1)/(n+2)**2\n","  return b,c, mst1, mst2\n","\n","x, y, mst1, mst2 = calc(3)\n","print(x,y)\n","print(\"mse (T1) ->>>\",mst1)\n","print(\"mse (T2) ->>>\",mst2)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"POnfULkIf9tQ"},"outputs":[],"source":["fig = plt.figure()\n","fig.suptitle(r\"MSE Comparison T1 and T2\", fontsize = 10)\n","#fig.subplots_adjust (hspace = 0.3, wspace = 0.3)\n","p = np.linspace(0.001,0.999,1000)\n","\n","n = 10\n","ax = fig.add_subplot(1,2,1)\n","ax.set_title(\"n = 10\",fontweight=\"bold\", size=9, pad=3) # subplot Title\n","#ax.tick_params(axis='both', which='major', labelsize=7, pad=3)\n","ax.scatter(p, p*(1-p)/n,s= 1, label = \"MSE(T1)\")\n","ax.scatter(p, (n*p*(1-p)+4*p**2-1)/(n+2)**2,s= 1, label = \"MSE(T2)\")\n","ax.legend()\n","#  if plotcount == 11:\n","#    ax.annotate(text=\"max val {0}\\nfor x1 = {1}\\n     x3 = {2}\".format(np.round(zvalmax,3), np.round(x1valmax,4),np.round(x3valmax,4)),\n","#                xy=(x1valmax, zvalmax), xytext = (1 + 0.35 *(maxx1val - 1),78),\n","#                fontsize = 6, arrowprops=dict(arrowstyle=\"->\", shrinkA=0.1))\n","#  else:\n","#    ax.annotate(text=\"max val {0}\\nfor x1 = {1}\\n     x3 = {2}\".format(np.round(zvalmax,3), np.round(x1valmax,4),np.round(x3valmax,4)),\n","#              xy=(x1valmax, zvalmax), xytext = (1 + 0.35 *(maxx1val - 1), zvalmin + 0.65 * (zvalmax - zvalmin)),\n","#              fontsize = 6, arrowprops=dict(arrowstyle=\"->\", shrinkB=1))\n","n = 25\n","ax = fig.add_subplot(1,2,2)\n","ax.set_title(\"n = 25\",fontweight=\"bold\", size=9, pad=3)\n","ax.scatter(p, p*(1-p)/n,s= 1, label = \"MSE(T1)\")\n","ax.scatter(p, (n*p*(1-p)+4*p**2-1)/(n+2)**2,s= 1, label = \"MSE(T2)\")\n","ax.legend()\n","\n","#  plotcount += 1\n","\n","fig.savefig(\"foo.pdf\", bbox_inches='tight')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HlbF4eTqYA2k"},"outputs":[],"source":["a =math.sqrt((99*(4.8**2)+99*(5.4**2))/198)\n","print(a)\n","print(math.sqrt(26.1*2)/10)\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4wbi3icqY5yw"},"outputs":[],"source":["\n","data = np.array([38, 32, 41, 35, 42, 32, 45, 37])\n","\n","print (\"media muestral x = {}\".format(data.mean()))\n","print (\"varianza x = {}\".format(data.std()**2))\n","print (\"desv std x = {}\".format(data.std()))\n","print (\"min value x = {}\".format(data.min()))\n","print (\"tamaño muestral x = {}\".format(data.size))\n","print (\"varianza muestral x = {}\".format(data.size*(data.std()**2)/(data.size-1)))\n","print (\"desv std muestral x = {}\".format(math.sqrt(data.size*(data.std()**2)/(data.size-1))))\n","\n","\n","data1 = np.array([30, 32, 34, 37, 35, 26, 38, 32])\n","\n","print (\"media muestral y = {}\".format(data1.mean()))\n","print (\"varianza y = {}\".format(data1.std()**2))\n","print (\"desv std y = {}\".format(data1.std()))\n","print (\"min value y = {}\".format(data1.min()))\n","print (\"tamaño muestral y = {}\".format(data1.size))\n","print (\"varianza muestral y = {}\".format(data1.size*(data1.std()**2)/(data1.size-1)))\n","print (\"desv std muestral y = {}\".format(math.sqrt(data1.size*(data1.std()**2)/(data1.size-1))))\n","\n","print(\"spooled variance = {}\".format(((data.size-1)*(data.std()**2)+(data1.size-1)*(data1.std()**2))/(data1.size+data.size-2)))\n","print(\"spooled std dev = {}\".format(math.sqrt(((data.size-1)*(data.std()**2)+(data1.size-1)*(data1.std()**2))/(data1.size+data.size-2))))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gTtNdbPeJKCu"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"08jlPsRqiwH1"},"outputs":[],"source":["# prompt: plot a histogram with the following values 38, 35, 76,58, 42, 59, 67, 63, 33, 69, 53, 51, 28, 25, 36, 32, 61, 57, 49, 78, 48, 42, 72, 52, 47, 66, 58,  44, 44, 56\n","\n","import matplotlib.pyplot as plt\n","import numpy as np\n","values = [38, 35, 76,58, 42, 59, 67, 63, 33, 69, 53, 51, 28, 25, 36, 32, 61, 57, 49, 78, 48, 42, 72, 52, 47, 66, 58,  44, 44, 56]\n","plt.hist(values, bins=7, density=True, alpha=0.6, color='g');\n","plt.legend(title='mean = {:.2f}\\nStddev = {:.2f}'.format(np.mean(values),np.std(values)));\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ykRMsyAmTRlS"},"outputs":[],"source":["print(norm.ppf(0.975))\n","print((1 -norm.cdf(0.02*(250**.5)/math.sqrt(0.0564)))*2)\n","print(0.02*(250**.5)/math.sqrt(0.0564))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bj53QLnftphV"},"outputs":[],"source":["a = np.array([27,66, 91, 70, 57, 34, 16, 3])\n","b = np.array([0, 1, 2, 3, 4, 5, 6, 7])\n","expected_freq = poisson.pmf(b[:-1],2.6731)\n","expected_freq = np.concatenate((expected_freq,np.array([1-poisson.pmf(b[:-1],2.6731).sum()])))\n","expected_freq = np.round(expected_freq*364,0)\n","print(expected_freq)\n","print(np.round(((a-expected_freq)**2)/expected_freq,4).sum())"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wgGMmhzzcWqb"},"outputs":[],"source":["a = np.sort(np.array([38, 35, 76, 58, 48, 59,\n","              67, 63, 33, 69, 53, 51,\n","              28, 25, 36, 32, 61, 57,\n","              49, 78, 48, 42, 72, 52,\n","              47, 66, 58, 44, 44, 56]))\n","fx= norm.cdf(56.8, loc = a.mean(), scale = a.std())\n","print(fx)\n","sx = norm.cdf(67.4, loc = a.mean(), scale = a.std())\n","print(sx)\n","print(round(sx - fx,4))\n","print(round((sx - fx)*30,0))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2z1JvpZjRKKl"},"outputs":[],"source":["a =np.array([120, 100, 80])\n","b = np.array([97, 203])[:,np.newaxis]\n","efreq =np.round(((a*b)/a.sum()),4)\n","print(efreq)\n","freq =np.array([[42,35, 20], [78, 65, 60]])\n","print(np.round(((freq-efreq)**2)/efreq,4))\n","print(np.round((((freq-efreq)**2)/efreq).sum(),4))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"n1k1Ic7laqn1"},"outputs":[],"source":["a =np.array([120,100, 80])\n","b = np.array([255, 215, 50])[:,np.newaxis]\n","print(np.round(((a*b)/a.sum()),4))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZN5wjzMFU0-f"},"outputs":[],"source":["def intercepto(x1, y1, x2, y2):\n","  m = (y2-y1)/(x2-x1)\n","  b = y1 - m*x1\n","  x0 = -b/m\n","  return x0\n","\n","def cero(x1, x2):\n","  if x2.min()<0:\n","    px=np.where(np.isclose(x2, x2[x2<0].max()))[0][0]\n","  else:\n","    return x1, x2\n","  x1[px] = intercepto(x1[0], x2[0], x1[1], x2[1])\n","  x2[px] = 0\n","  x2[x2<0] = None\n","  return x1, x2\n","\n","fig, ax = plt.subplots()\n","n=100\n","x1 = np.linspace(0, 7, n)\n","\n","#Constraint 1\n","x1, x2 = cero(x1, ( 5*x1 - 3)/7)\n","etiqueta = r\"$-X_1 + 2X_2 \\leq 4$\"\n","ax.plot(x1,x2, label = etiqueta, ls =\":\")\n","ax.fill_between(x1, x2, 0, color='blue', alpha=.1)\n","\n","#Constraint 2\n","etiqueta = r\"$X_1 \\leq 3$\"\n","plt.axvline(x=3, fillstyle = 'left', label = etiqueta, color = 'green', ls =\"--\")\n","ax.axvspan(0, 3, alpha=0.1, color = 'green')\n","\n","\n","#Constraint 3\n","x2 = np.full(100,3)\n","etiqueta = r\"$X_2 \\leq 3$\"\n","ax.plot(x1, x2, label = etiqueta, ls =\"-.\")\n","ax.fill_between(x1, x2, 0, color='orange', alpha=.1)\n","\n","#Constraint 4\n","x2 = np.full(100,2)\n","etiqueta = r\"$X_2 \\geq 2$\"\n","ax.plot(x1, x2, label = etiqueta, ls =(0, (5, 1)), color = 'yellow')\n","ax.fill_between(x1, x2, 3, color='yellow', alpha=.1)\n","\n","\n","#Constraint 4\n","#x1, x2 = cero(x1, 3)\n","#etiqueta = r\"$X_1 - X_2 \\leq 1$\"\n","#ax.plot(x1, x2, label = etiqueta)\n","#ax.fill_between(x1, x2, 0, color='orange', alpha=.1)\n","\n","#Constraint 3\n","#x1, x2 = cero(x1, 12 - 4*x1)\n","#etiqueta = r\"$4X_1 + X_2 \\leq 12$\"\n","#ax.plot(x1, x2, label = etiqueta)\n","#ax.fill_between(x1, x2, 0, color='green', alpha=.1)\n","\n","#Constraint 4\n","\n","#etiqueta = r\"$4X_1 + X_2 \\leq 12$\"\n","#plt.axvline(x=3, fillstyle = 'left', gapcolor ='blue')\n","#ax.axvspan(8, 14, alpha=0.5, color='orange')\n","\n","#Constraint 5\n","\n","#x2 = np.full(100,3)\n","#etiqueta = r\"$X_2 \\leq 3$\"\n","#ax.plot(x1, x2, label = etiqueta)\n","#ax.fill_between(x1, x2, 0, color='green', alpha=.1)\n","\n","#objective Function\n","x1 = np.linspace(0, 7, 100)\n","Z = 1\n","x1, x2 = cero(x1, (Z + 3*x1)/5)\n","etiqueta = r\"$Z = -3X_1 + 5X_2$\"\n","ax.plot(x1, x2, label = etiqueta, color = 'magenta')\n","\n","\n","plt.xlabel(r\"$X_1$\")\n","plt.ylabel(r\"$X_2$\")\n","ax.legend()\n","fig.suptitle(\"Integer Programming  Z = {}\".format(Z), fontsize = 10)\n","plt.annotate(\"Z = 14.6\", xy =(1.25, 8.5), xytext=(2,10), arrowprops=dict(arrowstyle=\"simple\",connectionstyle=\"arc3,rad=0.2\"))\n","plt.show();"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hUL7qU_MtOJw"},"outputs":[],"source":["def intercepto(x1, y1, x2, y2):\n","  m = (y2-y1)/(x2-x1)\n","  b = m*x1- y1\n","  x0 = b/m\n","  return x0\n","\n","def feasover(x, y):\n","  yo = y\n","  xo = np.copy(x)\n","  for i in range(1, 11 - int(y.min())):\n","    yo = np.append(yo,y+i )\n","    yo[yo>10] = 10\n","    xo = np.append(xo, x)\n","\n","  return np.reshape(xo, (11 - int(y.min()),len(x))), np.reshape(yo, (11 - int(y.min()),len(y)))\n","\n","def feasunder(x, y):\n","  yo = np.zeros(len(y))\n","  xo = np.copy(x)\n","  tope = int(y.max())+1\n","  for i in range(1,tope):\n","    yo = np.append(yo, (np.zeros(len(y)) + i) * ((np.zeros(len(y)) + i)<=y))\n","    xo = np.append(xo, x)\n","  return np.reshape(xo, (tope, len(x))), np.reshape(yo, (tope, len(y)))\n","\n","def cero(k1, k2):\n","\n","  if k2.min()<0:\n","    px=np.where(np.isclose(k2, k2[k2<0].max()))[0][0]\n","    k1[px] = intercepto(k1[0], k2[0], k1[1], k2[1])\n","    k2[px] = 0.0\n","    k2[k2<0] = 0\n","    return k1, k2\n","  else:\n","    return k1, k2\n","\n","fig, ax = plt.subplots()\n","n=11\n","x1 = np.linspace(0, 10, n)\n","\n","#Constraint 1\n","c1, c2 = cero(x1, (5*x1 -3)/7)\n","g1, g2 = feasunder(c1, c2)\n","etiqueta = r\"$5X_1 - 7X_2 \\geq 3$\"\n","ax.scatter(g1,g2, label = etiqueta, s= 20)\n","#ax.fill_between(x1, x2, 0, color='blue', alpha=.1)\n","\n","#x1 = np.linspace(0, 10, n)\n","#Constraint 2\n","#c1, c2 = cero(x1, x1 - 1)\n","#g1, g2 = feasover(c1, c2)\n","#etiqueta = r\"$X_1 - X_2 \\leq 1$\"\n","#ax.scatter(g1, g2, label = etiqueta, marker='o', facecolors='none', edgecolors='orange', s= 40)\n","#ax.fill_between(x1, x2, 0, color='orange', alpha=.1)\n","\n","#x1 = np.linspace(0, 10, n)\n","#Constraint 3\n","#c1, c2 = cero(x1, 12 - 4*x1)\n","#g1, g2 = feasunder(c1, c2)\n","#etiqueta = r\"$4X_1 + X_2 \\leq 12$\"\n","#ax.scatter(g1, g2, label = etiqueta, marker='o', facecolors='none', edgecolors='g', s= 100)\n","#ax.fill_between(x1, x2, 0, color='green', alpha=.1)\n","\n","#constraint 4\n","g1 = np.array([0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3])\n","g2 = np.array([1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10])\n","etiqueta = r\"$X_j \\leq 3$\"\n","ax.scatter(g1, g2, label = etiqueta, marker='o', facecolors='none', edgecolors='orange', s= 40)\n","\n","x1 = np.linspace(0, 10, n)\n","#objective Function\n","Z = -1\n","c1, c2 = cero(x1, (Z + 3*x1)/5)\n","etiqueta = r\"$Z = -3X_1 + 5X_2$\"\n","ax.plot(c1, c2, label = etiqueta)\n","\n","\n","plt.xlabel(r\"$X_1$\")\n","plt.ylabel(r\"$X_2$\")\n","ax.legend()\n","fig.suptitle(\"Integer Programming \", fontsize = 10)\n","#plt.annotate(\"Z = -1\", xy =(.8, 9), xytext=(6,3), arrowprops=dict(arrowstyle=\"simple\",connectionstyle=\"arc3,rad=0.2\"))\n","plt.legend(loc=\"upper right\", ncols = 4, fontsize = \"x-small\")\n","plt.show();"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rj0C5G6TtLj7"},"outputs":[],"source":["def feasover(x, y):\n","  y = np.array([5, 2, 7, 9])\n","  x = np.array([1, 2, 3, 4])\n","  yo = y\n","  xo = np.copy(x)\n","  print(10 - y.min())\n","  for i in range(1, 11 - y.min()):\n","    yo = np.append(yo,y+i )\n","    yo[yo>10] = 10\n","    xo = np.append(xo, x)\n","  print(xo)\n","  print(yo)\n","  return np.reshape(xo, (11 - y.min(),len(x))), np.reshape(yo, (11 - y.min(),len(y)))\n","\n","\n","x, y = feasover(np.array([1, 2, 3, 4]), np.array([5, 2, 7, 9]))\n","print(x)\n","print(y)\n","fig, ax = plt.subplots()\n","ax.scatter(x, y)\n","plt.show;"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gWpbOqKlP7xJ"},"outputs":[],"source":["def suma(c,x, pos):\n","  return (c[pos]*x[pos]).sum()\n","\n","def sumasqrd(c,x,pos):\n","  return ((c[pos]*x[pos]).sum()**2)\n","\n","pos = np.array([True, True, True, False])\n","c = np.array([80, 60, 40, 20])\n","d = np.array([7, 5, 3, 2])\n","x= np.array([1, 1, 1, 0])\n","print(\"sumatoria CiXi = \",suma(c,x,pos), \"  sumatoria de DiXi =\", suma(d,x,pos), \"  sumatoria al cuadrado de DiXi =\",sumasqrd(d,x,pos))\n","i = c[np.invert(pos)]\n","print(\"Cj = \",i)\n","print(\"Dj = \",d[np.invert(pos)])\n","print(\"ecuacion 3 =\", (d[np.invert(pos)]+suma(d,x,pos))**2)\n","j = (d[np.invert(pos)]+suma(d,x,pos))**2-sumasqrd(d,x,pos)\n","print(\"ecuacion 4 =\",j)\n","arrgl = i - j\n","print(\"ecuacion 5 =\",arrgl)\n","print(\"len arreglo =\",len(arrgl) )\n","print(np.reshape(np.append(arrgl,np.zeros(len(arrgl))),(2,len(arrgl))))\n","ecu6 = np.sum(np.max(np.reshape(np.append(arrgl,np.zeros(len(arrgl))),(2,len(arrgl))),axis=0))\n","print(\"ecuacion 6 =\",ecu6)\n","print(\"Bound = \",suma(c,x,pos) + sumasqrd(d,x,pos) + ecu6)\n","print(\"Z = \",suma(c,x,pos) - sumasqrd(d,x,pos) )"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uocsVKxyidVy"},"outputs":[],"source":["#limits for mean, know pop mean and variance\n","sigma = 3\n","miu = 400.2\n","desv = 15.3\n","n = 5\n","\n","ll = miu - sigma*desv/math.sqrt(n)\n","ul = miu + sigma*desv/math.sqrt(n)\n","\n","print(ll,ul)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FMUnwxytweZB"},"outputs":[],"source":["#limits for mean, unknown pop mean and variance\n","def c(n):\n","  c4 = math.sqrt(2)*math.gamma(n/2)/(math.sqrt(n-1)*math.gamma((n-1)/2))\n","  c5 =math.sqrt(1-c4**2)\n","  return c4, c5\n","\n","sigma = 3\n","miu = 400.2\n","desv = 15.3\n","n = 5\n","\n","c4, c5 = c(n)\n","\n","meanLL = miu - sigma*desv/(c4*math.sqrt(n))\n","meanUL = miu + sigma*desv/(c4*math.sqrt(n))\n","\n","sdLL = desv - (3*desv*c5/c4)\n","sdUL = desv + (3*desv*c5/c4)\n","\n","print(\"Mean Lower Limit = {:.4f}\".format(meanLL),\"Mean Upper Limit = {:.4f}\".format(meanUL))\n","print(\"SD Lower Limit = {:.4f}\".format(sdLL),\"SD Upper Limit = {:.4f}\".format(sdUL))\n","print(\"c4 = {:.4f}\".format(c4),\"c5 = {:.4f}\".format(c5))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Q48jv4ay3SJL"},"outputs":[],"source":["#normal stat control\n","\n","fig, ax = plt.subplots()\n","\n","sigma = 3\n","miu = 500\n","desv = 20\n","n = 6\n","obs = 10\n","\n","ll = miu - sigma*desv/math.sqrt(n)\n","ul = miu + sigma*desv/math.sqrt(n)\n","\n","sample = np.array([498.6, 508.3, 484.6, 505.7, 491.7, 495.4, 482.6, 515.2, 510.8, 503.7])\n","\n","obs = sample.size\n","\n","xo =np.arange(0, obs + 1)\n","x = np.arange(1,obs + 1)\n","\n","\n","#Upper Limit Plot\n","ax.plot(xo, np.full(obs + 1,ul), color = \"red\")\n","\n","#Lower limit plot\n","ax.plot(xo, np.full(obs + 1,ll), color = \"red\")\n","\n","#Sample Plot\n","ax.plot(x, sample, marker='o')\n","\n","fig.suptitle(\"Breaking Strength Control Chart\", fontsize = 10)\n","ax.set_ylabel(\"Sample mean breaking Strength\")\n","ax.set_xlabel(\"week\")\n","ax.annotate(\"Upper control limit = {:.2f}\".format(ul), xy=(1,ul - (ul-ll)*.04))\n","ax.annotate(\"Lower control limit = {:.2f}\".format(ll), xy=(1,ll + (ul-ll)*.04))\n","plt.show();\n","\n","plt.show;\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"h0tG8qP-EKEc"},"outputs":[],"source":["#binomial stat control\n","\n","fig, ax = plt.subplots()\n","\n","sample = np.array([2, 1, 4, 3, 2, 2, 5, 3, 4, 2, 1, 5, 2,\n","                   3, 2, 1, 0, 6, 4, 5, 2, 1, 3, 2])\n","\n","n = 100 #Sampling size\n","\n","obs = sample.size #number of n size samples taken\n","\n","p = sample.sum()/(obs * n)\n","print(\"p Avg = {:.6f}\".format(p))\n","\n","\n","ll = p - 3*math.sqrt(p*(1-p)/n)\n","ul = p + 3*math.sqrt(p*(1-p)/n)\n","\n","miunormal = n*p\n","stdnormal = math.sqrt(n*p*(1-p))\n","z1 =((100*ll) - miunormal)/stdnormal\n","z2 =((100*ul) - miunormal)/stdnormal\n","\n","print(\"normal aprox = {:.6f}\".format(1-norm.cdf(z2)))\n","print(\"binomial aprox = {:.6f}\".format(1- binom.cdf(7,n,p)))\n","\n","print(\"Lower control limit = {:.6f}\".format(ll))\n","print(\"Upper control limit = {:.6f}\".format(ul))\n","\n","if ll < 0:\n","  print (\"wrong ll {:.6f}\".format(ll))\n","  ll = 0\n","if ul > 1:\n","  print (\"wrong ul {:.6f}\".format(ul))\n","  ul = 1\n","\n","\n","xo =np.arange(0, obs + 1)\n","x = np.arange(1, obs + 1)\n","\n","\n","#Upper Limit Plot\n","ax.plot(xo, np.full(obs +1 ,ul), color = \"red\")\n","\n","#Lower limit plot\n","ax.plot(xo, np.full(obs + 1,ll), color = \"red\")\n","\n","#Sample Plot\n","ax.plot(x, sample/n, marker='o')\n","\n","fig.suptitle(\"manufacturing defect p-chart\", fontsize = 10)\n","ax.set_ylabel(\"% defective\")\n","ax.set_xlabel(\"day\")\n","ax.annotate(\"Upper control limit = {:.6f}\".format(ul), xy=(1,ul - (ul-ll)*.04))\n","ax.annotate(\"Lower control limit = {:.6f}\".format(ll), xy=(1,ll + (ul-ll)*.04))\n","plt.show();\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2MutzIQQK6f8"},"outputs":[],"source":["fig, ax = plt.subplots()\n","\n","n= 25\n","k = 1\n","\n","x = np.linspace(0, 0.25, 100)\n","y = binom.cdf(k, n, x)\n","\n","ax.plot(x, y)\n","\n","fig.suptitle(\"OC Chart n=25, k =1\", fontsize = 10)\n","ax.set_ylabel(\"Prob of acceptance\")\n","ax.set_xlabel(\"p\")\n","ax.yaxis.set_major_locator(ticker.MultipleLocator(0.1))\n","ax.xaxis.set_major_locator(ticker.MultipleLocator(0.05))\n","ax.yaxis.set_minor_locator(ticker.AutoMinorLocator(3))\n","plt.show();\n"]},{"cell_type":"markdown","metadata":{"id":"8AVo8RqJR5Ns"},"source":["# SST"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EcExhl-4mBWa"},"outputs":[],"source":["treatment = 4\n","alfa = 0.01\n","#a = np.array([16, 18, 19, 15, 19, 20,15, 19, 18,\n","#              14, 20, 20, np.NaN, 19, 19, np.NaN, 19, np. NaN])\n","\n","#a = np.array([14.4, 14.5, 13.8, 13.0, 13.1,\n","#              14.8, 14.1, 14.1, 13.4, 12.8,\n","#              15.2, 14.6, 13.7, 13.2, 12.9,\n","#              14.3, 14.2, 13.6, np.NaN, 13.2,\n","#              14.6, np.NaN, 14, np.NaN, 13.3,\n","#              np.NaN, np.NaN, np.NaN, np.NaN, 12.7])\n","\n","#a = np.array([1240, 1420, 1480, 1610, 1700,\n","#              1350, 1510, 1470, 1590, 1790,\n","#              1390, 1410, 1520, 1580, 1740,\n","#              1280, 1530, 1540, 1630, 1810,\n","#              1320, 1470, 1510, 1560, 1730])\n","\n","\n","a = np.array([140, 93, 78, 85,\n","              125, 135, 112, 72,\n","              95, 68, 57, 97,\n","              110, 53, 97, 105,\n","              59, 115, 52, 62])\n","\n","\n","data = a.reshape(int(a.size/treatment),treatment)\n","N = np.count_nonzero(~np.isnan(data))\n","nj = np.count_nonzero(~np.isnan(data), axis=0)\n","Yj = np.nanmean(data, axis = 0)\n","Ymean= np.nanmean(data)\n","total = np.nansum(data)\n","Tj = np.nansum(data, axis = 0)\n","\n","\n","print(data)\n","print(np.round(np.nanmean(data),4))\n","print(np.round(data- np.nanmean(data),4))\n","print((data- np.nanmean(data))**2)\n","print(np.round((data- np.nanmean(data))**2,4))\n","SST = np.nansum((data- np.nanmean(data))**2)\n","print(\"SST = \",np.round(SST,6))"]},{"cell_type":"markdown","metadata":{"id":"xGlWxVclSi_G"},"source":["#SSTR"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oVXKvj8ZSg9F"},"outputs":[],"source":["\n","print (Yj)\n","\n","print(np.round(Ymean,4))\n","sd = np.round(np.subtract(Yj, Ymean),4)\n","print(sd)\n","sd2 = np.round(sd**2,4)\n","print(sd2)\n","\n","print(nj)\n","print(np.multiply(nj,sd2))\n","SSTR = np.round(np.nansum(np.multiply(nj,sd2)),6)\n","print(\"SSTR = \",SSTR)"]},{"cell_type":"markdown","metadata":{"id":"tIDd-B5iRpJy"},"source":["# SSE"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BIDnRs4KrxOh"},"outputs":[],"source":["print(data)\n","print(\"\")\n","print(Yj)\n","print(\"\")\n","print(np.round(np.subtract(data,Yj),4))\n","print(\"\")\n","print(np.round((np.subtract(data,Yj)**2),4))\n","print(\"\")\n","SSE  = np.round(np.nansum(np.subtract(data,Yj)**2),6)\n","print(\"SSE = \", SSE)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jqNFqgdvGmiN"},"outputs":[],"source":["dfsst = np.count_nonzero(~np.isnan(data))-1\n","dfsstr = treatment - 1\n","dfsse = dfsst - dfsstr\n","print(\"degrees of freedom treatment = \", dfsstr)\n","print(\"degrees of freedom error = \", dfsse)\n","MSTR = SSTR/dfsstr\n","MSSE = SSE/dfsse\n","print(\"MSTR = \",MSTR)\n","print(\"MSSE = \",MSSE)\n","F = MSTR/MSSE\n","print(\"F = {:.4f}\".format(F))\n","efe = f.ppf(1-alfa ,dfsstr, dfsse)\n","print(\"f {},{},{} = {:.4f}\".format(1-alfa, dfsstr, dfsse, efe))"]},{"cell_type":"markdown","metadata":{"id":"54bGimpPc2vj"},"source":["#SST, SSTR, SSE hand computation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zd_zcr-2JArr"},"outputs":[],"source":["\n","print(\"T =\",total,\"<--->  T^2 =\",total**2, \"<--->  N =\",N)\n","\n","SST = np.nansum(data**2)-((total**2)/N)\n","SSTR = (np.nansum((Tj**2)/nj))-((total**2)/N)\n","SSE = SST - SSTR\n","print(\"Tj ={} <---> nj = {}\".format(Tj, nj))\n","print(\"SST = \", np.round(SST,4), \"<--->  SSTR = \", np.round(SSTR,6), \"<--->  SSE = \", np.round(SSE,6))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_Sz0hl4ZfVaJ"},"outputs":[],"source":["MSTR = SSTR/dfsstr\n","MSSE = SSE/dfsse\n","print(\"MSTR = {:.6f} <--->  MSSE = {:.6f}\".format(MSTR, MSSE))\n","F = MSTR/MSSE\n","print(\"F = {:.6f}\".format(F))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UKWsNdvOKbzn"},"outputs":[],"source":["efe = f.ppf(1-alfa ,dfsstr, dfsse)\n","print(\"f {},{},{} = {:.6f}\".format(1-alfa, dfsstr, dfsse, efe))"]},{"cell_type":"markdown","metadata":{"id":"bA0tXYWIYIql"},"source":["#residual analysis"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w_cKrMb1YWNm"},"outputs":[],"source":["eij = np.subtract(data, Yj)\n","print(np.round(eij,2))\n","print(\"\")\n","print(np.round(eij/math.sqrt(MSSE),2))\n"]},{"cell_type":"markdown","metadata":{"id":"xuIEd0cFNcXT"},"source":["#Scheffe test"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OmcTYs2gNuXs"},"outputs":[],"source":["cmatrix = np.array([0, -1, 1, 0])\n","\n","#determinación L\n","L = np.multiply(Yj,cmatrix).sum()\n","print(\"Determinación de L\")\n","print(\"Yj = {} <---> cj = {}\".format(Yj, cmatrix))\n","print(\"L = {:.6f}\".format(L))\n","print(\"\")\n","\n","#determinación factor A\n","fscheffe = round(f.ppf(1-alfa, dfsstr, N - treatment),6)\n","A = math.sqrt((dfsstr)*fscheffe)\n","print(\"Determinación de factor de Scheffe (A)\")\n","print(\"K-1 = {} <--> f{},{},{} = {}\".format(dfsstr, 1-alfa, dfsstr, N - treatment, fscheffe))\n","print(\"A = {:.6f}\".format(A))\n","print(\"\")\n","\n","#determinación Desv Estandar del intervalo\n","print(\"Determinación de varianza de L\")\n","sscheffe = math.sqrt(MSSE*np.divide(cmatrix**2,nj).sum())\n","print(\"MSE = {:.6f} <---> cj = {} <---> nj = {}\".format(MSSE, cmatrix, nj ))\n","print(\"S(L) = {:.6f}\".format(sscheffe))\n","print(\"\")\n","\n","#determinación del Intervalo\n","print(\"Intervalo Scheffe\")\n","print(\"( {:.4f}, {:.4f} )\".format(L - A*sscheffe, L + A*sscheffe))"]},{"cell_type":"markdown","metadata":{"id":"U7cUbyzoz3HH"},"source":["#SINGLE FACTOR EXPERIMENT RANDOMIZE IN A BLOCK DESIGN"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"i9lkP1WDygfj"},"outputs":[],"source":["# DATA\n","#a = np.array([16, 18, 19, 15, 19, 20,15, 19, 18,\n","#              14, 20, 20, np.NaN, 19, 19, np.NaN, 19, np. NaN])\n","\n","#a = np.array([14.4, 14.5, 13.8, 13.0, 13.1,\n","#              14.8, 14.1, 14.1, 13.4, 12.8,\n","#              15.2, 14.6, 13.7, 13.2, 12.9,\n","#              14.3, 14.2, 13.6, np.NaN, 13.2,\n","#              14.6, np.NaN, 14, np.NaN, 13.3,\n","#              np.NaN, np.NaN, np.NaN, np.NaN, 12.7])\n","\n","#a = np.array([1240, 1420, 1480, 1610, 1700,\n","#              1350, 1510, 1470, 1590, 1790,\n","#              1390, 1410, 1520, 1580, 1740,\n","#              1280, 1530, 1540, 1630, 1810,\n","#              1320, 1470, 1510, 1560, 1730])\n","\n","#a = np.array([140, 93, 78, 85,\n","#              125, 135, 112, 72,\n","#              95, 68, 57, 97,\n","#              110, 53, 97, 105,\n","#              59, 115, 52, 62])\n","\n","#a = np.array([33.6, 32.8, 31.9, 27.2, 30.6,\n","#              36.9, 36.1, 32.1, 34.4, 35.3,\n","#              34.2, 35.3, 33.7, 31.3, 34.6,\n","#              34.8, 37.1, 34.8, 32.9, 32.8])\n","\n","#a = np.array([18.2, 18.9, 19.1, 20.4,\n","#              27.4, 27.9, 28.1, 29.9,\n","#              35.2, 34.9, 35.8, 38.2,\n","#              14.8, 15.2, 14.9, 17.3,\n","#              25.4, 24.8, 25.6, 26.9])\n","\n","a = np.array([835, 874, 750, 854,\n","              787, 827, 755, 829,\n","              724, 738, 698, 726,\n","              336, 378, 210, 279,\n","              252, 315, 168, 336,\n","              560, 672, 558, 642,\n","              336, 341, 260, 336])\n","\n","# COMMON STATISTICS AND INITIAL PARAMETERS\n","treatment = 4\n","alfa = 0.05\n","blocks = int(a.size/treatment)\n","data = a.reshape(blocks ,treatment)\n","\n","\n","N = np.count_nonzero(~np.isnan(data)) # total count of data values\n","nj = np.count_nonzero(~np.isnan(data), axis=0) # count of data en each treatment\n","\n","\n","Yj = np.nanmean(data, axis = 0) #mean of each treatment\n","Yi = np.nanmean(data, axis = 1) #mean of each block\n","Ymean= np.nanmean(data)\n","\n","Tj = np.nansum(data, axis = 0)\n","Ti = np.nansum(data, axis = 1)\n","total = np.nansum(data)\n","\n","dfsstr = treatment - 1\n","dfssb = blocks- 1\n","dfsse = dfsstr * dfssb\n","\n","#SST\n","SST = np.nansum(data**2)-((total**2)/(blocks * treatment))\n","\n","#SSB\n","SSB = (np.sum(Ti**2)/treatment)- ((total**2)/(blocks * treatment))\n","\n","#SSTR\n","SSTR = (np.sum(Tj**2)/blocks) - ((total**2)/(blocks * treatment))\n","\n","#SSE\n","SSE  = SST - SSB - SSTR\n","\n","latex = \"\\overline{Y} = \" + str(Ymean)\n","display(Latex(latex))\n","print(\"Tj ={} <---> Ti = {}\".format(Tj, Ti))\n","print(\"T = {:.6f}\".format(total))\n","print(\"SST = {:.6f} <--->  SSB = {:.6f}\".format(SST, SSB))\n","print(\"SSTR = {:.6f} <--->  SSE = {:.6f}\".format(SSTR, SSE))\n","\n","#Medium Square Calc\n","MSTR = SSTR/dfsstr\n","MSSE = SSE/dfsse\n","\n","print(\"MSTR = {:.6f} <--->  MSSE = {:.6f}\".format(MSTR, MSSE))\n","F = MSTR/MSSE\n","print(\"F = {:.6f}\".format(F))\n","fscheffe = f.ppf(1-alfa, dfsstr, dfsse)\n","\n","#ANOVA Table\n","\n","html_table = \"\"\"<table style=\"width:50%; border: none;\n","                  border-collapse: collapse;\">\n","  <tr style =\"border-bottom-style: solid; border-width: 1px;\">\n","    <th style=\"width:20%\"; text-align: left></th>\n","    <th style=\"width:20%\"></th>\n","    <th style=\"width:20%\">ANOVA table</th>\n","    <th style=\"width:20%\"></th>\n","    <th style=\"width:20%\"></th>\n","  </tr>\n","  <tr style =\"border-bottom-style: solid; border-width: 1px; height: 40px;\">\n","    <th style=\"text-align: left;\">Source of Variation</th>\n","    <th>df</th>\n","    <th>SS</th>\n","    <th>MS</th>\n","    <th>F value</th>\n","  </tr>\n","  <tr style=\"height: 40px;\">\n","    <th style=\"text-align: left;\">Blocks</th>\n","    <td style=\"text-align: center\">{}</td>\n","    <td style=\"text-align: center\">{:.4f}</td>\n","    <td style=\"text-align: center\"></td>\n","    <td rowspan = \"3\"\n","    \tstyle=\"text-align: center; border-bottom-style: solid;\n","    \t\t\tborder-width: 1px;\"> {:.4f}</td>\n","  </tr>\n","  <tr style=\"height: 40px;\">\n","    <th style=\"text-align: left;\">Treatment</th>\n","    <td style=\"text-align: center\">{}</td>\n","    <td style=\"text-align: center\">{:.4f}</td>\n","    <td style=\"text-align: center\">{:.4f}</td>\n","  </tr>\n","  <tr style=\"height: 40px;\">\n","    <th style=\"text-align: left;\">Error</th>\n","    <td style=\"text-align: center; border-bottom-style: solid;\n","    \t\t\tborder-width: 1px;\">{}</td>\n","    <td style=\"text-align: center; border-bottom-style: solid;\n","    \t\t\tborder-width: 1px;\">{:.4f}</td>\n","    <td style=\"text-align: center; border-bottom-style: solid;\n","    \t\t\tborder-width: 1px;\">{:.4f}</td>\n","  </tr>\n","  <tr style =\"border-bottom-style: solid; border-width: 1px; height: 40px;\">\n","    <th style=\"text-align: left;\">Total</th>\n","    <td style=\"text-align: center\">{}</td>\n","    <td style=\"text-align: center\">{:.4f}</td>\n","    <td colspan =\"2\" style=\"text-align: center\">\n","    \t<math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n","          <mrow>\n","            <msub>\n","              <mi>f</mi>\n","              <mrow>\n","                <mn>{:.2f}</mn>\n","                <mo>,</mo>\n","                <mn>{}</mn>\n","                <mo>,</mo>\n","                <mn>{}</mn>\n","              </mrow>\n","            </msub>\n","            <mo>=</mo>\n","            <mn>{:.6f}</mn>\n","          </mrow>\n","      </math>\n","    </td>\n","  </tr>\n","</table>\n","</body>\n","</html> \"\"\".format(dfssb, SSB, F, dfsstr, SSTR, MSTR, dfsse, SSE, MSSE,\n","                   dfssb + dfsstr + dfsse, SST, 1- alfa, dfsstr, dfsse,\n","                   fscheffe)\n","\n","display(HTML(data = html_table))\n","\n","#F-test\n","#Residual analysis\n","eij = np.subtract(data, Yj)\n","\n","print(\"\")\n","print(\"RESIDUAL ANALYSIS\")\n","print(np.round(eij,2))\n","print(\"\")\n","print(np.round(eij/math.sqrt(MSSE),2))\n","print(\"\")\n","\n","\n","#SCHEFFE CONTRAST\n","cmatrix = np.array([1, 0, -1, 0])\n","\n","#determinación L\n","L = np.multiply(Yj,cmatrix).sum()\n","print(\"Determinación de L\")\n","print(\"Yj = {} <---> cj = {}\".format(Yj, cmatrix))\n","print(\"L = {:.6f}\".format(L))\n","print(\"\")\n","\n","#determinación factor A\n","A = math.sqrt((dfsstr)*fscheffe)\n","print(\"Determinación de factor de Scheffe (A)\")\n","latex = \"k-1 = {} <--> \".format(dfsstr) + \"f_{\"+\"{},{},{}\".format(1-alfa, dfsstr, dfsse)+\"}\"+\" = {:.6f}\".format(fscheffe)\n","print(latex)\n","display(Latex(latex))\n","print(\"A = {:.6f}\".format(A))\n","print(\"\")\n","\n","#determinación Desv Estandar del intervalo\n","print(\"Determinación de varianza de L\")\n","sscheffe = math.sqrt(MSSE*np.divide(cmatrix**2,nj).sum())\n","print(\"MSE = {:.6f} <---> cj = {} <---> nj = {}\".format(MSSE, cmatrix, nj ))\n","print(\"S(L) = {:.6f}\".format(sscheffe))\n","print(\"\")\n","\n","#determinación del Intervalo\n","print(\"Intervalo Scheffe\")\n","print(\"( {:.4f}, {:.4f} )\".format(L - A*sscheffe, L + A*sscheffe))\n"]},{"cell_type":"markdown","metadata":{"id":"HzoKDVc9nniy"},"source":["#Factorial experiment (2 Fixed Factors)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yvhe7ijWfqY_"},"outputs":[],"source":["# DATA\n","\n","#a = np.array([15.2, 16.8, 15.5, 14.9,\n","#              14.9, 16.2, 15.6, 15.3,\n","#              16.2, 15.9, 16.8, 15.8,\n","#              18.1, 16.3, 17.2, 17.9,\n","#              17.8, 18.2, 18.1, 17.6,\n","#              18.4, 16.8,  17.5,18.7])\n","\n","a = np.array([35, 26, 38, 20,\n","              45, 39, 39, 43,\n","              24, 23, 36, 29,\n","              55, 48, 39, 49,\n","              55, 44, 68, 64,\n","              64, 57, 62, 61,\n","              58, 74, 49, 69,\n","              68, 61, 60, 75,\n","              97, 89, 92, 99,\n","              93, 91, 82, 98,\n","              89, 98, 85, 87,\n","              82, 78, 89, 92])\n","\n","# COMMON STATISTICS AND INITIAL PARAMETERS\n","atitle =\"Trigo\"\n","btitle =\"Fertilizer\"\n","factora = 4\n","factorb = 3\n","alfa = 0.05\n","n = int(a.size/(factora*factorb))\n","data = a.reshape(factorb , factora, n)\n","\n","Tij = np.nansum(data, axis = 2)\n","Ti = np.nansum(data, axis = (2,0))\n","Tj = np.nansum(data, axis = (2,1))\n","\n","T = np.nansum(data)\n","\n","Ymean = np.nanmean(data)\n","Yij = np.nanmean(data, axis = 2)\n","\n","\n","dffacta = factora - 1\n","dffactb = factorb - 1\n","dffactab  = dffacta * dffactb\n","dferror = factora *factorb*(n-1)\n","dftotal = (factora *factorb*n)-1\n","\n","#SST\n","SST = np.nansum(data**2) - ((T**2)/(factora *factorb*n))\n","\n","#SSTR\n","SSTR = (np.sum(Tij**2)/n) - ((T**2)/(factora *factorb*n))\n","\n","#SSA\n","SSA = (np.sum(Ti**2)/(factorb * n)) - ((T**2)/(factora *factorb*n))\n","\n","#SSB\n","SSB = (np.sum(Tj**2)/(factora * n)) - ((T**2)/(factora *factorb*n))\n","\n","#SSAB\n","SSAB = (np.sum(Tij**2)/n) - (np.sum(Ti**2)/(factorb * n)) - (np.sum(Tj**2)/(factora * n)) + ((T**2)/(factora *factorb*n))\n","\n","#SSE\n","SSE  = np.nansum(data**2) - (np.sum(Tij**2)/n)\n","\n","latex = \"\\overline{Y} = \" + str(Ymean)\n","display(Latex(latex))\n","print(\"a = {} <--> b = {} <---> n = {}\".format(factora, factorb, n))\n","latex = \"T_{ij} = \"\n","display(Latex(latex), Tij)\n","\n","print(\"T = {:.6f}\".format(T))\n","print(\"SST = {:.6f} <--->  SSTR = {:.6f}\".format(SST, SSTR))\n","print(\"SSE = {:.6f}\".format(SSE))\n","print(\"\")\n","latex = \"T_i = \"\n","display(Latex(latex), Ti)\n","latex = \"T_j = \"\n","display(Latex(latex), Tj)\n","\n","\n","#Medium Square Calc\n","MSA = SSA/dffacta\n","MSB = SSB/dffactb\n","MSAB = SSAB/dffactab\n","MSError = SSE/dferror\n","\n","\n","\n","FA = MSA/MSError\n","FB = MSB/MSError\n","FAB = MSAB/MSError\n","\n","fscheffea = f.ppf(1-alfa, dffacta, dferror)\n","fscheffeb = f.ppf(1-alfa, dffactb, dferror)\n","fscheffeab = f.ppf(1-alfa, dffactab, dferror)\n","\n","\n","#ANOVA Table\n","\n","html_table = \"\"\"<table style=\"width:50%; border: none;\n","                  border-collapse: collapse;\">\n","  <tr style =\"border-bottom-style: solid; border-width: 1px;\">\n","    <th style=\"width:20%\"; text-align: left></th>\n","    <th style=\"width:20%\"></th>\n","    <th style=\"width:20%\">ANOVA table</th>\n","    <th style=\"width:20%\"></th>\n","    <th style=\"width:20%\"></th>\n","  </tr>\n","  <tr style =\"border-bottom-style: solid; border-width: 1px; height: 40px;\">\n","    <th style=\"text-align: left;\">Source of Variation</th>\n","    <th>df</th>\n","    <th>SS</th>\n","    <th>MS</th>\n","    <th>F value</th>\n","  </tr>\n","  <tr style=\"height: 40px;\">\n","    <th style=\"text-align: left;\">{}</th>\n","    <td style=\"text-align: center\">{}</td>\n","    <td style=\"text-align: center\">{:.6f}</td>\n","    <td style=\"text-align: center\">{:.6f}</td>\n","    <td style=\"text-align: center;\">{:.6f}</td>\n","  </tr>\n","  <tr style=\"height: 40px;\">\n","    <th style=\"text-align: left;\">{}</th>\n","    <td style=\"text-align: center\">{}</td>\n","    <td style=\"text-align: center\">{:.6f}</td>\n","    <td style=\"text-align: center\">{:.6f}</td>\n","    <td style=\"text-align: center;\">{:.6f}</td>\n","  </tr>\n","  <tr style=\"height: 40px;\">\n","    <th style=\"text-align: left;\">{}</th>\n","    <td style=\"text-align: center\">{}</td>\n","    <td style=\"text-align: center\">{:.6f}</td>\n","    <td style=\"text-align: center\">{:.6f}</td>\n","    <td style=\"text-align: center;\">{:.6f}</td>\n","  </tr>\n","  <tr style=\"height: 40px;\">\n","    <th style=\"text-align: left;\">Error</th>\n","    <td style=\"text-align: center; border-bottom-style: solid;\n","    \t\t\tborder-width: 1px;\">{}</td>\n","    <td style=\"text-align: center; border-bottom-style: solid;\n","    \t\t\tborder-width: 1px;\">{:.6f}</td>\n","    <td style=\"text-align: center; border-bottom-style: solid;\n","    \t\t\tborder-width: 1px;\">{:.6f}</td>\n","    <td style=\"text-align: center; border-bottom-style: solid;\n","    \t\t\tborder-width: 1px;\"></td>\n","  </tr>\n","  <tr style =\"border-bottom-style: solid; border-width: 1px; height: 40px;\">\n","    <th style=\"text-align: left;\">Total</th>\n","    <td style=\"text-align: center\">{}</td>\n","    <td style=\"text-align: center\">{:.6f}</td>\n","    <td colspan =\"2\" style=\"text-align: center\">\n","    \t<math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n","          <mrow>\n","            <msub>\n","              <mi>f</mi>\n","              <mrow>\n","                <mn>a {:.2f}</mn>\n","                <mo>,</mo>\n","                <mn>{}</mn>\n","                <mo>,</mo>\n","                <mn>{}</mn>\n","              </mrow>\n","            </msub>\n","            <mo>=</mo>\n","            <mn>{:.6f} </mn>\n","            <msub>\n","              <mi>; f</mi>\n","              <mrow>\n","                <mn>b {:.2f}</mn>\n","                <mo>,</mo>\n","                <mn>{}</mn>\n","                <mo>,</mo>\n","                <mn>{}</mn>\n","              </mrow>\n","            </msub>\n","            <mo>=</mo>\n","            <mn>{:.6f}</mn>\n","          </mrow>\n","      </math>\n","    </td>\n","  </tr>\n","  <tr style=\"height: 40px;\">\n","    <th style=\"text-align: left;\"></th>\n","    <td style=\"text-align: center;\"></td>\n","    <td style=\"text-align: center;\"></td>\n","    <td style=\"text-align: center;\"></td>\n","    <td colspan =\"2\" style=\"text-align: center\">\n","    \t<math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n","          <mrow>\n","            <msub>\n","              <mi>f</mi>\n","              <mrow>\n","                <mn>ab {:.2f}</mn>\n","                <mo>,</mo>\n","                <mn>{}</mn>\n","                <mo>,</mo>\n","                <mn>{}</mn>\n","              </mrow>\n","            </msub>\n","            <mo>=</mo>\n","            <mn>{:.6f} </mn>\n","          </mrow>\n","      </math>\n","    </td>\n","  </tr>\n","</table>\n","</body>\n","</html> \"\"\".format(atitle, dffacta, SSA, MSA, FA,\n","                   btitle, dffactb, SSB, MSB, FB,\n","                   atitle +\" x \"+ btitle, dffactab, SSAB, MSAB, FAB,\n","                   dferror, SSE, MSError,\n","                   dftotal, SST,\n","                   1- alfa, dffacta, dferror,fscheffea,\n","                   1- alfa, dffactb, dferror,fscheffeb,\n","                   1- alfa, dffactab, dferror,fscheffeab)\n","\n","display(HTML(data = html_table))\n","\n","#F-test\n","#Residual analysis\n","arrays = [Yij for _ in range(4)]\n","stackedYij = np.stack(arrays, axis=2)\n","eijk = np.subtract(data, stackedYij)\n","\n","print(\"\")\n","print(\"RESIDUAL ANALYSIS\")\n","print(np.round(eijk,2))\n","print(\"\")\n","print(np.round(eijk/math.sqrt(MSError),2))\n","print(\"\")\n","\n"]},{"cell_type":"markdown","metadata":{"id":"PzC6UKjCHa5l"},"source":["# Simple Linear Reggression"]},{"cell_type":"markdown","metadata":{"id":"bJULG7Zc2Qpl"},"source":["## durbin watson table interpolation"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":1407,"status":"ok","timestamp":1726142244787,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"},"user_tz":240},"id":"NbNw8iFpngSg","outputId":"0d895004-243c-4de2-ad88-760f6090212e"},"outputs":[{"data":{"text/html":["<math>\n","    <mrow>\n","        <mi>X</mi>\n","        <mo>&#x2032;</mo>\n","        <mi>X</mi>\n","        <mo>=</mo>\n","        <mo>[</mo>\n","          <mtable>\n","            <mtr>\n","              <mtd>\n","                <mn>14.000000</mn>\n","              </mtd>\n","              \n","              <mtd>\n","                <mn>582.400000</mn>\n","              </mtd>\n","              \n","                        </mtr>\n","            <mtr>\n","              <mtd>\n","                <mn>582.400000</mn>\n","              </mtd>\n","              \n","              <mtd>\n","                <mn>33894.920000</mn>\n","              </mtd>\n","              \n","                        </mtr>\n","  </mtable>\n","        <mo>]</mo>\n","    </mrow>\n","    </math>\n","  "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"text/html":["<math>\n","    <mrow>\n","        <mi>X</mi>\n","        <mo>&#x2032;</mo>\n","        <mi>Y</mi>\n","        <mo>=</mo>\n","        <mo>[</mo>\n","          <mtable>\n","            <mtr>\n","              <mtd>\n","                <mn>235.600000</mn>\n","              </mtd>\n","              \n","                        </mtr>\n","            <mtr>\n","              <mtd>\n","                <mn>10919.090000</mn>\n","              </mtd>\n","              \n","                        </mtr>\n","  </mtable>\n","        <mo>]</mo>\n","    </mrow>\n","    </math>\n","  "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"text/html":["<math>\n","    <mrow>\n","    <msup>\n","      <mrow>\n","        <mo>(</mo>\n","          <mi>X</mi>\n","          <mo>&#x2032;</mo>\n","          <mi>X</mi>\n","        <mo>)</mo>\n","      </mrow>\n","      <mrow>\n","        <mo>-</mo>\n","        <mn>1</mn>\n","      </mrow>\n","    </msup>\n","        <mo>=</mo>\n","        <mo>[</mo>\n","\n","          <mtable>\n","            <mtr>\n","              <mtd>\n","                <mn>0.250444</mn>\n","              </mtd>\n","              \n","              <mtd>\n","                <mn>-0.004303</mn>\n","              </mtd>\n","              \n","                        </mtr>\n","            <mtr>\n","              <mtd>\n","                <mn>-0.004303</mn>\n","              </mtd>\n","              \n","              <mtd>\n","                <mn>0.000103</mn>\n","              </mtd>\n","              \n","                        </mtr>\n","  </mtable>\n","        <mo>]</mo>\n","    </mrow>\n","    </math>\n","  "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"text/html":["<!DOCTYPE html>\n","  <html>\n","  <head>\n","      <title>2x2 Matrix in MathML</title>\n","  </head>\n","  <body>\n","      <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n","          <mrow>\n","              <mi>B</mi>\n","              <mo>=</mo>\n","              <mo>[</mo>\n","              <mtable>\n","                  \n","                  <mtr>\n","                      <mtd><mn>12.016963</mn></mtd>\n","                  </mtr>\n","                  <mtr>\n","                      <mtd><mn>0.115664</mn></mtd>\n","                  </mtr>\n","              </mtable>\n","              <mo>]</mo>\n","          </mrow>\n","      </math>\n","  </body>\n","  </html>\n","  "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"text/html":["<table style=\" border: none;\n","                    border-collapse: collapse; width:65%; word-break: break-word;\">\n","    <tr \tstyle =\"border-bottom-style: solid; border-width: 1px; text-align: center\">\n","      <th colspan =\"9\">Simple Linear Reggression Aggregates</th>\n","    </tr>\n","    <tr style =\" border-width: 1px; height: 20px;\">\n","      <th Style = \"width:7%\"></th>\n","      <th>gross annual income</th>\n","      <th Style = \"width:12%\">Percent taxes Paid </th>\n","      <th Style = \"width:12%\"></th>\n","      <th Style = \"width:12%\"></th>\n","      <th Style = \"width:12%\"></th>\n","      <th>Estimated Percent taxes Paid</th>\n","      <th Style = \"width:12%\">Residual</th>\n","      <th Style = \"width:12%\">Squared Residual</th>\n","    </tr>\n","    <tr style =\"border-bottom-style: solid; border-width: 1px; height: 20px;\">\n","      <th></th>\n","      <th>\n","        <math>\n","          <msub>\n","            <mi>x</mi>\n","            <mi>i</mi>\n","          </msub>\n","        <math>\n","      </th>\n","      <th>\n","        <math>\n","          <msub>\n","            <mi>y</mi>\n","            <mi>i</mi>\n","          </msub>\n","          <math>\n","      </th>\n","      <th>\n","        <math>\n","          <msub>\n","            <mi>x</mi>\n","            <mi>i</mi>\n","          </msub>\n","          <msub>\n","            <mi>y</mi>\n","            <mi>i</mi>\n","          </msub>\n","          <math>\n","      </th>\n","      <th>\n","        <math>\n","          <msubsup>\n","            <mi>x</mi>\n","            <mi>i</mi>\n","            <mn>2</mn>\n","          </msubsup>\n","        <math>\n","      </th>\n","      <th>\n","        <math>\n","          <msubsup>\n","            <mi>y</mi>\n","            <mi>i</mi>\n","            <mn>2</mn>\n","          </msubsup>\n","          <math>\n","      </th>\n","      <th>\n","        <math>\n","          <msub>\n","          <mrow>\n","            <mover>\n","              <mi>y</mi>\n","              <mo>^</mo>\n","            </mover>\n","          </mrow>\n","          <mi>i</mi>\n","          </msub>\n","        <math>\n","      </th>\n","      <th>\n","        <math>\n","          <msub>\n","            <mi>y</mi>\n","            <mi>i</mi>\n","          </msub>\n","          <mo>-</mo>\n","          <msub>\n","          <mrow>\n","            <mover>\n","              <mi>y</mi>\n","              <mo>^</mo>\n","            </mover>\n","          </mrow>\n","          <mi>i</mi>\n","          </msub>\n","        <math>\n","      </th>\n","      <th>\n","        <math>\n","          <msup>\n","            <mrow>\n","              <mo>(</mo>\n","              <msub>\n","                <mi>y</mi>\n","                <mi>i</mi>\n","              </msub>\n","              <mo>-</mo>\n","              <msub>\n","              <mrow>\n","                <mover>\n","                  <mi>y</mi>\n","                  <mo>^</mo>\n","                </mover>\n","              </mrow>\n","              <mi>i</mi>\n","              </msub>\n","              <mo>)</mo>\n","            </mrow>\n","            <mn>2</mn>\n","          </msup>\n","        <math>\n","      </th>\n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">25.6000</td>\n","      <td style=\"text-align: center\">15.4000</td>\n","      <td style=\"text-align: center\">394.2400</td>\n","      <td style=\"text-align: center\">655.3600</td>\n","      <td style=\"text-align: center;\">237.1600</td>\n","      <td style=\"text-align: center\">14.9780</td>\n","      <td style=\"text-align: center\">0.4220</td>\n","      <td style=\"text-align: center;\">0.1781</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">42.2000</td>\n","      <td style=\"text-align: center\">16.8000</td>\n","      <td style=\"text-align: center\">708.9600</td>\n","      <td style=\"text-align: center\">1780.8400</td>\n","      <td style=\"text-align: center;\">282.2400</td>\n","      <td style=\"text-align: center\">16.8980</td>\n","      <td style=\"text-align: center\">-0.0980</td>\n","      <td style=\"text-align: center;\">0.0096</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">57.6000</td>\n","      <td style=\"text-align: center\">19.7000</td>\n","      <td style=\"text-align: center\">1134.7200</td>\n","      <td style=\"text-align: center\">3317.7600</td>\n","      <td style=\"text-align: center;\">388.0900</td>\n","      <td style=\"text-align: center\">18.6792</td>\n","      <td style=\"text-align: center\">1.0208</td>\n","      <td style=\"text-align: center;\">1.0421</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">98.8000</td>\n","      <td style=\"text-align: center\">21.7000</td>\n","      <td style=\"text-align: center\">2143.9600</td>\n","      <td style=\"text-align: center\">9761.4400</td>\n","      <td style=\"text-align: center;\">470.8900</td>\n","      <td style=\"text-align: center\">23.4445</td>\n","      <td style=\"text-align: center\">-1.7445</td>\n","      <td style=\"text-align: center;\">3.0434</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">10.4000</td>\n","      <td style=\"text-align: center\">10.8000</td>\n","      <td style=\"text-align: center\">112.3200</td>\n","      <td style=\"text-align: center\">108.1600</td>\n","      <td style=\"text-align: center;\">116.6400</td>\n","      <td style=\"text-align: center\">13.2199</td>\n","      <td style=\"text-align: center\">-2.4199</td>\n","      <td style=\"text-align: center;\">5.8557</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">30.1000</td>\n","      <td style=\"text-align: center\">15.2000</td>\n","      <td style=\"text-align: center\">457.5200</td>\n","      <td style=\"text-align: center\">906.0100</td>\n","      <td style=\"text-align: center;\">231.0400</td>\n","      <td style=\"text-align: center\">15.4984</td>\n","      <td style=\"text-align: center\">-0.2984</td>\n","      <td style=\"text-align: center;\">0.0891</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">40.0000</td>\n","      <td style=\"text-align: center\">18.9000</td>\n","      <td style=\"text-align: center\">756.0000</td>\n","      <td style=\"text-align: center\">1600.0000</td>\n","      <td style=\"text-align: center;\">357.2100</td>\n","      <td style=\"text-align: center\">16.6435</td>\n","      <td style=\"text-align: center\">2.2565</td>\n","      <td style=\"text-align: center;\">5.0917</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">29.3000</td>\n","      <td style=\"text-align: center\">15.9000</td>\n","      <td style=\"text-align: center\">465.8700</td>\n","      <td style=\"text-align: center\">858.4900</td>\n","      <td style=\"text-align: center;\">252.8100</td>\n","      <td style=\"text-align: center\">15.4059</td>\n","      <td style=\"text-align: center\">0.4941</td>\n","      <td style=\"text-align: center;\">0.2441</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">16.1000</td>\n","      <td style=\"text-align: center\">12.0000</td>\n","      <td style=\"text-align: center\">193.2000</td>\n","      <td style=\"text-align: center\">259.2100</td>\n","      <td style=\"text-align: center;\">144.0000</td>\n","      <td style=\"text-align: center\">13.8791</td>\n","      <td style=\"text-align: center\">-1.8791</td>\n","      <td style=\"text-align: center;\">3.5312</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">18.0000</td>\n","      <td style=\"text-align: center\">14.1000</td>\n","      <td style=\"text-align: center\">253.8000</td>\n","      <td style=\"text-align: center\">324.0000</td>\n","      <td style=\"text-align: center;\">198.8100</td>\n","      <td style=\"text-align: center\">14.0989</td>\n","      <td style=\"text-align: center\">0.0011</td>\n","      <td style=\"text-align: center;\">0.0000</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">88.2000</td>\n","      <td style=\"text-align: center\">21.1000</td>\n","      <td style=\"text-align: center\">1861.0200</td>\n","      <td style=\"text-align: center\">7779.2400</td>\n","      <td style=\"text-align: center;\">445.2100</td>\n","      <td style=\"text-align: center\">22.2185</td>\n","      <td style=\"text-align: center\">-1.1185</td>\n","      <td style=\"text-align: center;\">1.2510</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">34.0000</td>\n","      <td style=\"text-align: center\">17.6000</td>\n","      <td style=\"text-align: center\">598.4000</td>\n","      <td style=\"text-align: center\">1156.0000</td>\n","      <td style=\"text-align: center;\">309.7600</td>\n","      <td style=\"text-align: center\">15.9495</td>\n","      <td style=\"text-align: center\">1.6505</td>\n","      <td style=\"text-align: center;\">2.7241</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">22.1000</td>\n","      <td style=\"text-align: center\">14.8000</td>\n","      <td style=\"text-align: center\">327.0800</td>\n","      <td style=\"text-align: center\">488.4100</td>\n","      <td style=\"text-align: center;\">219.0400</td>\n","      <td style=\"text-align: center\">14.5731</td>\n","      <td style=\"text-align: center\">0.2269</td>\n","      <td style=\"text-align: center;\">0.0515</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">70.0000</td>\n","      <td style=\"text-align: center\">21.6000</td>\n","      <td style=\"text-align: center\">1512.0000</td>\n","      <td style=\"text-align: center\">4900.0000</td>\n","      <td style=\"text-align: center;\">466.5600</td>\n","      <td style=\"text-align: center\">20.1134</td>\n","      <td style=\"text-align: center\">1.4866</td>\n","      <td style=\"text-align: center;\">2.2099</td>\n","        </tr>\n","        <tr style=\"height: 10px;\">\n","      <td></td>\n","    </tr>\n","    <tr style =\"border-bottom-style: solid; border-width: 1px; height: 40px;\">\n","      <th style=\"text-align: left;\">Totals</th>\n","      <td style=\"text-align: center\">582.4</td>\n","      <td style=\"text-align: center\">235.6000</td>\n","      <td style=\"text-align: center\">10919.0900</td>\n","      <td style=\"text-align: center;\">33894.9200</td>\n","      <td style=\"text-align: center\">4119.4600</td>\n","      <td style=\"text-align: center\">235.6000</td>\n","      <td style=\"text-align: center;\">-0.0000</td>\n","      <td style=\"text-align: center;\">25.3215</td>\n","    </tr>\n","  </table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","\n","\n"]},{"data":{"text/html":["<table style=\"width:50%; border: none;\n","                    border-collapse: collapse;\">\n","    <tr style =\"border-bottom-style: solid; border-width: 1px;\">\n","      <th colspan = 6 >Variance table</th>\n","    </tr>\n","    <tr <!--style =\"height: 40px;\"-->>\n","      <th style=\"text-align: left;\">Statistic</th>\n","      <th>Value</th>\n","      <th>Std Dev</th>\n","      <th>Variance</th>\n","      <th style=\"text-align: left; width:17%; word-break: break-word;\">Lower confidence limit</th>\n","      <th style=\"text-align: left; width:17%; word-break: break-word;\">Upper confidence limit</th>\n","    </tr>\n","    <tr style =\"border-bottom-style: solid; border-width: 1px; height: 20px;\">\n","      <td colspan = 4></td>\n","      <td colspan = 2 style=\"text-align: center\">\n","        <math>\n","          <mn>1</mn>\n","          <mo>-</mo>\n","          <mi>&alpha;</mi>\n","          <mo>=</mo>\n","          <mn>0.95</mn>\n","        <math>\n","      </td>\n","    </tr>\n","    <tr style=\"height: 40px;\">\n","      <th style=\"text-align: center;\">\n","        <math>\n","          <msub>\n","            <mi>B</mi>\n","            <mn>0</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td style=\"text-align: center;\">12.016963</td>\n","      <td style=\"text-align: center;\">0.726959</td>\n","      <td style=\"text-align: center;\">0.528470</td>\n","      <td style=\"text-align: center;\">10.433054</td>\n","      <td style=\"text-align: center;\">13.600871</td>\n","    </tr>\n","    <tr style=\"height: 40px;\">\n","      <th style=\"text-align: center;border-bottom-style: solid;\n","            border-width: 1px;\">\n","        <math>\n","          <msub>\n","            <mi>B</mi>\n","            <mn>1</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td style=\"text-align: center;border-bottom-style: solid;\n","            border-width: 1px;\">0.115664</td>\n","      <td style=\"text-align: center;border-bottom-style: solid;\n","            border-width: 1px;\">0.014774</td>\n","      <td style=\"text-align: center;border-bottom-style: solid;\n","            border-width: 1px;\">0.000218</td>\n","      <td style=\"text-align: center;border-bottom-style: solid;\n","            border-width: 1px;\">0.083473</td>\n","      <td style=\"text-align: center;border-bottom-style: solid;\n","            border-width: 1px;\">0.147854</td>\n","    </tr>\n","  </table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","\n","\n"]},{"data":{"text/html":["<table style=\" border: none;\n","                    border-collapse: collapse; width:65%; word-break: break-word;\">\n","    <tr \tstyle =\"border-bottom-style: solid; border-width: 1px; text-align: center\">\n","      <th colspan =\"4\"> Prediction intervals for average gross annual income </th>\n","    </tr>\n","    <tr style =\"border-bottom-style: solid; border-width: 1px; height: 20px;\">\n","      <th>\n","        <math>\n","          <msub>\n","            <mi>x</mi>\n","            <mi>p</mi>\n","          </msub>\n","        <math>\n","      </th>\n","      <th>\n","        <math>\n","\n","              <mover>\n","                <mi>y</mi>\n","                <mo>^</mo>\n","              </mover>\n","\n","          </msub>\n","        <math>\n","      </th>\n","      <th>\n","        <math>\n","          <mi>s</mi>\n","          <mo>(</mo>\n","\n","              <mover>\n","                <mi>y</mi>\n","                <mo>^</mo>\n","              </mover>\n","\n","          <mo>)</mo>\n","        <math>\n","      </th>\n","      <th>95% prediction interval</th>\n","      \n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">15.0000</td>\n","      <td style=\"text-align: center\">13.7519</td>\n","      <td style=\"text-align: center\">0.5524</td>\n","      <td style=\"text-align: center\">\n","        <math>\n","          <mo>(</mo>\n","          <mn>12.5483</mn>\n","          <mo>,</mo>\n","          <mn>14.9555</mn>\n","          <mo>)</mo>\n","        <math>\n","      </td>\n","    </tr>\n","        "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","\n","\n"]},{"data":{"text/html":["<table style=\" border: none;\n","                      border-collapse: collapse; width:65%; word-break: break-word;\">\n","      <tr \tstyle =\"border-bottom-style: solid; border-width: 1px; text-align: center\">\n","        <th colspan =\"4\"> Prediction intervals for particular values of gross annual income </th>\n","      </tr>\n","      <tr style =\"border-bottom-style: solid; border-width: 1px; height: 20px;\">\n","        <th>\n","          <math>\n","            <msub>\n","              <mi>x</mi>\n","              <mi>p</mi>\n","            </msub>\n","          <math>\n","        </th>\n","        <th>\n","          <math>\n","            <msub>\n","              <mrow>\n","                <mover>\n","                  <mi>y</mi>\n","                  <mo>^</mo>\n","                </mover>\n","              <mrow>\n","              <mn>part</mn>\n","            </msub>\n","          <math>\n","        </th>\n","        <th>\n","          <math>\n","            <mi>s</mi>\n","            <mo>(</mo>\n","            <msub>\n","              <mrow>\n","                <mover>\n","                  <mi>y</mi>\n","                  <mo>^</mo>\n","                </mover>\n","              <mrow>\n","              <mn>part</mn>\n","            </msub>\n","            <mo>)</mo>\n","          <math>\n","        </th>\n","        <th>95% prediction interval</th>\n","        \n","      <tr style=\"height: 20px;\">\n","        <td style=\"text-align: center;\">15.0000</td>\n","        <td style=\"text-align: center\">13.7519</td>\n","        <td style=\"text-align: center\">1.5541</td>\n","        <td style=\"text-align: center\">\n","          <math>\n","            <mo>(</mo>\n","            <mn>10.3658</mn>\n","            <mo>,</mo>\n","            <mn>17.1381</mn>\n","            <mo>)</mo>\n","          <math>\n","        </td>\n","      </tr>\n","          "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","\n","\n"]},{"data":{"text/html":["<table style=\"width:50%; border: none;\n","                    border-collapse: collapse;\">\n","    <tr style =\"border-bottom-style: solid; border-width: 1px;\">\n","      <th colspan = 5>ANOVA table</th>\n","    </tr>\n","    <tr style =\"border-bottom-style: solid; border-width: 1px; height: 40px;\">\n","      <th style=\"text-align: left;\">Source of variation</th>\n","      <th>df</th>\n","      <th>SS</th>\n","      <th>MS</th>\n","      <th>F Statistic</th>\n","    </tr>\n","    <tr style=\"height: 40px;\">\n","      <th style=\"text-align: left;\">Regression</th>\n","      <td style=\"text-align: center\">1</td>\n","      <td style=\"text-align: center\">129.327025</td>\n","      <td style=\"text-align: center\">129.327025</td>\n","      <td rowspan = 2 style=\"text-align: center; border-bottom-style: solid\n","                              ;border-width: 1px;\">\n","      61.288686</td>\n","    </tr>\n","    <tr style=\"height: 40px;\">\n","      <th style=\"text-align: left;\">Error</th>\n","      <td style=\"text-align: center; border-bottom-style: solid;\n","            border-width: 1px;\">12</td>\n","      <td style=\"text-align: center; border-bottom-style: solid;\n","            border-width: 1px;\">25.321546</td>\n","      <td style=\"text-align: center; border-bottom-style: solid;\n","            border-width: 1px;\">2.110129</td>\n","    </tr>\n","    <tr style =\"border-bottom-style: solid; border-width: 1px; height: 40px;\">\n","      <th style=\"text-align: left;\">Total</th>\n","      <td style=\"text-align: center\">13</td>\n","      <td style=\"text-align: center\">154.648571</td>\n","      <td colspan =\"2\" style=\"text-align: center\">\n","        <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n","              <msub>\n","                <mi>f</mi>\n","                <mrow>\n","                  <mn>0.95</mn>\n","                  <mo>,</mo>\n","                  <mn>1</mn>\n","                  <mo>,</mo>\n","                  <mn>12</mn>\n","                </mrow>\n","              </msub>\n","              <mo>=</mo>\n","              <mn>4.747225 </mn>\n","        </math>\n","      </td>\n","    </tr>\n","    <tr style=\"height: 40px;\">\n","      <th colspan = 2 style=\"text-align: left; border-bottom-style: solid;\n","            border-width: 1px;\">Coefficient of determination\n","        <math>\n","          <msup>\n","            <mi mathvariant=\"bold\">r</mi>\n","            <mn mathvariant=\"bold\">2</mn>\n","          </msup>\n","          <mo mathvariant=\"bold\">=</mo>\n","          <mn>0.836264</mn>\n","        <math>\n","      </th>\n","      <th colspan = 3 style=\"text-align: left; border-bottom-style: solid;\n","            border-width: 1px;\">Sample Correlation Coefficient\n","        <math>\n","          <mi mathvariant=\"bold\">r</mi>\n","          <mo mathvariant=\"bold\">=</mo>\n","          <mn>0.914475</mn>\n","        <math>\n","      </th>\n","    </tr>\n","  </table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","\n","\n"]},{"data":{"text/html":["<table style=\"width:50%; border: none;\n","                    border-collapse: collapse;\">\n","    <tr style =\"border-bottom-style: solid; border-width: 1px;\">\n","      <th colspan = 6 >residual analysis</th>\n","    </tr>\n","    <tr style =\"border-bottom-style: solid; border-width: 1px; height: 20px;\">\n","      <th style=\"text-align: left;\">X</th>\n","      <th>Y</th>\n","      <th style=\"text-align: left; width:17%; word-break: break-word;\">Predicted Y Value</th>\n","      <th style=\"text-align: left; width:17%; word-break: break-word;\">St. Dev Pred. Y</th>\n","      <th>Residual</th>\n","      <th>ST. Residual</th>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">25.60</td>\n","      <td style=\"text-align: center;\">15.40</td>\n","      <td style=\"text-align: center;\">14.977953</td>\n","      <td style=\"text-align: center;\">0.454536</td>\n","      <td style=\"text-align: center;\">0.422047</td>\n","      <td style=\"text-align: center;\">0.290541</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">42.20</td>\n","      <td style=\"text-align: center;\">16.80</td>\n","      <td style=\"text-align: center;\">16.897970</td>\n","      <td style=\"text-align: center;\">0.388332</td>\n","      <td style=\"text-align: center;\">-0.097970</td>\n","      <td style=\"text-align: center;\">-0.067443</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">57.60</td>\n","      <td style=\"text-align: center;\">19.70</td>\n","      <td style=\"text-align: center;\">18.679190</td>\n","      <td style=\"text-align: center;\">0.454536</td>\n","      <td style=\"text-align: center;\">1.020810</td>\n","      <td style=\"text-align: center;\">0.702733</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">98.80</td>\n","      <td style=\"text-align: center;\">21.70</td>\n","      <td style=\"text-align: center;\">23.444534</td>\n","      <td style=\"text-align: center;\">0.930000</td>\n","      <td style=\"text-align: center;\">-1.744534</td>\n","      <td style=\"text-align: center;\">-1.200950</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">10.40</td>\n","      <td style=\"text-align: center;\">10.80</td>\n","      <td style=\"text-align: center;\">13.219865</td>\n","      <td style=\"text-align: center;\">0.602666</td>\n","      <td style=\"text-align: center;\">-2.419865</td>\n","      <td style=\"text-align: center;\">-1.665853</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">30.10</td>\n","      <td style=\"text-align: center;\">15.20</td>\n","      <td style=\"text-align: center;\">15.498439</td>\n","      <td style=\"text-align: center;\">0.423782</td>\n","      <td style=\"text-align: center;\">-0.298439</td>\n","      <td style=\"text-align: center;\">-0.205448</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">40.00</td>\n","      <td style=\"text-align: center;\">18.90</td>\n","      <td style=\"text-align: center;\">16.643510</td>\n","      <td style=\"text-align: center;\">0.388950</td>\n","      <td style=\"text-align: center;\">2.256490</td>\n","      <td style=\"text-align: center;\">1.553385</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">29.30</td>\n","      <td style=\"text-align: center;\">15.90</td>\n","      <td style=\"text-align: center;\">15.405908</td>\n","      <td style=\"text-align: center;\">0.428657</td>\n","      <td style=\"text-align: center;\">0.494092</td>\n","      <td style=\"text-align: center;\">0.340136</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">16.10</td>\n","      <td style=\"text-align: center;\">12.00</td>\n","      <td style=\"text-align: center;\">13.879148</td>\n","      <td style=\"text-align: center;\">0.540981</td>\n","      <td style=\"text-align: center;\">-1.879148</td>\n","      <td style=\"text-align: center;\">-1.293619</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">18.00</td>\n","      <td style=\"text-align: center;\">14.10</td>\n","      <td style=\"text-align: center;\">14.098909</td>\n","      <td style=\"text-align: center;\">0.521821</td>\n","      <td style=\"text-align: center;\">0.001091</td>\n","      <td style=\"text-align: center;\">0.000751</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">88.20</td>\n","      <td style=\"text-align: center;\">21.10</td>\n","      <td style=\"text-align: center;\">22.218499</td>\n","      <td style=\"text-align: center;\">0.790399</td>\n","      <td style=\"text-align: center;\">-1.118499</td>\n","      <td style=\"text-align: center;\">-0.769983</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">34.00</td>\n","      <td style=\"text-align: center;\">17.60</td>\n","      <td style=\"text-align: center;\">15.949527</td>\n","      <td style=\"text-align: center;\">0.404143</td>\n","      <td style=\"text-align: center;\">1.650473</td>\n","      <td style=\"text-align: center;\">1.136197</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">22.10</td>\n","      <td style=\"text-align: center;\">14.80</td>\n","      <td style=\"text-align: center;\">14.573130</td>\n","      <td style=\"text-align: center;\">0.483451</td>\n","      <td style=\"text-align: center;\">0.226870</td>\n","      <td style=\"text-align: center;\">0.156179</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">70.00</td>\n","      <td style=\"text-align: center;\">21.60</td>\n","      <td style=\"text-align: center;\">20.113420</td>\n","      <td style=\"text-align: center;\">0.571646</td>\n","      <td style=\"text-align: center;\">1.486580</td>\n","      <td style=\"text-align: center;\">1.023373</td>\n","    </tr><tr style =\"border-bottom-style: solid; border-width: 1px;\">\n","      <th colspan = 6 ></th>\n","    </tr>\n","  </table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","\n","\n","\n","\n","\n"]},{"data":{"text/plain":["0.05516735645118847"]},"execution_count":2,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["def durbinwatson(n, k, alfa):\n","\n","  # load durbin watson tables\n","  dw = pd.read_csv('/content/drive/MyDrive/datasets/dw.csv',  index_col= 0)\n","  dw = dw.loc[dw.k == k,['n', 'alpha', 'bound', 'd']]\n","\n","  #calculate differences between n and alpha given values and table values\n","  dw['diffn'] = dw['n'] - n\n","  dw['diffa'] = dw['alpha'] - alfa\n","  dw['nside'] = 'None'\n","  dw['aside'] = 'None'\n","\n","  #Identify if the differences between n and alpha given values and table values refer to lower or upper values\n","  dw.loc[dw['diffn'] > 0, 'nside' ] = 'upper'\n","  dw.loc[dw['diffn'] <= 0 ,'nside'] = 'lower'\n","  dw.loc[dw['diffa'] > 0, 'aside' ] = 'upper'\n","  dw.loc[dw['diffa'] <= 0 ,'aside'] = 'lower'\n","\n","  # identifying nearest alpha and n values present in tables to interpolate between them\n","  px = dw[(dw.diffn == dw[dw.nside == 'upper']['diffn'].min()) | (dw.diffn == dw[dw.nside == 'lower']['diffn'].max())]\n","\n","  #interpolating d for given n value\n","  a = px[px.nside == 'upper']['n']\n","  b = px[px.nside == 'lower']['n']\n","  percn = (n- px[px.nside == 'lower']['n']).values/(a.values - b.values)\n","  dgap = px[px.nside == 'upper']['d'].values - px[px.nside == 'lower']['d'].values\n","  px = px.drop(index = px.index[px.nside == 'upper'])\n","  px['d'] = px['d'] + (percn * dgap).tolist()\n","  px.drop(columns = ['diffn', 'nside', 'n'], inplace = True)\n","\n","  #interpolating d for given alpha value\n","  a = px[px.aside == 'upper']['alpha']\n","  b = px[px.aside == 'lower']['alpha']\n","  percn = (alfa- px[px.aside == 'lower']['alpha']).values/(a.values - b.values)\n","  dgap = px[px.aside == 'upper']['d'].values - px[px.aside == 'lower']['d'].values\n","  px = px.drop(index = px.index[px.aside == 'upper'])\n","  px['d'] = px['d'] + (percn * dgap).tolist()\n","  px.drop(columns = ['diffa', 'aside', 'alpha'], inplace = True)\n","\n","  return px[px.bound == 'dL']['d'].values[0], px[px.bound == 'dU']['d'].values[0]\n","\n","def linreg(xp, x, B, resvar, n):\n","  squareddiffxp = (xp - np.nanmean(x))**2\n","  squareddiffx = (x - np.nanmean(x))**2\n","  sdymean = np.sqrt(resvar*((1/n)+(squareddiffxp/np.sum(squareddiffx))))#std deviation of the Y mean\n","  sdypart = np.sqrt(resvar*(1+(1/n)+(squareddiffxp/np.sum(squareddiffx)))) #std deviation of a particular x\n","  ymeanp = B[0,0] + B[1,0]*xp\n","  return ymeanp, sdymean, sdypart\n","\n","\n","def slmreg(x,xtitle, y, ytitle, alpha, xp):\n","\n","  #general aggregates\n","  xy = x * y\n","  squaredx = x**2\n","  squaredy = y **2\n","  n = x.size\n","\n","  Y = y[:, np.newaxis]\n","  X = np.hstack((np.ones((n,1)), x[:,np.newaxis]))\n","  unos = np.ones((18,1))\n","  Xprime = np.transpose(X)\n","  Yprime =np.transpose(Y)\n","\n","  # matrices Calculation\n","  XprimeX = np.matmul(Xprime, X)\n","  XprimeY = np.matmul(Xprime,Y)\n","  InvXprimex = np.linalg.inv(XprimeX)\n","  B = np.matmul(InvXprimex, XprimeY)\n","\n","  # X'X matrix\n","\n","  matrix = \"\"\"<math>\n","    <mrow>\n","        <mi>X</mi>\n","        <mo>&#x2032;</mo>\n","        <mi>X</mi>\n","        <mo>=</mo>\n","        <mo>[</mo>\n","          <mtable>\"\"\"\n","  for i in np.arange(XprimeX.shape[0]):\n","    matrix +=\"\"\"\n","            <mtr>\"\"\"\n","    for j in np.arange(XprimeX.shape[1]):\n","      matrix +=\"\"\"\n","              <mtd>\n","                <mn>{:.6f}</mn>\n","              </mtd>\n","              \"\"\".format(XprimeX[i,j])\n","    matrix +=\"\"\"\n","                        </mtr>\"\"\"\n","  matrix += \"\"\"\n","  </mtable>\n","        <mo>]</mo>\n","    </mrow>\n","    </math>\n","  \"\"\"\n","  display(HTML(data = matrix))\n","  print(\"\")\n","\n","  # X'Y matrix\n","  matrix = \"\"\"<math>\n","    <mrow>\n","        <mi>X</mi>\n","        <mo>&#x2032;</mo>\n","        <mi>Y</mi>\n","        <mo>=</mo>\n","        <mo>[</mo>\n","          <mtable>\"\"\"\n","  for i in np.arange(XprimeY.shape[0]):\n","    matrix +=\"\"\"\n","            <mtr>\"\"\"\n","    for j in np.arange(XprimeY.shape[1]):\n","      matrix +=\"\"\"\n","              <mtd>\n","                <mn>{:.6f}</mn>\n","              </mtd>\n","              \"\"\".format(XprimeY[i,j])\n","    matrix +=\"\"\"\n","                        </mtr>\"\"\"\n","  matrix += \"\"\"\n","  </mtable>\n","        <mo>]</mo>\n","    </mrow>\n","    </math>\n","  \"\"\"\n","  display(HTML(data = matrix))\n","  print(\"\")\n","\n","  # inverse of X'X matrix\n","  matrix = \"\"\"<math>\n","    <mrow>\n","    <msup>\n","      <mrow>\n","        <mo>(</mo>\n","          <mi>X</mi>\n","          <mo>&#x2032;</mo>\n","          <mi>X</mi>\n","        <mo>)</mo>\n","      </mrow>\n","      <mrow>\n","        <mo>-</mo>\n","        <mn>1</mn>\n","      </mrow>\n","    </msup>\n","        <mo>=</mo>\n","        <mo>[</mo>\n","\n","          <mtable>\"\"\"\n","  for i in np.arange(InvXprimex.shape[0]):\n","    matrix +=\"\"\"\n","            <mtr>\"\"\"\n","    for j in np.arange(InvXprimex.shape[1]):\n","      matrix +=\"\"\"\n","              <mtd>\n","                <mn>{:.6f}</mn>\n","              </mtd>\n","              \"\"\".format(InvXprimex[i,j])\n","    matrix +=\"\"\"\n","                        </mtr>\"\"\"\n","  matrix += \"\"\"\n","  </mtable>\n","        <mo>]</mo>\n","    </mrow>\n","    </math>\n","  \"\"\"\n","  display(HTML(data = matrix))\n","  print(\"\")\n","\n","\n","  # B Matrix\n","  matrix = \"\"\"<!DOCTYPE html>\n","  <html>\n","  <head>\n","      <title>2x2 Matrix in MathML</title>\n","  </head>\n","  <body>\n","      <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n","          <mrow>\n","              <mi>B</mi>\n","              <mo>=</mo>\n","              <mo>[</mo>\n","              <mtable>\n","                  \"\"\"\n","\n","  for i in B:\n","      matrix += \"\"\"\n","                  <mtr>\n","                      <mtd><mn>{:.6f}</mn></mtd>\n","                  </mtr>\"\"\".format(i[0])\n","  matrix += \"\"\"\n","              </mtable>\n","              <mo>]</mo>\n","          </mrow>\n","      </math>\n","  </body>\n","  </html>\n","  \"\"\"\n","  display(HTML(data = matrix))\n","  print(\"\")\n","\n","\n","  #residuals\n","  yline = np.vstack((B[0,0]*np.ones(n),x*B[1,:]))\n","  ymean = np.nansum(yline, axis = 0)\n","  res = y - ymean\n","  squaredres = res**2\n","  resmean = np.nanmean(res)\n","\n","  sumsquaredres = np.nansum(squaredres)\n","  res2 = np.concatenate((np.array([0]),res))\n","  durbinwatson = np.nansum((res[1:] - res2[1:-1])**2)/np.sum(squaredres)\n","  sloperegressivemodel = np.nansum((res[1:]*res2[1:-1]))/np.sum(squaredres)\n","\n","  #var statistics about Coefficients\n","\n","  resvar = np.nansum(squaredres)/(n-2) # residual Variance or MSE\n","  sdB0 = np.sqrt((resvar * np.nansum(squaredx))/(n*np.nansum(np.subtract(x, np.nanmean(x))**2))) #std dev of B0\n","  sdB1 = np.sqrt(resvar/np.nansum(np.subtract(x, np.nanmean(x))**2)) #std dev of B1 or standard Error\n","\n","  T = t.ppf(1-(alpha/2), n-2)\n","  lB0 = sdB0*T\n","  lB1 = sdB1*T\n","\n","  # ANOVA Analysis\n","\n","  dfreg = 1\n","  dferror = n-2\n","  dftotal = n-1\n","\n","  ssreg = np.nansum((ymean - np.nanmean(Y))**2)\n","  sserror = np.nansum((y - ymean)**2)\n","  sst = np.nansum((y-np.nanmean(y))**2)\n","\n","  msreg = ssreg/dfreg\n","  mserror = sserror/dferror\n","  F = msreg/mserror\n","\n","  fstat = f.ppf(1-alpha, dfreg, dferror)\n","\n","  stdres = res/math.sqrt(mserror)\n","\n","  #F\n","\n","  #agregated results\n","\n","  html_table = \"\"\"<table style=\" border: none;\n","                    border-collapse: collapse; width:65%; word-break: break-word;\">\n","    <tr \tstyle =\"border-bottom-style: solid; border-width: 1px; text-align: center\">\n","      <th colspan =\"9\">Simple Linear Reggression Aggregates</th>\n","    </tr>\n","    <tr style =\" border-width: 1px; height: 20px;\">\n","      <th Style = \"width:7%\"></th>\n","      <th>{}</th>\n","      <th Style = \"width:12%\">{} </th>\n","      <th Style = \"width:12%\"></th>\n","      <th Style = \"width:12%\"></th>\n","      <th Style = \"width:12%\"></th>\n","      <th>Estimated {}</th>\n","      <th Style = \"width:12%\">Residual</th>\n","      <th Style = \"width:12%\">Squared Residual</th>\n","    </tr>\n","    <tr style =\"border-bottom-style: solid; border-width: 1px; height: 20px;\">\n","      <th></th>\n","      <th>\n","        <math>\n","          <msub>\n","            <mi>x</mi>\n","            <mi>i</mi>\n","          </msub>\n","        <math>\n","      </th>\n","      <th>\n","        <math>\n","          <msub>\n","            <mi>y</mi>\n","            <mi>i</mi>\n","          </msub>\n","          <math>\n","      </th>\n","      <th>\n","        <math>\n","          <msub>\n","            <mi>x</mi>\n","            <mi>i</mi>\n","          </msub>\n","          <msub>\n","            <mi>y</mi>\n","            <mi>i</mi>\n","          </msub>\n","          <math>\n","      </th>\n","      <th>\n","        <math>\n","          <msubsup>\n","            <mi>x</mi>\n","            <mi>i</mi>\n","            <mn>2</mn>\n","          </msubsup>\n","        <math>\n","      </th>\n","      <th>\n","        <math>\n","          <msubsup>\n","            <mi>y</mi>\n","            <mi>i</mi>\n","            <mn>2</mn>\n","          </msubsup>\n","          <math>\n","      </th>\n","      <th>\n","        <math>\n","          <msub>\n","          <mrow>\n","            <mover>\n","              <mi>y</mi>\n","              <mo>^</mo>\n","            </mover>\n","          </mrow>\n","          <mi>i</mi>\n","          </msub>\n","        <math>\n","      </th>\n","      <th>\n","        <math>\n","          <msub>\n","            <mi>y</mi>\n","            <mi>i</mi>\n","          </msub>\n","          <mo>-</mo>\n","          <msub>\n","          <mrow>\n","            <mover>\n","              <mi>y</mi>\n","              <mo>^</mo>\n","            </mover>\n","          </mrow>\n","          <mi>i</mi>\n","          </msub>\n","        <math>\n","      </th>\n","      <th>\n","        <math>\n","          <msup>\n","            <mrow>\n","              <mo>(</mo>\n","              <msub>\n","                <mi>y</mi>\n","                <mi>i</mi>\n","              </msub>\n","              <mo>-</mo>\n","              <msub>\n","              <mrow>\n","                <mover>\n","                  <mi>y</mi>\n","                  <mo>^</mo>\n","                </mover>\n","              </mrow>\n","              <mi>i</mi>\n","              </msub>\n","              <mo>)</mo>\n","            </mrow>\n","            <mn>2</mn>\n","          </msup>\n","        <math>\n","      </th>\"\"\".format(xtitle, ytitle, ytitle)\n","  for i in range(n):\n","\n","    html_table +=\"\"\"\n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">{:.4f}</td>\n","      <td style=\"text-align: center\">{:.4f}</td>\n","      <td style=\"text-align: center\">{:.4f}</td>\n","      <td style=\"text-align: center\">{:.4f}</td>\n","      <td style=\"text-align: center;\">{:.4f}</td>\n","      <td style=\"text-align: center\">{:.4f}</td>\n","      <td style=\"text-align: center\">{:.4f}</td>\n","      <td style=\"text-align: center;\">{:.4f}</td>\n","        </tr>\n","        \"\"\".format(x[i], y[i], xy[i], squaredx[i], squaredy[i],\n","                ymean[i], res[i],squaredres[i])\n","  html_table += \"\"\"<tr style=\"height: 10px;\">\n","      <td></td>\n","    </tr>\n","    <tr style =\"border-bottom-style: solid; border-width: 1px; height: 40px;\">\n","      <th style=\"text-align: left;\">Totals</th>\n","      <td style=\"text-align: center\">{}</td>\n","      <td style=\"text-align: center\">{:.4f}</td>\n","      <td style=\"text-align: center\">{:.4f}</td>\n","      <td style=\"text-align: center;\">{:.4f}</td>\n","      <td style=\"text-align: center\">{:.4f}</td>\n","      <td style=\"text-align: center\">{:.4f}</td>\n","      <td style=\"text-align: center;\">{:.4f}</td>\n","      <td style=\"text-align: center;\">{:.4f}</td>\n","    </tr>\n","  </table>\"\"\".format(np.nansum(x), np.sum(y), np.sum(xy),\n","                    np.sum(squaredx), np.sum(squaredy), np.sum(ymean), np.sum(res), np.sum(squaredres))\n","\n","  display(HTML(data = html_table))\n","  print(\"\")\n","  print(\"\")\n","  print(\"\")\n","\n","  #Variance Table\n","\n","  ymean, sdymean, sdypart = linreg(x, x, B, resvar, n)\n","\n","  html_table = \"\"\"<table style=\"width:50%; border: none;\n","                    border-collapse: collapse;\">\n","    <tr style =\"border-bottom-style: solid; border-width: 1px;\">\n","      <th colspan = 6 >Variance table</th>\n","    </tr>\n","    <tr <!--style =\"height: 40px;\"-->>\n","      <th style=\"text-align: left;\">Statistic</th>\n","      <th>Value</th>\n","      <th>Std Dev</th>\n","      <th>Variance</th>\n","      <th style=\"text-align: left; width:17%; word-break: break-word;\">Lower confidence limit</th>\n","      <th style=\"text-align: left; width:17%; word-break: break-word;\">Upper confidence limit</th>\n","    </tr>\n","    <tr style =\"border-bottom-style: solid; border-width: 1px; height: 20px;\">\n","      <td colspan = 4></td>\n","      <td colspan = 2 style=\"text-align: center\">\n","        <math>\n","          <mn>1</mn>\n","          <mo>-</mo>\n","          <mi>&alpha;</mi>\n","          <mo>=</mo>\n","          <mn>{:.2f}</mn>\n","        <math>\n","      </td>\n","    </tr>\n","    <tr style=\"height: 40px;\">\n","      <th style=\"text-align: center;\">\n","        <math>\n","          <msub>\n","            <mi>B</mi>\n","            <mn>0</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td style=\"text-align: center;\">{:.6f}</td>\n","      <td style=\"text-align: center;\">{:.6f}</td>\n","      <td style=\"text-align: center;\">{:.6f}</td>\n","      <td style=\"text-align: center;\">{:.6f}</td>\n","      <td style=\"text-align: center;\">{:.6f}</td>\n","    </tr>\n","    <tr style=\"height: 40px;\">\n","      <th style=\"text-align: center;border-bottom-style: solid;\n","            border-width: 1px;\">\n","        <math>\n","          <msub>\n","            <mi>B</mi>\n","            <mn>1</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td style=\"text-align: center;border-bottom-style: solid;\n","            border-width: 1px;\">{:.6f}</td>\n","      <td style=\"text-align: center;border-bottom-style: solid;\n","            border-width: 1px;\">{:.6f}</td>\n","      <td style=\"text-align: center;border-bottom-style: solid;\n","            border-width: 1px;\">{:.6f}</td>\n","      <td style=\"text-align: center;border-bottom-style: solid;\n","            border-width: 1px;\">{:.6f}</td>\n","      <td style=\"text-align: center;border-bottom-style: solid;\n","            border-width: 1px;\">{:.6f}</td>\n","    </tr>\n","  </table>\"\"\".format(1-alpha,\n","                    B[0,0], sdB0, sdB0**2, B[0,0] - lB0, B[0,0] + lB0,\n","                    B[1,0], sdB1, sdB1**2, B[1,0] - lB1, B[1,0] + lB1)\n","  display(HTML(data = html_table))\n","  print(\"\")\n","  print(\"\")\n","  print(\"\")\n","\n","  #Prediction Average Interval table\n","  html_table = \"\"\"<table style=\" border: none;\n","                    border-collapse: collapse; width:65%; word-break: break-word;\">\n","    <tr \tstyle =\"border-bottom-style: solid; border-width: 1px; text-align: center\">\n","      <th colspan =\"4\"> Prediction intervals for average {} </th>\n","    </tr>\n","    <tr style =\"border-bottom-style: solid; border-width: 1px; height: 20px;\">\n","      <th>\n","        <math>\n","          <msub>\n","            <mi>x</mi>\n","            <mi>p</mi>\n","          </msub>\n","        <math>\n","      </th>\n","      <th>\n","        <math>\n","\n","              <mover>\n","                <mi>y</mi>\n","                <mo>^</mo>\n","              </mover>\n","\n","          </msub>\n","        <math>\n","      </th>\n","      <th>\n","        <math>\n","          <mi>s</mi>\n","          <mo>(</mo>\n","\n","              <mover>\n","                <mi>y</mi>\n","                <mo>^</mo>\n","              </mover>\n","\n","          <mo>)</mo>\n","        <math>\n","      </th>\n","      <th>{:.0f}% prediction interval</th>\n","      \"\"\".format(xtitle, (1-alpha)*100)\n","  yavg, s1, s2 = linreg(xp, x, B, resvar, n)\n","\n","  for i in range(xp.size):\n","\n","    html_table +=\"\"\"\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">{:.4f}</td>\n","      <td style=\"text-align: center\">{:.4f}</td>\n","      <td style=\"text-align: center\">{:.4f}</td>\n","      <td style=\"text-align: center\">\n","        <math>\n","          <mo>(</mo>\n","          <mn>{:.4f}</mn>\n","          <mo>,</mo>\n","          <mn>{:.4f}</mn>\n","          <mo>)</mo>\n","        <math>\n","      </td>\n","    </tr>\n","        \"\"\".format(xp[i], yavg[i], s1[i], yavg[i] - T*s1[i], yavg[i] + T*s1[i])\n","\n","\n","  display(HTML(data = html_table))\n","  print(\"\")\n","  print(\"\")\n","  print(\"\")\n","\n","  #Particular prediction interval table\n","  if xp.size > 0:\n","    html_table = \"\"\"<table style=\" border: none;\n","                      border-collapse: collapse; width:65%; word-break: break-word;\">\n","      <tr \tstyle =\"border-bottom-style: solid; border-width: 1px; text-align: center\">\n","        <th colspan =\"4\"> Prediction intervals for particular values of {} </th>\n","      </tr>\n","      <tr style =\"border-bottom-style: solid; border-width: 1px; height: 20px;\">\n","        <th>\n","          <math>\n","            <msub>\n","              <mi>x</mi>\n","              <mi>p</mi>\n","            </msub>\n","          <math>\n","        </th>\n","        <th>\n","          <math>\n","            <msub>\n","              <mrow>\n","                <mover>\n","                  <mi>y</mi>\n","                  <mo>^</mo>\n","                </mover>\n","              <mrow>\n","              <mn>part</mn>\n","            </msub>\n","          <math>\n","        </th>\n","        <th>\n","          <math>\n","            <mi>s</mi>\n","            <mo>(</mo>\n","            <msub>\n","              <mrow>\n","                <mover>\n","                  <mi>y</mi>\n","                  <mo>^</mo>\n","                </mover>\n","              <mrow>\n","              <mn>part</mn>\n","            </msub>\n","            <mo>)</mo>\n","          <math>\n","        </th>\n","        <th>{:.0f}% prediction interval</th>\n","        \"\"\".format(xtitle, (1-alpha)*100)\n","    yavg, s1, s2 = linreg(xp, x, B, resvar, n)\n","\n","    for i in range(xp.size):\n","\n","      html_table +=\"\"\"\n","      <tr style=\"height: 20px;\">\n","        <td style=\"text-align: center;\">{:.4f}</td>\n","        <td style=\"text-align: center\">{:.4f}</td>\n","        <td style=\"text-align: center\">{:.4f}</td>\n","        <td style=\"text-align: center\">\n","          <math>\n","            <mo>(</mo>\n","            <mn>{:.4f}</mn>\n","            <mo>,</mo>\n","            <mn>{:.4f}</mn>\n","            <mo>)</mo>\n","          <math>\n","        </td>\n","      </tr>\n","          \"\"\".format(xp[i], yavg[i], s2[i], yavg[i] - T*s2[i], yavg[i] + T*s2[i])\n","\n","\n","    display(HTML(data = html_table))\n","    print(\"\")\n","    print(\"\")\n","    print(\"\")\n","\n","\n","\n","  #ANOVA Table\n","  html_table = \"\"\"<table style=\"width:50%; border: none;\n","                    border-collapse: collapse;\">\n","    <tr style =\"border-bottom-style: solid; border-width: 1px;\">\n","      <th colspan = 5>ANOVA table</th>\n","    </tr>\n","    <tr style =\"border-bottom-style: solid; border-width: 1px; height: 40px;\">\n","      <th style=\"text-align: left;\">Source of variation</th>\n","      <th>df</th>\n","      <th>SS</th>\n","      <th>MS</th>\n","      <th>F Statistic</th>\n","    </tr>\n","    <tr style=\"height: 40px;\">\n","      <th style=\"text-align: left;\">Regression</th>\n","      <td style=\"text-align: center\">{}</td>\n","      <td style=\"text-align: center\">{:.6f}</td>\n","      <td style=\"text-align: center\">{:.6f}</td>\n","      <td rowspan = 2 style=\"text-align: center; border-bottom-style: solid\n","                              ;border-width: 1px;\">\n","      {:.6f}</td>\n","    </tr>\n","    <tr style=\"height: 40px;\">\n","      <th style=\"text-align: left;\">Error</th>\n","      <td style=\"text-align: center; border-bottom-style: solid;\n","            border-width: 1px;\">{}</td>\n","      <td style=\"text-align: center; border-bottom-style: solid;\n","            border-width: 1px;\">{:.6f}</td>\n","      <td style=\"text-align: center; border-bottom-style: solid;\n","            border-width: 1px;\">{:.6f}</td>\n","    </tr>\n","    <tr style =\"border-bottom-style: solid; border-width: 1px; height: 40px;\">\n","      <th style=\"text-align: left;\">Total</th>\n","      <td style=\"text-align: center\">{}</td>\n","      <td style=\"text-align: center\">{:.6f}</td>\n","      <td colspan =\"2\" style=\"text-align: center\">\n","        <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n","              <msub>\n","                <mi>f</mi>\n","                <mrow>\n","                  <mn>{:.2f}</mn>\n","                  <mo>,</mo>\n","                  <mn>{}</mn>\n","                  <mo>,</mo>\n","                  <mn>{}</mn>\n","                </mrow>\n","              </msub>\n","              <mo>=</mo>\n","              <mn>{:.6f} </mn>\n","        </math>\n","      </td>\n","    </tr>\n","    <tr style=\"height: 40px;\">\n","      <th colspan = 2 style=\"text-align: left; border-bottom-style: solid;\n","            border-width: 1px;\">Coefficient of determination\n","        <math>\n","          <msup>\n","            <mi mathvariant=\"bold\">r</mi>\n","            <mn mathvariant=\"bold\">2</mn>\n","          </msup>\n","          <mo mathvariant=\"bold\">=</mo>\n","          <mn>{:.6f}</mn>\n","        <math>\n","      </th>\n","      <th colspan = 3 style=\"text-align: left; border-bottom-style: solid;\n","            border-width: 1px;\">Sample Correlation Coefficient\n","        <math>\n","          <mi mathvariant=\"bold\">r</mi>\n","          <mo mathvariant=\"bold\">=</mo>\n","          <mn>{:.6f}</mn>\n","        <math>\n","      </th>\n","    </tr>\n","  </table>\"\"\".format(dfreg, ssreg, msreg, F, dferror, sserror, mserror,\n","                    dftotal, sst, 1-alpha, dfreg, dferror, fstat,\n","                    1 -(sserror/sst), math.sqrt(1 -(sserror/sst)))\n","\n","  display(HTML(data = html_table))\n","  print(\"\")\n","  print(\"\")\n","  print(\"\")\n","\n","  #residuals table\n","\n","  ymean, sdymean, sdypart = linreg(x, x, B, resvar, n)\n","\n","  html_table = \"\"\"<table style=\"width:50%; border: none;\n","                    border-collapse: collapse;\">\n","    <tr style =\"border-bottom-style: solid; border-width: 1px;\">\n","      <th colspan = 6 >residual analysis</th>\n","    </tr>\n","    <tr style =\"border-bottom-style: solid; border-width: 1px; height: 20px;\">\n","      <th style=\"text-align: left;\">X</th>\n","      <th>Y</th>\n","      <th style=\"text-align: left; width:17%; word-break: break-word;\">Predicted Y Value</th>\n","      <th style=\"text-align: left; width:17%; word-break: break-word;\">St. Dev Pred. Y</th>\n","      <th>Residual</th>\n","      <th>ST. Residual</th>\n","    </tr>\"\"\"\n","\n","\n","  for i in range(x.size):\n","\n","    html_table +=\"\"\"\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">{:.2f}</td>\n","      <td style=\"text-align: center;\">{:.2f}</td>\n","      <td style=\"text-align: center;\">{:.6f}</td>\n","      <td style=\"text-align: center;\">{:.6f}</td>\n","      <td style=\"text-align: center;\">{:.6f}</td>\n","      <td style=\"text-align: center;\">{:.6f}</td>\n","    </tr>\"\"\".format(x[i], y[i], ymean[i], sdymean[i], y[i] - ymean[i], ( y[i] - ymean[i])/math.sqrt(resvar))\n","\n","\n","  html_table +=\"\"\"<tr style =\"border-bottom-style: solid; border-width: 1px;\">\n","      <th colspan = 6 ></th>\n","    </tr>\n","  </table>\"\"\"\n","\n","  display(HTML(data = html_table))\n","  print(\"\")\n","  print(\"\")\n","  print(\"\")\n","\n","  #sample scatter & Regression graph\n","  exes = np.linspace(np.nanmin(x), np.nanmax(x), 100)\n","  fig, ax = plt.subplots()\n","  ymeanp, sdymean, sdypart = linreg(exes, x, B, resvar, n)\n","  ax.scatter(x, y)\n","  #ax.plot(exes,ymeanp, color ='red', label = 'Regression')\n","  #ax.plot(exes,ymeanp + T*sdymean, color ='blue', label =r'confidence Interval 1 - $\\alpha$ = {}'.format(1-alpha))\n","  #ax.plot(exes,ymeanp - T*sdymean, color ='blue')\n","  #plt.legend()\n","\n","  ax.set_xlabel(xtitle)\n","  ax.set_ylabel(ytitle);\n","  print(\"\")\n","  print(\"\")\n","  print(\"\")\n","\n","  #residual scatter graph\n","  fig, ax = plt.subplots()\n","  #xgraph = np.linspace(0, x.size, x.size )\n","  ax.scatter(x, stdres)\n","  ax.set_xlabel(xtitle)\n","  ax.set_ylabel('Standardized Residuals');\n","\n","  return np.nansum((res[1:]*res2[1:-1]))/np.sum(squaredres)\n","\n","\n","#Book example\n","# x = np.array([2.95, 3.20, 3.40, 3.60, 3.20, 2.85, 3.10, 2.85,\n","#               3.05, 2.70, 2.75, 3.10, 3.15, 2.95, 2.75])\n","# xtitle = 'GPA'\n","\n","# y = np.array([18.5, 20.0, 21.1, 22.4, 21.2, 15.0, 18.0,\n","#               18.8, 15.7, 14.4, 15.5, 17.2, 19.0, 17.2, 16.8])\n","# ytitle = 'Salary'\n","\n","#example 12.1\n","# x = np.array([4, 4, 4, 4, 4, 6, 6, 6, 6, 8, 8, 8, 8, 8,\n","#               10, 10, 10, 12, 12, 12, 12, 12, 12])\n","# xtitle = 'thickness (in)'\n","# y = np.array([14.4, 14.8, 15.2, 14.3, 14.6, 14.5, 14.1, 14.6,\n","#               14.2, 13.8, 14.1, 13.7, 13.6, 14.0,\n","#               13.0, 13.4, 13.2, 13.1, 12.8, 12.9, 13.2, 13.3, 12.7])\n","# ytitle = 'KwH'\n","\n","# sales example\n","# x = np.array([270.36, 258.38, 254.96, 259.70, 265.40, 274.98, 281.86, 285.78,\n","#               290.58, 290.18, 296.72, 292.32, 301.72, 305.42, 314.96, 321.10])\n","# xtitle = 'Industry'\n","# y = np.array([44.84, 42.97, 41.98, 42.75, 43.95, 45.65, 46.87, 47.35,\n","#               48.13, 47.95, 49.10, 48.52, 50.22, 51.15, 52.78, 53.91])\n","# ytitle = 'Company'\n","\n","# exercise 13.5\n","# x = np.array([45, 20, 40, 40, 47, 30, 25, 20, 15,\n","#               35, 40, 55, 50, 60, 15, 30, 35, 45])\n","# xtitle = 'Income'\n","# y = np.array([70, 50, 60, 50, 90, 55, 55, 35, 40,\n","#               65, 75, 105, 110, 120, 30, 40, 65, 80])\n","# ytitle = 'Life insurance'\n","\n","# exercise 13.11\n","# x = np.array([68, 67, 65, 68, 64, 67, 66, 65, 64, 66])\n","# xtitle = 'Height (in)'\n","# y = np.array([119, 118, 129, 135, 123, 140, 125, 132, 118, 130])\n","# ytitle = 'Weight (lbs)'\n","\n","# exercise 13.14\n","x = np.array([25.6, 42.2, 57.6, 98.8, 10.4, 30.1, 40.0,\n","              29.3, 16.1, 18.0, 88.2, 34.0, 22.1, 70.0])\n","xtitle = 'gross annual income'\n","y = np.array([15.4, 16.8, 19.7, 21.7, 10.8, 15.2, 18.9,\n","              15.9, 12.0, 14.1, 21.1, 17.6, 14.8, 21.6])\n","ytitle = 'Percent taxes Paid'\n","\n","#exercise 13.15\n","# x = np.array([1, 1, 1, 1, 2, 2, 2, 2,\n","#               3, 3, 3, 3, 4, 4, 4, 4])\n","# xtitle = 'Time Length (hours)'\n","# y = np.array([25, 29, 23, 31, 55, 65, 63, 59,\n","#               73, 75, 74, 71, 90, 88, 91, 87])\n","# ytitle = 'assembled units'\n","\n","#exercise 13.17\n","# x = np.array([0.057, 0.058, 0.055, 0.052, 0.051,\n","#               0.055, 0.056, 0.047, 0.045, 0.044,\n","#               0.043, 0.043, 0.043, 0.043, 0.041,\n","#               0.040, 0.039, 0.038, 0.039, 0.035])\n","# xtitle = 'Relative price'\n","# y = np.array([7.09, 7.18, 7.23, 7.23, 7.32,\n","#               7.64, 7.73, 7.55, 7.91, 7.86,\n","#               7.96, 7.77, 8.14, 8.14, 8.23,\n","#               8.46, 8.73, 8.77, 9.18, 8.91])\n","# ytitle = 'per capita comsumption'\n","\n","#exercise 13.19\n","# x = np.array([737.2, 756.6, 800.3, 832.5, 876.4, 929.3, 984.8,\n","#               1011.4, 1058.1, 1087.6, 1085.6, 1122.4, 1185.9, 1255.0,\n","#               1248.0, 1233.9, 1300.4, 1371.7, 1436.9, 1483.0, 1480.7])\n","# xtitle = 'Gross national product'\n","# y = np.array([452.0, 461.4, 482.0, 500.5, 528.0, 557.5, 585.7,\n","#               602.7, 634.4, 657.9, 672.1, 696.8, 737.1, 768.5,\n","#               763.6, 780.2, 823.7, 863.9, 904.8, 930.9, 935.1])\n","# ytitle = 'personal consumption expenditure'\n","\n","#exercise 14.10 correlation matrix\n","# x = np.array([0.156, 0.205, 0.023, 0.042, 0.102, 0.147, 0.285, 0.024,\n","#                 0.038, 0.235, 0.076, 0.200, 0.056, 0.032, 0.068, 0.200])\n","# xtitle = 'x5'\n","# y = np.array([0.220, 0.297, 0.034, 0.058, 0.142, 0.202, 0.395, 0.036,\n","#                 0.056, 0.332, 0.107, 0.286, 0.077, 0.049, 0.094, 0.281])\n","# ytitle = 'x4'\n","\n","# x5 = np.array([0.156, 0.205, 0.023, 0.042, 0.102, 0.147, 0.285, 0.024,\n","#                0.038, 0.235, 0.076, 0.200, 0.056, 0.032, 0.068, 0.200])\n","\n","# x4 = np.array([0.220, 0.297, 0.034, 0.058, 0.142, 0.202, 0.395, 0.036,\n","#                0.056, 0.332, 0.107, 0.286, 0.077, 0.049, 0.094, 0.281])\n","\n","# x3 = np.array([0.290, 0.369, 0.047, 0.081, 0.198, 0.267, 0.496, 0.047,\n","#                0.074, 0.425, 0.153, 0.364, 0.105, 0.072, 0.145, 0.380])\n","\n","# x2 = np.array([0.310, 0.390, 0.058, 0.100, 0.213, 0.304, 0.518, 0.063,\n","#                0.092, 0.452, 0.178, 0.391, 0.124, 0.087, 0.161, 0.420])\n","\n","# x1 = np.array([0.297, 0.360, 0.075, 0.114, 0.229, 0.315, 0.477, 0.072,\n","#                0.099, 0.420, 0.189, 0.369, 0.142, 0.094, 0.171, 0.378])\n","#slmreg(x,xtitle, y, ytitle, alpha, xp):\n","r = slmreg(x,xtitle, y, ytitle, 0.05, np.array([15]))\n","r"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":1666,"status":"ok","timestamp":1726054604122,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"},"user_tz":240},"id":"jaawrcDBs_Pg","outputId":"1b96263e-2652-4d89-a043-bd95e8528ec9"},"outputs":[{"name":"stdout","output_type":"stream","text":["[199.2777378  214.42652261 220.98024252 237.7517871  251.30408309\n"," 262.39654607 263.04290051 284.88431985 290.0009665  290.57292853\n"," 307.0381141  333.01417632 341.043541   317.93416261 337.3757535\n"," 371.24913945 386.22277129 403.81012762 406.19154239 395.2557215 ]\n","[329.08554935 361.53516907 368.39281761 393.61950601 421.06117125\n"," 445.88358791 440.29822165 471.5724425  473.99034151 454.88280449\n"," 492.84263751 535.00170997 567.27701163 520.20478083 510.1641964\n"," 584.84101918 617.57657131 641.4285242  649.71796779 620.68381671]\n"]},{"data":{"text/html":["<math>\n","    <mrow>\n","        <mi>X</mi>\n","        <mo>&#x2032;</mo>\n","        <mi>X</mi>\n","        <mo>=</mo>\n","        <mo>[</mo>\n","          <mtable>\n","            <mtr>\n","              <mtd>\n","                <mn>20.000000</mn>\n","              </mtd>\n","              \n","              <mtd>\n","                <mn>9900.059847</mn>\n","              </mtd>\n","              \n","                        </mtr>\n","            <mtr>\n","              <mtd>\n","                <mn>9900.059847</mn>\n","              </mtd>\n","              \n","              <mtd>\n","                <mn>5077644.199948</mn>\n","              </mtd>\n","              \n","                        </mtr>\n","  </mtable>\n","        <mo>]</mo>\n","    </mrow>\n","    </math>\n","  "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"text/html":["<math>\n","    <mrow>\n","        <mi>X</mi>\n","        <mo>&#x2032;</mo>\n","        <mi>Y</mi>\n","        <mo>=</mo>\n","        <mo>[</mo>\n","          <mtable>\n","            <mtr>\n","              <mtd>\n","                <mn>6113.773084</mn>\n","              </mtd>\n","              \n","                        </mtr>\n","            <mtr>\n","              <mtd>\n","                <mn>3145057.992185</mn>\n","              </mtd>\n","              \n","                        </mtr>\n","  </mtable>\n","        <mo>]</mo>\n","    </mrow>\n","    </math>\n","  "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"text/html":["<math>\n","    <mrow>\n","    <msup>\n","      <mrow>\n","        <mo>(</mo>\n","          <mi>X</mi>\n","          <mo>&#x2032;</mo>\n","          <mi>X</mi>\n","        <mo>)</mo>\n","      </mrow>\n","      <mrow>\n","        <mo>-</mo>\n","        <mn>1</mn>\n","      </mrow>\n","    </msup>\n","        <mo>=</mo>\n","        <mo>[</mo>\n","\n","          <mtable>\n","            <mtr>\n","              <mtd>\n","                <mn>1.433675</mn>\n","              </mtd>\n","              \n","              <mtd>\n","                <mn>-0.002795</mn>\n","              </mtd>\n","              \n","                        </mtr>\n","            <mtr>\n","              <mtd>\n","                <mn>-0.002795</mn>\n","              </mtd>\n","              \n","              <mtd>\n","                <mn>0.000006</mn>\n","              </mtd>\n","              \n","                        </mtr>\n","  </mtable>\n","        <mo>]</mo>\n","    </mrow>\n","    </math>\n","  "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"text/html":["<!DOCTYPE html>\n","  <html>\n","  <head>\n","      <title>2x2 Matrix in MathML</title>\n","  </head>\n","  <body>\n","      <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n","          <mrow>\n","              <mi>B</mi>\n","              <mo>=</mo>\n","              <mo>[</mo>\n","              <mtable>\n","                  \n","                  <mtr>\n","                      <mtd><mn>-26.173286</mn></mtd>\n","                  </mtr>\n","                  <mtr>\n","                      <mtd><mn>0.670424</mn></mtd>\n","                  </mtr>\n","              </mtable>\n","              <mo>]</mo>\n","          </mrow>\n","      </math>\n","  </body>\n","  </html>\n","  "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"text/html":["<table style=\" border: none;\n","                    border-collapse: collapse; width:65%; word-break: break-word;\">\n","    <tr \tstyle =\"border-bottom-style: solid; border-width: 1px; text-align: center\">\n","      <th colspan =\"9\">Simple Linear Reggression Aggregates</th>\n","    </tr>\n","    <tr style =\" border-width: 1px; height: 20px;\">\n","      <th Style = \"width:7%\"></th>\n","      <th>Gross national product</th>\n","      <th Style = \"width:12%\">personal consumption expenditure </th>\n","      <th Style = \"width:12%\"></th>\n","      <th Style = \"width:12%\"></th>\n","      <th Style = \"width:12%\"></th>\n","      <th>Estimated personal consumption expenditure</th>\n","      <th Style = \"width:12%\">Residual</th>\n","      <th Style = \"width:12%\">Squared Residual</th>\n","    </tr>\n","    <tr style =\"border-bottom-style: solid; border-width: 1px; height: 20px;\">\n","      <th></th>\n","      <th>\n","        <math>\n","          <msub>\n","            <mi>x</mi>\n","            <mi>i</mi>\n","          </msub>\n","        <math>\n","      </th>\n","      <th>\n","        <math>\n","          <msub>\n","            <mi>y</mi>\n","            <mi>i</mi>\n","          </msub>\n","          <math>\n","      </th>\n","      <th>\n","        <math>\n","          <msub>\n","            <mi>x</mi>\n","            <mi>i</mi>\n","          </msub>\n","          <msub>\n","            <mi>y</mi>\n","            <mi>i</mi>\n","          </msub>\n","          <math>\n","      </th>\n","      <th>\n","        <math>\n","          <msubsup>\n","            <mi>x</mi>\n","            <mi>i</mi>\n","            <mn>2</mn>\n","          </msubsup>\n","        <math>\n","      </th>\n","      <th>\n","        <math>\n","          <msubsup>\n","            <mi>y</mi>\n","            <mi>i</mi>\n","            <mn>2</mn>\n","          </msubsup>\n","          <math>\n","      </th>\n","      <th>\n","        <math>\n","          <msub>\n","          <mrow>\n","            <mover>\n","              <mi>y</mi>\n","              <mo>^</mo>\n","            </mover>\n","          </mrow>\n","          <mi>i</mi>\n","          </msub>\n","        <math>\n","      </th>\n","      <th>\n","        <math>\n","          <msub>\n","            <mi>y</mi>\n","            <mi>i</mi>\n","          </msub>\n","          <mo>-</mo>\n","          <msub>\n","          <mrow>\n","            <mover>\n","              <mi>y</mi>\n","              <mo>^</mo>\n","            </mover>\n","          </mrow>\n","          <mi>i</mi>\n","          </msub>\n","        <math>\n","      </th>\n","      <th>\n","        <math>\n","          <msup>\n","            <mrow>\n","              <mo>(</mo>\n","              <msub>\n","                <mi>y</mi>\n","                <mi>i</mi>\n","              </msub>\n","              <mo>-</mo>\n","              <msub>\n","              <mrow>\n","                <mover>\n","                  <mi>y</mi>\n","                  <mo>^</mo>\n","                </mover>\n","              </mrow>\n","              <mi>i</mi>\n","              </msub>\n","              <mo>)</mo>\n","            </mrow>\n","            <mn>2</mn>\n","          </msup>\n","        <math>\n","      </th>\n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">329.0855</td>\n","      <td style=\"text-align: center\">199.2777</td>\n","      <td style=\"text-align: center\">65579.4238</td>\n","      <td style=\"text-align: center\">108297.2988</td>\n","      <td style=\"text-align: center;\">39711.6168</td>\n","      <td style=\"text-align: center\">194.4536</td>\n","      <td style=\"text-align: center\">4.8241</td>\n","      <td style=\"text-align: center;\">23.2723</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">361.5352</td>\n","      <td style=\"text-align: center\">214.4265</td>\n","      <td style=\"text-align: center\">77522.7291</td>\n","      <td style=\"text-align: center\">130707.6785</td>\n","      <td style=\"text-align: center;\">45978.7336</td>\n","      <td style=\"text-align: center\">216.2086</td>\n","      <td style=\"text-align: center\">-1.7821</td>\n","      <td style=\"text-align: center;\">3.1758</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">368.3928</td>\n","      <td style=\"text-align: center\">220.9802</td>\n","      <td style=\"text-align: center\">81407.5342</td>\n","      <td style=\"text-align: center\">135713.2681</td>\n","      <td style=\"text-align: center;\">48832.2676</td>\n","      <td style=\"text-align: center\">220.8061</td>\n","      <td style=\"text-align: center\">0.1741</td>\n","      <td style=\"text-align: center;\">0.0303</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">393.6195</td>\n","      <td style=\"text-align: center\">237.7518</td>\n","      <td style=\"text-align: center\">93583.7410</td>\n","      <td style=\"text-align: center\">154936.3155</td>\n","      <td style=\"text-align: center;\">56525.9123</td>\n","      <td style=\"text-align: center\">237.7187</td>\n","      <td style=\"text-align: center\">0.0331</td>\n","      <td style=\"text-align: center;\">0.0011</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">421.0612</td>\n","      <td style=\"text-align: center\">251.3041</td>\n","      <td style=\"text-align: center\">105814.3916</td>\n","      <td style=\"text-align: center\">177292.5099</td>\n","      <td style=\"text-align: center;\">63153.7422</td>\n","      <td style=\"text-align: center\">256.1163</td>\n","      <td style=\"text-align: center\">-4.8122</td>\n","      <td style=\"text-align: center;\">23.1572</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">445.8836</td>\n","      <td style=\"text-align: center\">262.3965</td>\n","      <td style=\"text-align: center\">116998.3134</td>\n","      <td style=\"text-align: center\">198812.1740</td>\n","      <td style=\"text-align: center;\">68851.9474</td>\n","      <td style=\"text-align: center\">272.7578</td>\n","      <td style=\"text-align: center\">-10.3613</td>\n","      <td style=\"text-align: center;\">107.3560</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">440.2982</td>\n","      <td style=\"text-align: center\">263.0429</td>\n","      <td style=\"text-align: center\">115817.3213</td>\n","      <td style=\"text-align: center\">193862.5240</td>\n","      <td style=\"text-align: center;\">69191.5675</td>\n","      <td style=\"text-align: center\">269.0133</td>\n","      <td style=\"text-align: center\">-5.9704</td>\n","      <td style=\"text-align: center;\">35.6452</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">471.5724</td>\n","      <td style=\"text-align: center\">284.8843</td>\n","      <td style=\"text-align: center\">134343.5945</td>\n","      <td style=\"text-align: center\">222380.5685</td>\n","      <td style=\"text-align: center;\">81159.0757</td>\n","      <td style=\"text-align: center\">289.9802</td>\n","      <td style=\"text-align: center\">-5.0959</td>\n","      <td style=\"text-align: center;\">25.9685</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">473.9903</td>\n","      <td style=\"text-align: center\">290.0010</td>\n","      <td style=\"text-align: center\">137457.6572</td>\n","      <td style=\"text-align: center\">224666.8438</td>\n","      <td style=\"text-align: center;\">84100.5606</td>\n","      <td style=\"text-align: center\">291.6013</td>\n","      <td style=\"text-align: center\">-1.6003</td>\n","      <td style=\"text-align: center;\">2.5610</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">454.8828</td>\n","      <td style=\"text-align: center\">290.5729</td>\n","      <td style=\"text-align: center\">132176.6286</td>\n","      <td style=\"text-align: center\">206918.3658</td>\n","      <td style=\"text-align: center;\">84432.6268</td>\n","      <td style=\"text-align: center\">278.7911</td>\n","      <td style=\"text-align: center\">11.7818</td>\n","      <td style=\"text-align: center;\">138.8112</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">492.8426</td>\n","      <td style=\"text-align: center\">307.0381</td>\n","      <td style=\"text-align: center\">151321.4740</td>\n","      <td style=\"text-align: center\">242893.8653</td>\n","      <td style=\"text-align: center;\">94272.4035</td>\n","      <td style=\"text-align: center\">304.2403</td>\n","      <td style=\"text-align: center\">2.7978</td>\n","      <td style=\"text-align: center;\">7.8278</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">535.0017</td>\n","      <td style=\"text-align: center\">333.0142</td>\n","      <td style=\"text-align: center\">178163.1538</td>\n","      <td style=\"text-align: center\">286226.8297</td>\n","      <td style=\"text-align: center;\">110898.4416</td>\n","      <td style=\"text-align: center\">332.5048</td>\n","      <td style=\"text-align: center\">0.5094</td>\n","      <td style=\"text-align: center;\">0.2595</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">567.2770</td>\n","      <td style=\"text-align: center\">341.0435</td>\n","      <td style=\"text-align: center\">193466.1608</td>\n","      <td style=\"text-align: center\">321803.2079</td>\n","      <td style=\"text-align: center;\">116310.6969</td>\n","      <td style=\"text-align: center\">354.1429</td>\n","      <td style=\"text-align: center\">-13.0994</td>\n","      <td style=\"text-align: center;\">171.5932</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">520.2048</td>\n","      <td style=\"text-align: center\">317.9342</td>\n","      <td style=\"text-align: center\">165390.8714</td>\n","      <td style=\"text-align: center\">270613.0140</td>\n","      <td style=\"text-align: center;\">101082.1318</td>\n","      <td style=\"text-align: center\">322.5845</td>\n","      <td style=\"text-align: center\">-4.6504</td>\n","      <td style=\"text-align: center;\">21.6260</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">510.1642</td>\n","      <td style=\"text-align: center\">337.3758</td>\n","      <td style=\"text-align: center\">172117.0302</td>\n","      <td style=\"text-align: center\">260267.5073</td>\n","      <td style=\"text-align: center;\">113822.3991</td>\n","      <td style=\"text-align: center\">315.8531</td>\n","      <td style=\"text-align: center\">21.5227</td>\n","      <td style=\"text-align: center;\">463.2250</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">584.8410</td>\n","      <td style=\"text-align: center\">371.2491</td>\n","      <td style=\"text-align: center\">217121.7251</td>\n","      <td style=\"text-align: center\">342039.0177</td>\n","      <td style=\"text-align: center;\">137825.9235</td>\n","      <td style=\"text-align: center\">365.9182</td>\n","      <td style=\"text-align: center\">5.3309</td>\n","      <td style=\"text-align: center;\">28.4186</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">617.5766</td>\n","      <td style=\"text-align: center\">386.2228</td>\n","      <td style=\"text-align: center\">238522.1349</td>\n","      <td style=\"text-align: center\">381400.8214</td>\n","      <td style=\"text-align: center;\">149168.0291</td>\n","      <td style=\"text-align: center\">387.8649</td>\n","      <td style=\"text-align: center\">-1.6422</td>\n","      <td style=\"text-align: center;\">2.6967</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">641.4285</td>\n","      <td style=\"text-align: center\">403.8101</td>\n","      <td style=\"text-align: center\">259015.3342</td>\n","      <td style=\"text-align: center\">411430.5517</td>\n","      <td style=\"text-align: center;\">163062.6192</td>\n","      <td style=\"text-align: center\">403.8559</td>\n","      <td style=\"text-align: center\">-0.0457</td>\n","      <td style=\"text-align: center;\">0.0021</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">649.7180</td>\n","      <td style=\"text-align: center\">406.1915</td>\n","      <td style=\"text-align: center\">263909.9435</td>\n","      <td style=\"text-align: center\">422133.4377</td>\n","      <td style=\"text-align: center;\">164991.5691</td>\n","      <td style=\"text-align: center\">409.4133</td>\n","      <td style=\"text-align: center\">-3.2218</td>\n","      <td style=\"text-align: center;\">10.3797</td>\n","        </tr>\n","        \n","    <tr style=\"height: 20px;\">\n","      <td></td>\n","      <td style=\"text-align: center;\">620.6838</td>\n","      <td style=\"text-align: center\">395.2557</td>\n","      <td style=\"text-align: center\">245328.8298</td>\n","      <td style=\"text-align: center\">385248.4003</td>\n","      <td style=\"text-align: center;\">156227.0854</td>\n","      <td style=\"text-align: center\">389.9481</td>\n","      <td style=\"text-align: center\">5.3076</td>\n","      <td style=\"text-align: center;\">28.1707</td>\n","        </tr>\n","        <tr style=\"height: 10px;\">\n","      <td></td>\n","    </tr>\n","    <tr style =\"border-bottom-style: solid; border-width: 1px; height: 40px;\">\n","      <th style=\"text-align: left;\">Totals</th>\n","      <td style=\"text-align: center\">9900.059846872977</td>\n","      <td style=\"text-align: center\">6113.7731</td>\n","      <td style=\"text-align: center\">3145057.9922</td>\n","      <td style=\"text-align: center;\">5077644.1999</td>\n","      <td style=\"text-align: center\">1949599.3494</td>\n","      <td style=\"text-align: center\">6113.7731</td>\n","      <td style=\"text-align: center;\">-0.0000</td>\n","      <td style=\"text-align: center;\">1094.1779</td>\n","    </tr>\n","  </table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","\n","\n"]},{"data":{"text/html":["<table style=\"width:50%; border: none;\n","                    border-collapse: collapse;\">\n","    <tr style =\"border-bottom-style: solid; border-width: 1px;\">\n","      <th colspan = 6 >Variance table</th>\n","    </tr>\n","    <tr <!--style =\"height: 40px;\"-->>\n","      <th style=\"text-align: left;\">Statistic</th>\n","      <th>Value</th>\n","      <th>Std Dev</th>\n","      <th>Variance</th>\n","      <th style=\"text-align: left; width:17%; word-break: break-word;\">Lower confidence limit</th>\n","      <th style=\"text-align: left; width:17%; word-break: break-word;\">Upper confidence limit</th>\n","    </tr>\n","    <tr style =\"border-bottom-style: solid; border-width: 1px; height: 20px;\">\n","      <td colspan = 4></td>\n","      <td colspan = 2 style=\"text-align: center\">\n","        <math>\n","          <mn>1</mn>\n","          <mo>-</mo>\n","          <mi>&alpha;</mi>\n","          <mo>=</mo>\n","          <mn>0.95</mn>\n","        <math>\n","      </td>\n","    </tr>\n","    <tr style=\"height: 40px;\">\n","      <th style=\"text-align: center;\">\n","        <math>\n","          <msub>\n","            <mi>B</mi>\n","            <mn>0</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td style=\"text-align: center;\">-26.173286</td>\n","      <td style=\"text-align: center;\">9.335402</td>\n","      <td style=\"text-align: center;\">87.149727</td>\n","      <td style=\"text-align: center;\">-45.786238</td>\n","      <td style=\"text-align: center;\">-6.560335</td>\n","    </tr>\n","    <tr style=\"height: 40px;\">\n","      <th style=\"text-align: center;border-bottom-style: solid;\n","            border-width: 1px;\">\n","        <math>\n","          <msub>\n","            <mi>B</mi>\n","            <mn>1</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td style=\"text-align: center;border-bottom-style: solid;\n","            border-width: 1px;\">0.670424</td>\n","      <td style=\"text-align: center;border-bottom-style: solid;\n","            border-width: 1px;\">0.018528</td>\n","      <td style=\"text-align: center;border-bottom-style: solid;\n","            border-width: 1px;\">0.000343</td>\n","      <td style=\"text-align: center;border-bottom-style: solid;\n","            border-width: 1px;\">0.631499</td>\n","      <td style=\"text-align: center;border-bottom-style: solid;\n","            border-width: 1px;\">0.709349</td>\n","    </tr>\n","  </table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","\n","\n"]},{"data":{"text/html":["<table style=\" border: none;\n","                    border-collapse: collapse; width:65%; word-break: break-word;\">\n","    <tr \tstyle =\"border-bottom-style: solid; border-width: 1px; text-align: center\">\n","      <th colspan =\"4\"> Prediction intervals for average Gross national product </th>\n","    </tr>\n","    <tr style =\"border-bottom-style: solid; border-width: 1px; height: 20px;\">\n","      <th>\n","        <math>\n","          <msub>\n","            <mi>x</mi>\n","            <mi>p</mi>\n","          </msub>\n","        <math>\n","      </th>\n","      <th>\n","        <math>\n","\n","              <mover>\n","                <mi>y</mi>\n","                <mo>^</mo>\n","              </mover>\n","\n","          </msub>\n","        <math>\n","      </th>\n","      <th>\n","        <math>\n","          <mi>s</mi>\n","          <mo>(</mo>\n","\n","              <mover>\n","                <mi>y</mi>\n","                <mo>^</mo>\n","              </mover>\n","\n","          <mo>)</mo>\n","        <math>\n","      </th>\n","      <th>95% prediction interval</th>\n","      "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","\n","\n"]},{"data":{"text/html":["<table style=\"width:50%; border: none;\n","                    border-collapse: collapse;\">\n","    <tr style =\"border-bottom-style: solid; border-width: 1px;\">\n","      <th colspan = 5>ANOVA table</th>\n","    </tr>\n","    <tr style =\"border-bottom-style: solid; border-width: 1px; height: 40px;\">\n","      <th style=\"text-align: left;\">Source of variation</th>\n","      <th>df</th>\n","      <th>SS</th>\n","      <th>MS</th>\n","      <th>F Statistic</th>\n","    </tr>\n","    <tr style=\"height: 40px;\">\n","      <th style=\"text-align: left;\">Regression</th>\n","      <td style=\"text-align: center\">1</td>\n","      <td style=\"text-align: center\">79594.105221</td>\n","      <td style=\"text-align: center\">79594.105221</td>\n","      <td rowspan = 2 style=\"text-align: center; border-bottom-style: solid\n","                              ;border-width: 1px;\">\n","      1309.379345</td>\n","    </tr>\n","    <tr style=\"height: 40px;\">\n","      <th style=\"text-align: left;\">Error</th>\n","      <td style=\"text-align: center; border-bottom-style: solid;\n","            border-width: 1px;\">18</td>\n","      <td style=\"text-align: center; border-bottom-style: solid;\n","            border-width: 1px;\">1094.177863</td>\n","      <td style=\"text-align: center; border-bottom-style: solid;\n","            border-width: 1px;\">60.787659</td>\n","    </tr>\n","    <tr style =\"border-bottom-style: solid; border-width: 1px; height: 40px;\">\n","      <th style=\"text-align: left;\">Total</th>\n","      <td style=\"text-align: center\">19</td>\n","      <td style=\"text-align: center\">80688.283084</td>\n","      <td colspan =\"2\" style=\"text-align: center\">\n","        <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n","              <msub>\n","                <mi>f</mi>\n","                <mrow>\n","                  <mn>0.95</mn>\n","                  <mo>,</mo>\n","                  <mn>1</mn>\n","                  <mo>,</mo>\n","                  <mn>18</mn>\n","                </mrow>\n","              </msub>\n","              <mo>=</mo>\n","              <mn>4.413873 </mn>\n","        </math>\n","      </td>\n","    </tr>\n","    <tr style=\"height: 40px;\">\n","      <th colspan = 2 style=\"text-align: left; border-bottom-style: solid;\n","            border-width: 1px;\">Coefficient of determination\n","        <math>\n","          <msup>\n","            <mi mathvariant=\"bold\">r</mi>\n","            <mn mathvariant=\"bold\">2</mn>\n","          </msup>\n","          <mo mathvariant=\"bold\">=</mo>\n","          <mn>0.986439</mn>\n","        <math>\n","      </th>\n","      <th colspan = 3 style=\"text-align: left; border-bottom-style: solid;\n","            border-width: 1px;\">Sample Correlation Coefficient\n","        <math>\n","          <mi mathvariant=\"bold\">r</mi>\n","          <mo mathvariant=\"bold\">=</mo>\n","          <mn>0.993197</mn>\n","        <math>\n","      </th>\n","    </tr>\n","  </table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","\n","\n"]},{"data":{"text/html":["<table style=\"width:50%; border: none;\n","                    border-collapse: collapse;\">\n","    <tr style =\"border-bottom-style: solid; border-width: 1px;\">\n","      <th colspan = 6 >residual analysis</th>\n","    </tr>\n","    <tr style =\"border-bottom-style: solid; border-width: 1px; height: 20px;\">\n","      <th style=\"text-align: left;\">X</th>\n","      <th>Y</th>\n","      <th style=\"text-align: left; width:17%; word-break: break-word;\">Predicted Y Value</th>\n","      <th style=\"text-align: left; width:17%; word-break: break-word;\">St. Dev Pred. Y</th>\n","      <th>Residual</th>\n","      <th>ST. Residual</th>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">329.09</td>\n","      <td style=\"text-align: center;\">199.28</td>\n","      <td style=\"text-align: center;\">194.453600</td>\n","      <td style=\"text-align: center;\">3.533989</td>\n","      <td style=\"text-align: center;\">4.824138</td>\n","      <td style=\"text-align: center;\">0.618745</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">361.54</td>\n","      <td style=\"text-align: center;\">214.43</td>\n","      <td style=\"text-align: center;\">216.208608</td>\n","      <td style=\"text-align: center;\">3.025599</td>\n","      <td style=\"text-align: center;\">-1.782085</td>\n","      <td style=\"text-align: center;\">-0.228571</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">368.39</td>\n","      <td style=\"text-align: center;\">220.98</td>\n","      <td style=\"text-align: center;\">220.806140</td>\n","      <td style=\"text-align: center;\">2.922674</td>\n","      <td style=\"text-align: center;\">0.174102</td>\n","      <td style=\"text-align: center;\">0.022330</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">393.62</td>\n","      <td style=\"text-align: center;\">237.75</td>\n","      <td style=\"text-align: center;\">237.718721</td>\n","      <td style=\"text-align: center;\">2.562753</td>\n","      <td style=\"text-align: center;\">0.033066</td>\n","      <td style=\"text-align: center;\">0.004241</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">421.06</td>\n","      <td style=\"text-align: center;\">251.30</td>\n","      <td style=\"text-align: center;\">256.116275</td>\n","      <td style=\"text-align: center;\">2.217243</td>\n","      <td style=\"text-align: center;\">-4.812192</td>\n","      <td style=\"text-align: center;\">-0.617213</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">445.88</td>\n","      <td style=\"text-align: center;\">262.40</td>\n","      <td style=\"text-align: center;\">272.757821</td>\n","      <td style=\"text-align: center;\">1.966619</td>\n","      <td style=\"text-align: center;\">-10.361275</td>\n","      <td style=\"text-align: center;\">-1.328940</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">440.30</td>\n","      <td style=\"text-align: center;\">263.04</td>\n","      <td style=\"text-align: center;\">269.013257</td>\n","      <td style=\"text-align: center;\">2.016594</td>\n","      <td style=\"text-align: center;\">-5.970357</td>\n","      <td style=\"text-align: center;\">-0.765760</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">471.57</td>\n","      <td style=\"text-align: center;\">284.88</td>\n","      <td style=\"text-align: center;\">289.980249</td>\n","      <td style=\"text-align: center;\">1.796617</td>\n","      <td style=\"text-align: center;\">-5.095929</td>\n","      <td style=\"text-align: center;\">-0.653605</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">473.99</td>\n","      <td style=\"text-align: center;\">290.00</td>\n","      <td style=\"text-align: center;\">291.601266</td>\n","      <td style=\"text-align: center;\">1.786322</td>\n","      <td style=\"text-align: center;\">-1.600300</td>\n","      <td style=\"text-align: center;\">-0.205255</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">454.88</td>\n","      <td style=\"text-align: center;\">290.57</td>\n","      <td style=\"text-align: center;\">278.791113</td>\n","      <td style=\"text-align: center;\">1.895236</td>\n","      <td style=\"text-align: center;\">11.781816</td>\n","      <td style=\"text-align: center;\">1.511139</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">492.84</td>\n","      <td style=\"text-align: center;\">307.04</td>\n","      <td style=\"text-align: center;\">304.240300</td>\n","      <td style=\"text-align: center;\">1.743842</td>\n","      <td style=\"text-align: center;\">2.797814</td>\n","      <td style=\"text-align: center;\">0.358848</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">535.00</td>\n","      <td style=\"text-align: center;\">333.01</td>\n","      <td style=\"text-align: center;\">332.504759</td>\n","      <td style=\"text-align: center;\">1.894354</td>\n","      <td style=\"text-align: center;\">0.509417</td>\n","      <td style=\"text-align: center;\">0.065338</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">567.28</td>\n","      <td style=\"text-align: center;\">341.04</td>\n","      <td style=\"text-align: center;\">354.142899</td>\n","      <td style=\"text-align: center;\">2.198285</td>\n","      <td style=\"text-align: center;\">-13.099358</td>\n","      <td style=\"text-align: center;\">-1.680128</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">520.20</td>\n","      <td style=\"text-align: center;\">317.93</td>\n","      <td style=\"text-align: center;\">322.584541</td>\n","      <td style=\"text-align: center;\">1.804828</td>\n","      <td style=\"text-align: center;\">-4.650378</td>\n","      <td style=\"text-align: center;\">-0.596459</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">510.16</td>\n","      <td style=\"text-align: center;\">337.38</td>\n","      <td style=\"text-align: center;\">315.853091</td>\n","      <td style=\"text-align: center;\">1.765867</td>\n","      <td style=\"text-align: center;\">21.522663</td>\n","      <td style=\"text-align: center;\">2.760503</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">584.84</td>\n","      <td style=\"text-align: center;\">371.25</td>\n","      <td style=\"text-align: center;\">365.918233</td>\n","      <td style=\"text-align: center;\">2.410365</td>\n","      <td style=\"text-align: center;\">5.330906</td>\n","      <td style=\"text-align: center;\">0.683744</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">617.58</td>\n","      <td style=\"text-align: center;\">386.22</td>\n","      <td style=\"text-align: center;\">387.864937</td>\n","      <td style=\"text-align: center;\">2.862996</td>\n","      <td style=\"text-align: center;\">-1.642166</td>\n","      <td style=\"text-align: center;\">-0.210625</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">641.43</td>\n","      <td style=\"text-align: center;\">403.81</td>\n","      <td style=\"text-align: center;\">403.855861</td>\n","      <td style=\"text-align: center;\">3.224780</td>\n","      <td style=\"text-align: center;\">-0.045733</td>\n","      <td style=\"text-align: center;\">-0.005866</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">649.72</td>\n","      <td style=\"text-align: center;\">406.19</td>\n","      <td style=\"text-align: center;\">409.413304</td>\n","      <td style=\"text-align: center;\">3.355012</td>\n","      <td style=\"text-align: center;\">-3.221762</td>\n","      <td style=\"text-align: center;\">-0.413224</td>\n","    </tr>\n","    <tr style=\"height: 20px;\">\n","      <td style=\"text-align: center;\">620.68</td>\n","      <td style=\"text-align: center;\">395.26</td>\n","      <td style=\"text-align: center;\">389.948109</td>\n","      <td style=\"text-align: center;\">2.908872</td>\n","      <td style=\"text-align: center;\">5.307612</td>\n","      <td style=\"text-align: center;\">0.680756</td>\n","    </tr><tr style =\"border-bottom-style: solid; border-width: 1px;\">\n","      <th colspan = 6 ></th>\n","    </tr>\n","  </table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","\n","\n","\n","\n","\n"]},{"data":{"text/plain":["0.18281581253360604"]},"execution_count":3,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["\n","yprime = y[1:]-(r*y[:-1])\n","xprime = x[1:]-(r*x[:-1])\n","print(yprime)\n","print(xprime)\n","slmreg(xprime,xtitle, yprime, ytitle, 0.05, np.array([]))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1726054604123,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"},"user_tz":240},"id":"o7r9VHc74Loc","outputId":"34940ef3-ce29-47f9-bffc-33047e5b728a"},"outputs":[{"data":{"text/plain":["-62.30496217821686"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["-26.173286/(1-r)"]},{"cell_type":"markdown","metadata":{"id":"T61IZUWmmvxY"},"source":["#General Linear model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"b0z85BMtsE4s"},"outputs":[],"source":["#Example 14.1\n","\n","x4 = np.array([235, 307, 212, 365, 218, 235, 285, 205, 267, 300, 367, 351, 379,\n","               275, 365, 275, 360, 365, 395, 272, 424, 428, 273, 358, 444, 345,\n","               402, 410, 340, 347, 416, 407])\n","\n","x3 = np.array([220, 231, 217, 316, 210, 267, 274, 190, 236, 220, 231, 284, 316,\n","               267, 274, 190, 236, 220, 231, 217, 284, 316, 210, 267, 274, 190,\n","               236, 220, 217, 210, 267, 190])\n","\n","x2 = np.array([6.1, 4.8, 6.1, 0.2, 3.5, 1.8, 1.2, 8.6, 5.2, 6.1, 4.8, 2.4, 0.2,\n","              1.8, 1.2, 8.6, 5.2, 6.1, 4.8, 6.1, 2.4, 0.2, 3.5, 1.8, 1.2, 8.6,\n","              5.2, 6.1, 6.1, 3.5, 1.8, 8.6])\n","\n","x1 = np.array([38.4, 40.3, 40.0, 31.8, 40.8, 41.3, 38.1, 50.8, 32.2, 38.4, 40.3,\n","               32.2, 31.8, 41.3, 38.1, 50.8, 32.2, 38.4, 40.3, 40.0, 32.2, 31.8,\n","               40.8, 41.3, 38.1, 50.8, 32.2, 38.4, 40.0, 40.8, 41.3, 50.8])\n","\n","y = np.array([6.9, 14.4, 7.4, 8.5, 8.0, 2.8, 5.0, 12.2, 10.0, 15.2, 26.8, 14.0,\n","              14.7, 6.4, 17.6, 22.3, 24.8, 26.0, 34.9, 18.2, 23.2, 18.0, 13.1,\n","              16.1, 32.1, 34.7, 31.7, 33.6, 30.4, 26.6, 27.8, 45.7])\n","\n","ytitle = \"gasoline yield\"\n","xtitle = [\"API\", \"Crude Oil Vapor Pressure\", \"Crude Oil ASTM 10%\", \"gasoline ASTM end point\"]\n","x = [x1, x2, x3, x4]\n","xp = np.array([0, 0, 0, 0])\n","name = [1, 2, 3, 4]\n","weightvar = [x1] #variable on which weighted sum of squares will be performed\n","alpha = 0.05"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0ZGD9pJZrpPp"},"outputs":[],"source":["#Example 14.3\n","\n","# x2 = np.array([80, 95, 106, 115, 128, 128, 115, 92, 93,\n","#                111, 116, 117, 127, 133, 135, 136, 140, 142,\n","#                148, 150])\n","\n","# x1 = np.array([87, 78, 81, 65, 51, 62, 70, 91, 94,\n","#                100, 102, 82, 74, 85, 86, 90, 93, 81,\n","#                72, 60])\n","\n","# # x3 = np.square(x1)\n","\n","# y = np.array([13.59, 15.71, 15.97, 20.21, 24.64, 21.25, 18.94, 14.85, 15.18,\n","#               16.30, 15.93, 16.45, 19.02, 18.16, 18.57, 17.01, 18.03, 19.22,\n","#               21.12, 23.32])\n","\n","# ytitle = \"Cost\"\n","# xtitle = [\"Production Rate\", \"Material and Labor Costs\"]\n","# x = [x1, x2] #Variables to include in analysis\n","# xp = np.array([0, 0])# particular values of predictors to assess a particular prediction value\n","# alpha = 0.05 #alpha value for confidence interval"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"X8qza8vYVibP"},"outputs":[],"source":["#Example 14.6\n","\n","\n","x1 = np.array([70, 70, 70, 70, 70, 70, 70, 70, 70,\n","               75, 75, 75, 75, 75, 75, 75, 75, 75,\n","               80, 80, 80, 80, 80, 80, 80, 80, 80,\n","               85, 85, 85, 85, 85, 85, 85, 85, 85,\n","               90, 90, 90, 90, 90, 90, 90, 90, 90,\n","               95, 95, 95, 95, 95, 95, 95, 95, 95])\n","x2 = np.array([0, 10, 20, 30, 40, 50, 60, 70, 80,\n","               0, 10, 20, 30, 40, 50, 60, 70, 80,\n","               0, 10, 20, 30, 40, 50, 60, 70, 80,\n","               0, 10, 20, 30, 40, 50, 60, 70, 80,\n","               0, 10, 20, 30, 40, 50, 60, 70, 80,\n","               0, 10, 20, 30, 40, 50, 60, 70, 80])\n","\n","x11 = x1**2\n","x22 = x2**2\n","x12 = x1*x2\n","\n","y = np.array([64, 65, 66,67, 68, 69, 70, 70, 71,\n","              69, 70, 72, 73, 74, 75, 76, 77, 78,\n","              73, 75, 77, 78, 79, 81, 82, 85, 86,\n","              78, 80, 82, 84, 86, 88, 90, 93, 97,\n","              83, 85, 87, 90, 93, 96, 100, 106, 113,\n","              87, 90, 93, 96, 101, 107, 114, 124, 136])\n","\n","ytitle = \"Apparent Temp\"\n","xtitle = [\"air temp\", \"rel Hum\", \"air temp squared\", \"rel hum squared\", \"air tem * rel hum\"]\n","x = [x1, x2, x11, x22, x12] #Variables to include in analysis\n","xp = np.array([0, 0, 0, 0, 0])# particular values of predictors to assess a particular prediction value\n","name = [1, 2, 11, 22, 12] #subcripts to be written under each x value.  Should be equal to variable names in x\n","weightvar = [x1] #variable on which weighted sum of squares will be performed\n","alpha = 0.05 #alpha value for confidence interval"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yqmW3GtK4WA6"},"outputs":[],"source":["#Example 14.8\n","\n","x1 = np.array([-7.00, -7.00, - 7.00, -7.00, - 7.00, - 7.00,\n","               -7.00, -7.00, - 6.00, - 6.00, - 6.00, - 6.00,\n","               -6.00, -6.00, - 5.00, - 5.00, - 5.00, - 5.00,\n","               -5.00, -4.00, - 4.00, - 4.00, - 4.00, -4.00,\n","               -4.00, -3.00, - 3.00, - 3.00, - 3.00, - 2.00,\n","               -2.00, -2.00, - 1.00, - 1.00, - 1.00, 0.0,\n","               0.0, 0.0, 0.0, 1.00, 1.00, 1.00,\n","               2.00, 2.00, 2.00, 3.00, 3.00, 3.00,\n","               3.00, 4.00, 4.00, 4.00, 4.00, 5.00,\n","               5.00, 5.00, 6.00, 6.00, 6.00, 7.00,\n","               7.00])\n","\n","x11 = x1**2\n","\n","\n","\n","\n","y = np.array([53.8, 53.3, 54.8, 54.6, 53.7, 55.2, 55.7, 54.1, 63.8, 64.2,\n","              66.9, 67.2, 65.4, 67.3, 71.8, 73.2, 75.6, 76.2, 72.7, 79.4,\n","              81.1, 85.2, 83.0, 84.1, 82.8, 90.3, 84.2, 88.3, 86.0, 93.2,\n","              97.4, 98.3, 102.8, 96.9, 98.2, 98.9, 96.1, 99.6, 91.4, 101.1,\n","              94.6, 95.9, 92.3, 96.6, 98.5, 93.6, 86.2, 87.9, 89.5, 74.8,\n","              82.3, 76.9, 81.2, 73.6, 65.4, 67.1, 60.2, 54.9, 50.8, 44.7,\n","              38.5])\n","\n","ytitle = \"Ozone\"\n","xtitle = [\"layer\", \"squared layer\"]\n","x = [x1, x11] #Variables to include in analysis\n","xp = np.array([0, 0])# particular values of predictors to assess a particular prediction value\n","name = [1, 11] #subcripts to be written under each x value.  Should be equal to variable names in x\n","weightvar = [x1] #variable on which weighted sum of squares will be performed\n","alpha = 0.05 #alpha value for confidence interval"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DDzgqwjQVgO9"},"outputs":[],"source":["df = pd.DataFrame({\"y\":y, \"x1\":x1, \"x11\":x11, \"weights\":np.diagonal(InvQ)})\n","df.to_csv(\"ozone.csv\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":294,"status":"ok","timestamp":1727784812344,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"},"user_tz":240},"id":"DOC_0mtAEp2p","outputId":"52b9cbb4-cc51-4d73-d378-f73539058150"},"outputs":[{"data":{"text/plain":["array([1.4957265 , 1.4957265 , 1.4957265 , 1.4957265 , 1.4957265 ,\n","       1.4957265 , 1.4957265 , 1.4957265 , 0.41186161, 0.41186161,\n","       0.41186161, 0.41186161, 0.41186161, 0.41186161, 0.27548209,\n","       0.27548209, 0.27548209, 0.27548209, 0.27548209, 0.23041475,\n","       0.23041475, 0.23041475, 0.23041475, 0.23041475, 0.23041475,\n","       0.14111007, 0.14111007, 0.14111007, 0.14111007, 0.13495277,\n","       0.13495277, 0.13495277, 0.10405827, 0.10405827, 0.10405827,\n","       0.07221955, 0.07221955, 0.07221955, 0.07221955, 0.08453085,\n","       0.08453085, 0.08453085, 0.09910803, 0.09910803, 0.09910803,\n","       0.09966777, 0.09966777, 0.09966777, 0.09966777, 0.07974482,\n","       0.07974482, 0.07974482, 0.07974482, 0.05339028, 0.05339028,\n","       0.05339028, 0.04502476, 0.04502476, 0.04502476, 0.05202914,\n","       0.05202914])"]},"execution_count":11,"metadata":{},"output_type":"execute_result"}],"source":["np.diagonal(InvQ)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WWW_HnxF4zun"},"outputs":[],"source":["#exercise 13.5\n","# x1 = np.array([45, 20, 40, 40, 47, 30, 25, 20, 15,\n","#               35, 40, 55, 50, 60, 15, 30, 35, 45])\n","# xtitle = ['Income']\n","\n","# y = np.array([70, 50, 60, 50, 90, 55, 55, 35, 40,\n","#               65, 75, 105, 110, 120, 30, 40, 65, 80])\n","# ytitle = 'Life insurance'\n","\n","\n","# x = [x1]\n","# xp = np.array([58])\n","# name = [1]\n","# alpha = 0.05"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"z2Z0qM6oDh1f"},"outputs":[],"source":["# Ejerc 14.5\n","\n","# x2 = np.array([3, 4, 5, 4, 4,\n","#                3, 6, 5, 3, 2,\n","#                4, 3, 2, 3, 4])\n","\n","# x1 = np.array([2.1, 1.1, 0.9, 1.6, 6.2,\n","#               2.3, 1.8, 1.0, 8.9, 2.4,\n","#               1.2, 4.7, 3.5, 2.9, 1.4])\n","\n","# y = np.array([0.43, 0.31, 0.32, 0.46, 1.25,\n","#                0.44, 0.52, 0.29, 1.29, 0.35,\n","#                0.35, 0.78, 0.43, 0.47, 0.38])\n","# ytitle = \"monthly food expenditure\"\n","# xtitle = [\"monthly income\", \"family size\"]\n","# x = [x1, x2]\n","# xp = np.array([2.5, 4])\n","# name = [1, 2]\n","# alpha = 0.02"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xYI7QyU3LOps"},"outputs":[],"source":["# Ejerc 14.13\n","\n","# x1 = np.array([25.6, 42.2, 57.6, 98.8, 10.4, 30.1, 40.0,\n","#               29.3, 16.1, 18.0, 88.2, 34.0, 22.1, 70.0])\n","\n","# x2 = x1**2\n","\n","# y = np.array([15.4, 16.8, 19.7, 21.7, 10.8, 15.2, 18.9,\n","#               15.9, 12.0, 14.1, 21.1, 17.6, 14.8, 21.6])\n","\n","# ytitle = 'Percent taxes Paid'\n","# xtitle = ['gross annual income', 'squared gross annual income']\n","# x = [x1, x2]\n","# xp = np.array([250, 250*250])\n","# name = [1, 2]\n","# alpha = 0.02"]},{"cell_type":"markdown","metadata":{"id":"IEA3RgqQ870W"},"source":["#ejerc 14.9"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ljDFKx8FvlSf"},"outputs":[],"source":["# Ejerc 14.9\n","# x4 = np.array([89, 78, 90, 95, 109, 88, 108, 105, 88, 84,\n","#                110, 87, 97, 100, 95, 102, 102, 103, 108, 74])\n","\n","# x3 = np.array([96, 98, 95, 93, 109, 90, 102, 106, 95, 95,\n","#                107, 100, 105, 99, 108, 116, 100, 103, 113, 80])\n","\n","# x2 = np.array([121, 115, 115, 117, 102, 96, 129, 119, 101, 95,\n","#                118, 110, 89, 108, 125, 122, 83, 101, 120, 77])\n","\n","# x1 = np.array([122, 108, 120, 118, 113, 112, 109, 112, 115, 111,\n","#                119, 112, 120, 117, 109, 116, 104, 110, 117, 120])\n","\n","# y = np.array([94, 71, 82, 76, 111, 64, 109, 104, 80, 73,\n","#               127, 88, 99, 80, 99, 116, 100, 96, 126, 58])\n","\n","# ytitle = \"job effectiveness\"\n","# xtitle = [\"test 3\", \"test 4\"]\n","# x = [x1, x2, x3, x4]\n","# xp = np.array([105, 110, 99, 107])\n","# name = [1, 2, 3, 4]\n","# alpha = 0.05"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jGN0_nJ0ZMGy"},"outputs":[],"source":["# Ejerc 14.11\n","# x5 = np.array([0.156, 0.205, 0.023, 0.042, 0.102, 0.147, 0.285, 0.024,\n","#                0.038, 0.235, 0.076, 0.200, 0.056, 0.032, 0.068, 0.200])\n","\n","# x4 = np.array([0.220, 0.297, 0.034, 0.058, 0.142, 0.202, 0.395, 0.036,\n","#                0.056, 0.332, 0.107, 0.286, 0.077, 0.049, 0.094, 0.281])\n","\n","# x3 = np.array([0.290, 0.369, 0.047, 0.081, 0.198, 0.267, 0.496, 0.047,\n","#                0.074, 0.425, 0.153, 0.364, 0.105, 0.072, 0.145, 0.380])\n","\n","# x2 = np.array([0.310, 0.390, 0.058, 0.100, 0.213, 0.304, 0.518, 0.063,\n","#                0.092, 0.452, 0.178, 0.391, 0.124, 0.087, 0.161, 0.420])\n","\n","# x1 = np.array([0.297, 0.360, 0.075, 0.114, 0.229, 0.315, 0.477, 0.072,\n","#                0.099, 0.420, 0.189, 0.369, 0.142, 0.094, 0.171, 0.378])\n","\n","# y = np.array([17, 17, 35, 69, 69, 173, 173, 17,\n","#               17, 73, 17, 35, 69, 35, 35, 52])\n","\n","# ytitle = \"Feldspar concentration\"\n","# xtitle = [\"band 1\", \"band 2\", \"band 3\", \"band 4\", \"band 5\"]\n","# x = [x2, x3]\n","# xp = np.array([.5, .5])\n","# name = [2, 3]\n","# alpha = 0.02"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LJMeLy8MYfR1"},"outputs":[],"source":["# Ejerc 14.16, 14.17\n","x5 = np.array([6, 8, 6, 8, 7, 1, 2, 5, 5, 7,\n","               3, 3, 4, 4, 6, 6, 1, 2, 1, 3,\n","               4, 6, 4, 7, 4, 8, 1, 2, 8, 2,\n","               5, 4, 3, 6, 7, 2, 1, 5, 4, 6,\n","               6, 7, 1, 5, 7, 5, 3, 7])\n","\n","x4 = np.array([10.2, 15.7, 9.1, 16.8, 19.4, 18.3, 15.5, 13.7, 12.3, 13.5,\n","               13.7, 11.0, 12.8, 14.6, 10.0, 11.5, 13.6, 18.6, 16.8, 12.6,\n","               13.2, 11.5, 11.8, 14.2, 12.8, 13.1, 15.3, 14.9, 15.3, 16.0,\n","               11.8, 12.2, 11.5, 11.7, 15.4, 11.9, 14.9, 10.4, 11.4, 10.5,\n","               13.7, 17.5, 15.6, 16.4, 16.1, 9.2, 12.7, 14.5])\n","\n","\n","x3 = np.array([7.4, 9.8, 6.6, 8.2, 5.6, 7.1, 8.9, 9.0, 6.9, 6.3,\n","               6.5, 5.7, 4.0, 4.0, 4.6, 7.0, 8.9, 6.8, 9.5, 8.2,\n","               5.9, 7.4, 6.2, 6.2, 5.0, 9.0, 6.4, 9.4, 7.8, 9.1,\n","               6.2, 5.5, 7.8, 5.0, 9.5, 7.9, 8.6, 5.0, 3.6, 6.0,\n","               5.7, 5.3, 8.0, 5.6, 8.8, 7.5, 4.5, 3.6])\n","\n","x2 = np.array([25.8, 9.2, 18.4, 12.0, 4.7, 6.6, 15.2, 14.9, 26.5, 1.8,\n","               14.7, 7.6, 1.6, 5.6, 7.5, 30.2, 0.7, 21.1, 4.3, 12.5,\n","               2.0, 36.4, 11.2, 4.8, 3.8, 8.3, 0.7, 12.8, 9.8, 14.6,\n","               23.1, 3.3, 10.1, 11.3, 3.0, 9.4, 3.7, 31.2, 6.1, 15.9,\n","               13.1, 2.5, 0.8, 19.5, 5.1, 3.9, 3.9, 3.1])\n","\n","x1 = np.array([58.4, 79.6, 50.0, 90.9, 78.5, 77.4, 72.2, 80.5, 60.3, 54.1,\n","               83.0, 64.9, 57.2, 66.1, 52.3, 66.1, 50.8, 76.6, 84.6, 73.8,\n","               66.4, 44.5, 70.1, 53.4, 61.5, 80.9, 56.4, 88.9, 69.8, 88.9,\n","               45.0, 44.3, 75.3, 68.0, 67.1, 71.5, 87.1, 47.6, 44.6, 58.7,\n","               79.7, 80.4, 32.2, 63.1, 72.6, 39.0, 65.9, 60.5])\n","\n","y = np.array([14.2, 9.5, 8.8, 11.5, 6.3, 4.2, 6.0, 10.2, 11.7, 5.5,\n","              9.9, 7.4, 2.3, 6.6, 10.1, 15.5, 2.4, 8.0, 3.1, 9.3,\n","              2.7, 14.3, 9.6, 5.4, 3.9, 15.8, 3.2, 5.6, 8.8, 10.7,\n","              10.6, 0.9, 7.8, 8.6, 4.9, 5.6, 3.9, 11.9, 2.0, 10.1,\n","              13.3, 3.5, 1.4, 9.0, 4.3, 6.0, 2.8, 5.4])\n","\n","ytitle = \"% urban population\"\n","# xtitle = [\"% urban population\", \"% minority population\",\n","#           \"% population 4+ years college\", \"geographic region\"]\n","xtitle = [\"% minority population\",\n","          \"% population 4+ years college\", \"geographic region\"]\n","x = [x1, x2, x3, x4, x5] #Variables to include in analysis\n","xp = np.array([0, 0, 0, 0, 0]) # particular values of predictors to assess a particular prediction value\n","name = [1, 2, 3, 4, 5] #subcripts to be written under each x value.  Should be equal to variable names in x\n","alpha = 0.02 #alpha value for confidence interval\n","weightvar = [x5] #variable on which weighted sum of squares will be performed"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TrnN2qwBSvxh"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":237},"executionInfo":{"elapsed":190,"status":"ok","timestamp":1727908989036,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"},"user_tz":240},"id":"MrWwsLWA7Gqg","outputId":"3d69a00a-7ae4-42a3-a29e-bd9a06098b06"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"df\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"y\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.46764761897408486,\n        \"min\": -0.29110499256667205,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1.0,\n          0.17576147942785697,\n          0.44735414710222965\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"x1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4024151386919419,\n        \"min\": -0.052466520340358265,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.17576147942785697,\n          1.0,\n          -0.04064101275026221\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"x2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5045783175608717,\n        \"min\": -0.2997829408674665,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.781471061668383,\n          -0.052466520340358265,\n          0.15774297663992287\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"x3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.392168021519465,\n        \"min\": -0.14008684131042995,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.15352987974733145,\n          0.41366560489990917,\n          -0.14008684131042995\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"x4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5196178049090356,\n        \"min\": -0.2997829408674665,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          -0.29110499256667205,\n          0.5468160892884838,\n          -0.10850206163553666\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"x5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.440334616811326,\n        \"min\": -0.14008684131042995,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.44735414710222965,\n          -0.04064101275026221,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe"},"text/html":["\n","  <div id=\"df-f856dc5d-86bc-4b4b-8a05-38319842fc2c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>y</th>\n","      <th>x1</th>\n","      <th>x2</th>\n","      <th>x3</th>\n","      <th>x4</th>\n","      <th>x5</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>y</th>\n","      <td>1.000000</td>\n","      <td>0.175761</td>\n","      <td>0.781471</td>\n","      <td>0.153530</td>\n","      <td>-0.291105</td>\n","      <td>0.447354</td>\n","    </tr>\n","    <tr>\n","      <th>x1</th>\n","      <td>0.175761</td>\n","      <td>1.000000</td>\n","      <td>-0.052467</td>\n","      <td>0.413666</td>\n","      <td>0.546816</td>\n","      <td>-0.040641</td>\n","    </tr>\n","    <tr>\n","      <th>x2</th>\n","      <td>0.781471</td>\n","      <td>-0.052467</td>\n","      <td>1.000000</td>\n","      <td>0.076183</td>\n","      <td>-0.299783</td>\n","      <td>0.157743</td>\n","    </tr>\n","    <tr>\n","      <th>x3</th>\n","      <td>0.153530</td>\n","      <td>0.413666</td>\n","      <td>0.076183</td>\n","      <td>1.000000</td>\n","      <td>0.268966</td>\n","      <td>-0.140087</td>\n","    </tr>\n","    <tr>\n","      <th>x4</th>\n","      <td>-0.291105</td>\n","      <td>0.546816</td>\n","      <td>-0.299783</td>\n","      <td>0.268966</td>\n","      <td>1.000000</td>\n","      <td>-0.108502</td>\n","    </tr>\n","    <tr>\n","      <th>x5</th>\n","      <td>0.447354</td>\n","      <td>-0.040641</td>\n","      <td>0.157743</td>\n","      <td>-0.140087</td>\n","      <td>-0.108502</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f856dc5d-86bc-4b4b-8a05-38319842fc2c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f856dc5d-86bc-4b4b-8a05-38319842fc2c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f856dc5d-86bc-4b4b-8a05-38319842fc2c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5e7333a7-de83-40f0-90cc-21974b6e6e1c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5e7333a7-de83-40f0-90cc-21974b6e6e1c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5e7333a7-de83-40f0-90cc-21974b6e6e1c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["           y        x1        x2        x3        x4        x5\n","y   1.000000  0.175761  0.781471  0.153530 -0.291105  0.447354\n","x1  0.175761  1.000000 -0.052467  0.413666  0.546816 -0.040641\n","x2  0.781471 -0.052467  1.000000  0.076183 -0.299783  0.157743\n","x3  0.153530  0.413666  0.076183  1.000000  0.268966 -0.140087\n","x4 -0.291105  0.546816 -0.299783  0.268966  1.000000 -0.108502\n","x5  0.447354 -0.040641  0.157743 -0.140087 -0.108502  1.000000"]},"execution_count":95,"metadata":{},"output_type":"execute_result"}],"source":["df = pd.DataFrame({\"y\":y, \"x1\":x1, \"x2\":x2, \"x3\":x3, \"x4\":x4, \"x5\":x5})\n","#df.to_csv(\"crimedata.csv\")\n","df.corr()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gUGVGd98uaAS"},"outputs":[],"source":["# Ejerc 14.15\n","\n","# x1 = np.array([[14.2, 58.4, 25.8, 7.4, 10.2, 6],[95, 79.6, 9.2, 9.8, 15.7, 8]])\n","\n","\n","\n","# ytitle = \"Jan mean atmosferic temperature\"\n","# xtitle = [\"latitude\", \"longitude\", \"elevation\"]\n","# x = [x1]\n","# xp = np.array([0])\n","# name = [1]\n","# alpha = 0.02"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":203,"status":"ok","timestamp":1727902121055,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"},"user_tz":240},"id":"LqyJpfPX_bF0","outputId":"fd4f6d10-2ad0-4268-8364-4c70292ff6ed"},"outputs":[{"data":{"text/plain":["43"]},"execution_count":30,"metadata":{},"output_type":"execute_result"}],"source":["dferror"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":595,"status":"ok","timestamp":1728045771920,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"},"user_tz":240},"id":"RWqr_4B7pfJU","outputId":"c7760230-a4ea-414c-b5f3-a7b485630bb6"},"outputs":[{"name":"stdout","output_type":"stream","text":["3.158641993008672 42 [[132.66296371]]\n"]},{"data":{"text/html":["<style>\n","  td {\n","    font-size: 0.8755em;\n","  }\n","  th {\n","    font-size: 0.8755em;\n","  }\n","  mi, mo, mn {\n","    font-weight: bold;\n","  }\n","  </style>\n","  <body>\n","  <table style=\"width:65%; border: none;\n","                    border-collapse: collapse; word-break: break-word;\">\n","    <tr>\n","      <td colspan = 9 style=\"text-align: left; height: 30px;\">\n","      ANOVA TABLE\n","      </td>\n","    </tr>\n","    <tr>\n","      <td colspan = 9 style=\"text-align: left; height: 30px;\">ESTIMATED REGRESSION EQUATION:\n","        <math>\n","          <mi>Y</mi><mo>=</mo><mo>-</mo><mn>0.1148</mn><mo>+</mo><mn>0.0897</mn>\n","                    <msub>\n","                      <mi>X</mi>\n","                      <mn>1</mn>\n","                    </msub><mo>+</mo><mn>0.2933</mn>\n","                    <msub>\n","                      <mi>X</mi>\n","                      <mn>2</mn>\n","                    </msub><mo>+</mo><mn>0.1894</mn>\n","                    <msub>\n","                      <mi>X</mi>\n","                      <mn>3</mn>\n","                    </msub><mo>-</mo><mn>0.4082</mn>\n","                    <msub>\n","                      <mi>X</mi>\n","                      <mn>4</mn>\n","                    </msub><mo>+</mo><mn>0.6013</mn>\n","                    <msub>\n","                      <mi>X</mi>\n","                      <mn>5</mn>\n","                    </msub>\n","        </math>\n","    </td>\n","    </tr>\n","    <tr>\n","      <td colspan = 9 style=\"text-align: left; height: 30px;\">DEPENDENT VARIABLE: Y</td>\n","    </tr>\n","    <tr>\n","      <th style=\"text-align: left; height: 30px; width:18%;\">SOURCE</th>\n","      <th style=\"text-align: center; width:4%;\">DF</th>\n","      <th style=\"text-align: right; width:17%;\">SUM OF SQUARES</th>\n","      <th colspan = 2 style=\"text-align: right; width:17%;\">MEAN SQUARE</th>\n","      <th style=\"text-align: right; width:10%;\">F VALUE</th>\n","      <th>PR > F</th>\n","      <th>R-SQUARED</th>\n","      <th>CV</th>\n","    </tr>\n","    <tr>\n","      <td style=\"text-align: left; height: 30px;\">MODEL</td>\n","      <td style=\"text-align: center;\">5</td>\n","      <td style=\"text-align: right;\">586.276828</td>\n","      <td colspan = 2 style=\"text-align: right;\">117.255366</td>\n","      <td style=\"text-align: right;\">37.122</td>\n","      <td style=\"text-align: center;\">0.0000</td>\n","      <td style=\"text-align: center;\">0.815474</td>\n","      <td style=\"text-align: center;\">0.240644</td>\n","    </tr>\n","    <tr>\n","      <td style=\"text-align: left; height: 30px;\">ERROR</td>\n","      <td style=\"text-align: center;\">42</td>\n","      <td style=\"text-align: right;\">132.662964</td>\n","      <td colspan = 2 style=\"text-align: right;\">3.158642</td>\n","      <td></td>\n","      <th>STD DEV</th>\n","      <td></td>\n","      <th>Y MEAN</th>\n","    </tr>\n","    <tr>\n","      <td style=\"text-align: left; height: 30px;\">CORRECTED TOTAL</td>\n","      <td style=\"text-align: center;\">47</td>\n","      <td style=\"text-align: right;\">718.939792</td>\n","      <td colspan = 2 style=\"text-align: right;\"></td>\n","      <td></td>\n","      <td>1.777257</td>\n","      <td></td>\n","      <td>7.385417</td>\n","    </tr>\n","      <tr><td style=\"height: 30px;\"></td></tr>\n","    <tr>\n","      <th style=\"text-align: left; height: 30px;\">SOURCE</th>\n","      <th>DF</th>\n","      <th>TYPE I SS</th>\n","      <th>F VALUE</th>\n","      <th>PR > F</th>\n","      <th>DF</th>\n","      <th>TYPE IV SS</th>\n","      <th>F VALUE</th>\n","      <th>PR > F</th>\n","    </tr><tr style=\"text-align: left;\">\n","      <th>\n","        <math>\n","          <msub>\n","            <mi style=\"font-weight: normal;\">X</mi>\n","            <mn style=\"font-weight: normal;\">1</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td style=\"text-align: center;\">1</td>\n","      <td style=\"text-align: center;\">22.2096</td>\n","      <td style=\"text-align: center;\">7.0314</td>\n","      <td style=\"text-align: center;\">0.0113</td>\n","      <td style=\"text-align: center;\">1</td>\n","      <td style=\"text-align: center;\">48.9277</td>\n","      <td style=\"text-align: center;\">15.4901</td>\n","      <td style=\"text-align: center;\">0.0003</td>\n","    </tr>\n","    <tr style=\"text-align: left;\">\n","      <th>\n","        <math>\n","          <msub>\n","            <mi style=\"font-weight: normal;\">X</mi>\n","            <mn style=\"font-weight: normal;\">2</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td style=\"text-align: center;\">1</td>\n","      <td style=\"text-align: center;\">450.7182</td>\n","      <td style=\"text-align: center;\">142.6937</td>\n","      <td style=\"text-align: center;\">0.0000</td>\n","      <td style=\"text-align: center;\">1</td>\n","      <td style=\"text-align: center;\">269.0814</td>\n","      <td style=\"text-align: center;\">85.1889</td>\n","      <td style=\"text-align: center;\">0.0000</td>\n","    </tr>\n","    <tr style=\"text-align: left;\">\n","      <th>\n","        <math>\n","          <msub>\n","            <mi style=\"font-weight: normal;\">X</mi>\n","            <mn style=\"font-weight: normal;\">3</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td style=\"text-align: center;\">1</td>\n","      <td style=\"text-align: center;\">0.0091</td>\n","      <td style=\"text-align: center;\">0.0029</td>\n","      <td style=\"text-align: center;\">0.9576</td>\n","      <td style=\"text-align: center;\">1</td>\n","      <td style=\"text-align: center;\">3.9710</td>\n","      <td style=\"text-align: center;\">1.2572</td>\n","      <td style=\"text-align: center;\">0.2686</td>\n","    </tr>\n","    <tr style=\"text-align: left;\">\n","      <th>\n","        <math>\n","          <msub>\n","            <mi style=\"font-weight: normal;\">X</mi>\n","            <mn style=\"font-weight: normal;\">4</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td style=\"text-align: center;\">1</td>\n","      <td style=\"text-align: center;\">34.4429</td>\n","      <td style=\"text-align: center;\">10.9043</td>\n","      <td style=\"text-align: center;\">0.0020</td>\n","      <td style=\"text-align: center;\">1</td>\n","      <td style=\"text-align: center;\">30.1511</td>\n","      <td style=\"text-align: center;\">9.5456</td>\n","      <td style=\"text-align: center;\">0.0035</td>\n","    </tr>\n","    <tr style=\"text-align: left;\">\n","      <th>\n","        <math>\n","          <msub>\n","            <mi style=\"font-weight: normal;\">X</mi>\n","            <mn style=\"font-weight: normal;\">5</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td style=\"text-align: center;\">1</td>\n","      <td style=\"text-align: center;\">78.8971</td>\n","      <td style=\"text-align: center;\">24.9782</td>\n","      <td style=\"text-align: center;\">0.0000</td>\n","      <td style=\"text-align: center;\">1</td>\n","      <td style=\"text-align: center;\">78.8971</td>\n","      <td style=\"text-align: center;\">24.9782</td>\n","      <td style=\"text-align: center;\">0.0000</td>\n","    </tr>\n","    \n","    <tr><td style=\"height: 30px;\"></td></tr>\n","    <tr>\n","      <th style=\"text-align: left;\">PARAMETER</th>\n","      <th colspan = 2  style=\"text-align: center;\">ESTIMATE</th>\n","      <th colspan = 2>T FOR HO: PARAMETER = 0</th>\n","      <th colspan = 2>\n","        <math>\n","          <mi>PR</mi>\n","          <mo>&gt;</mo>\n","          <mo>|</mo>\n","          <mi>T</mi>\n","          <mo>|</mo>\n","        <math>\n","      </th>\n","      <th colspan = 2>STD ERROR OF ESTIMATE</th>\n","    </tr>\n","    <tr>\n","      <td>INTERCEPT</td>\n","      <td colspan = 2 style=\"text-align: center;\">-0.114805</td>\n","      <td colspan = 2 style=\"text-align: center;\">-0.0616</td>\n","      <td colspan = 2 style=\"text-align: center;\">0.951179</td>\n","      <td colspan = 2 style=\"text-align: center;\">1.863930</td>\n","    </tr>\n","    <tr>\n","      <th style=\"text-align: left;\">\n","        <math>\n","          <msub>\n","            <mi style=\"font-weight: normal;\">X</mi>\n","            <mn style=\"font-weight: normal; \">1</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td colspan = 2 style=\"text-align: center;\">0.089694</td>\n","      <td colspan = 2 style=\"text-align: center;\">3.9357</td>\n","      <td colspan = 2 style=\"text-align: center;\">0.000306</td>\n","      <td colspan = 2 style=\"text-align: center;\">0.022789</td>\n","    </tr>\n","    <tr>\n","      <th style=\"text-align: left;\">\n","        <math>\n","          <msub>\n","            <mi style=\"font-weight: normal;\">X</mi>\n","            <mn style=\"font-weight: normal; \">2</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td colspan = 2 style=\"text-align: center;\">0.293300</td>\n","      <td colspan = 2 style=\"text-align: center;\">9.2298</td>\n","      <td colspan = 2 style=\"text-align: center;\">0.000000</td>\n","      <td colspan = 2 style=\"text-align: center;\">0.031778</td>\n","    </tr>\n","    <tr>\n","      <th style=\"text-align: left;\">\n","        <math>\n","          <msub>\n","            <mi style=\"font-weight: normal;\">X</mi>\n","            <mn style=\"font-weight: normal; \">3</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td colspan = 2 style=\"text-align: center;\">0.189382</td>\n","      <td colspan = 2 style=\"text-align: center;\">1.1212</td>\n","      <td colspan = 2 style=\"text-align: center;\">0.268556</td>\n","      <td colspan = 2 style=\"text-align: center;\">0.168905</td>\n","    </tr>\n","    <tr>\n","      <th style=\"text-align: left;\">\n","        <math>\n","          <msub>\n","            <mi style=\"font-weight: normal;\">X</mi>\n","            <mn style=\"font-weight: normal; \">4</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td colspan = 2 style=\"text-align: center;\">-0.408185</td>\n","      <td colspan = 2 style=\"text-align: center;\">-3.0896</td>\n","      <td colspan = 2 style=\"text-align: center;\">0.003549</td>\n","      <td colspan = 2 style=\"text-align: center;\">0.132116</td>\n","    </tr>\n","    <tr>\n","      <th style=\"text-align: left;\">\n","        <math>\n","          <msub>\n","            <mi style=\"font-weight: normal;\">X</mi>\n","            <mn style=\"font-weight: normal; \">5</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td colspan = 2 style=\"text-align: center;\">0.601341</td>\n","      <td colspan = 2 style=\"text-align: center;\">4.9978</td>\n","      <td colspan = 2 style=\"text-align: center;\">0.000011</td>\n","      <td colspan = 2 style=\"text-align: center;\">0.120321</td>\n","    </tr>\n","  </table>\n","  </body>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","\n","\n","4.334139936500391 42 [[182.03387733]]\n"]},{"data":{"text/html":["<style>\n","  td {\n","    font-size: 0.8755em;\n","  }\n","  th {\n","    font-size: 0.8755em;\n","  }\n","  mi, mo, mn {\n","    font-weight: bold;\n","  }\n","  </style>\n","  <body>\n","  <table style=\"width:65%; border: none;\n","                    border-collapse: collapse; word-break: break-word;\">\n","    <tr>\n","      <td colspan = 9 style=\"text-align: left; height: 30px;\">\n","      ANOVA TABLE FOR WEIGHTED LEAST SQUARES ON X5\n","      </td>\n","    </tr>\n","    <tr>\n","      <td colspan = 9 style=\"text-align: left; height: 30px;\">ESTIMATED REGRESSION EQUATION:\n","        <math>\n","          <mi>Y</mi><mo>=</mo><mn>3.9507</mn><mo>+</mo><mn>0.0385</mn>\n","                    <msub>\n","                      <mi>X</mi>\n","                      <mn>1</mn>\n","                    </msub><mo>+</mo><mn>0.3072</mn>\n","                    <msub>\n","                      <mi>X</mi>\n","                      <mn>2</mn>\n","                    </msub><mo>-</mo><mn>0.0479</mn>\n","                    <msub>\n","                      <mi>X</mi>\n","                      <mn>3</mn>\n","                    </msub><mo>-</mo><mn>0.2758</mn>\n","                    <msub>\n","                      <mi>X</mi>\n","                      <mn>4</mn>\n","                    </msub><mo>+</mo><mn>0.3283</mn>\n","                    <msub>\n","                      <mi>X</mi>\n","                      <mn>5</mn>\n","                    </msub>\n","        </math>\n","    </td>\n","    </tr>\n","    <tr>\n","      <td colspan = 9 style=\"text-align: left; height: 30px;\">DEPENDENT VARIABLE: Y</td>\n","    </tr>\n","    <tr>\n","      <th style=\"text-align: left; height: 30px; width:18%;\">SOURCE</th>\n","      <th style=\"text-align: center; width:4%;\">DF</th>\n","      <th style=\"text-align: right; width:17%;\">SUM OF SQUARES</th>\n","      <th colspan = 2 style=\"text-align: right; width:17%;\">MEAN SQUARE</th>\n","      <th style=\"text-align: right; width:10%;\">F VALUE</th>\n","      <th>PR > F</th>\n","      <th>R-SQUARED</th>\n","      <th>CV</th>\n","    </tr>\n","    <tr>\n","      <td style=\"text-align: left; height: 30px;\">MODEL</td>\n","      <td style=\"text-align: center;\">5</td>\n","      <td style=\"text-align: right;\">427.955112</td>\n","      <td colspan = 2 style=\"text-align: right;\">85.591022</td>\n","      <td style=\"text-align: right;\">19.748</td>\n","      <td style=\"text-align: center;\">0.0000</td>\n","      <td style=\"text-align: center;\">0.701578</td>\n","      <td style=\"text-align: center;\">0.281888</td>\n","    </tr>\n","    <tr>\n","      <td style=\"text-align: left; height: 30px;\">ERROR</td>\n","      <td style=\"text-align: center;\">42</td>\n","      <td style=\"text-align: right;\">182.033877</td>\n","      <td colspan = 2 style=\"text-align: right;\">4.334140</td>\n","      <td></td>\n","      <th>STD DEV</th>\n","      <td></td>\n","      <th>Y MEAN</th>\n","    </tr>\n","    <tr>\n","      <td style=\"text-align: left; height: 30px;\">CORRECTED TOTAL</td>\n","      <td style=\"text-align: center;\">47</td>\n","      <td style=\"text-align: right;\">609.988989</td>\n","      <td colspan = 2 style=\"text-align: right;\"></td>\n","      <td></td>\n","      <td>2.081860</td>\n","      <td></td>\n","      <td>7.385417</td>\n","    </tr>\n","      <tr><td style=\"height: 30px;\"></td></tr>\n","    <tr>\n","      <th style=\"text-align: left; height: 30px;\">SOURCE</th>\n","      <th>DF</th>\n","      <th>TYPE I SS</th>\n","      <th>F VALUE</th>\n","      <th>PR > F</th>\n","      <th>DF</th>\n","      <th>TYPE IV SS</th>\n","      <th>F VALUE</th>\n","      <th>PR > F</th>\n","    </tr><tr style=\"text-align: left;\">\n","      <th>\n","        <math>\n","          <msub>\n","            <mi style=\"font-weight: normal;\">X</mi>\n","            <mn style=\"font-weight: normal;\">1</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td style=\"text-align: center;\">1</td>\n","      <td style=\"text-align: center;\">22.2096</td>\n","      <td style=\"text-align: center;\">5.1243</td>\n","      <td style=\"text-align: center;\">0.0288</td>\n","      <td style=\"text-align: center;\">1</td>\n","      <td style=\"text-align: center;\">-0.4432</td>\n","      <td style=\"text-align: center;\">-0.1023</td>\n","      <td style=\"text-align: center;\">1.0000</td>\n","    </tr>\n","    <tr style=\"text-align: left;\">\n","      <th>\n","        <math>\n","          <msub>\n","            <mi style=\"font-weight: normal;\">X</mi>\n","            <mn style=\"font-weight: normal;\">2</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td style=\"text-align: center;\">1</td>\n","      <td style=\"text-align: center;\">450.7182</td>\n","      <td style=\"text-align: center;\">103.9925</td>\n","      <td style=\"text-align: center;\">0.0000</td>\n","      <td style=\"text-align: center;\">1</td>\n","      <td style=\"text-align: center;\">219.7105</td>\n","      <td style=\"text-align: center;\">50.6930</td>\n","      <td style=\"text-align: center;\">0.0000</td>\n","    </tr>\n","    <tr style=\"text-align: left;\">\n","      <th>\n","        <math>\n","          <msub>\n","            <mi style=\"font-weight: normal;\">X</mi>\n","            <mn style=\"font-weight: normal;\">3</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td style=\"text-align: center;\">1</td>\n","      <td style=\"text-align: center;\">0.0091</td>\n","      <td style=\"text-align: center;\">0.0021</td>\n","      <td style=\"text-align: center;\">0.9638</td>\n","      <td style=\"text-align: center;\">1</td>\n","      <td style=\"text-align: center;\">-45.3999</td>\n","      <td style=\"text-align: center;\">-10.4750</td>\n","      <td style=\"text-align: center;\">1.0000</td>\n","    </tr>\n","    <tr style=\"text-align: left;\">\n","      <th>\n","        <math>\n","          <msub>\n","            <mi style=\"font-weight: normal;\">X</mi>\n","            <mn style=\"font-weight: normal;\">4</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td style=\"text-align: center;\">1</td>\n","      <td style=\"text-align: center;\">34.4429</td>\n","      <td style=\"text-align: center;\">7.9469</td>\n","      <td style=\"text-align: center;\">0.0073</td>\n","      <td style=\"text-align: center;\">1</td>\n","      <td style=\"text-align: center;\">-19.2198</td>\n","      <td style=\"text-align: center;\">-4.4345</td>\n","      <td style=\"text-align: center;\">1.0000</td>\n","    </tr>\n","    <tr style=\"text-align: left;\">\n","      <th>\n","        <math>\n","          <msub>\n","            <mi style=\"font-weight: normal;\">X</mi>\n","            <mn style=\"font-weight: normal;\">5</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td style=\"text-align: center;\">1</td>\n","      <td style=\"text-align: center;\">78.8971</td>\n","      <td style=\"text-align: center;\">18.2036</td>\n","      <td style=\"text-align: center;\">0.0001</td>\n","      <td style=\"text-align: center;\">1</td>\n","      <td style=\"text-align: center;\">29.5262</td>\n","      <td style=\"text-align: center;\">6.8125</td>\n","      <td style=\"text-align: center;\">0.0125</td>\n","    </tr>\n","    \n","    <tr><td style=\"height: 30px;\"></td></tr>\n","    <tr>\n","      <th style=\"text-align: left;\">PARAMETER</th>\n","      <th colspan = 2  style=\"text-align: center;\">ESTIMATE</th>\n","      <th colspan = 2>T FOR HO: PARAMETER = 0</th>\n","      <th colspan = 2>\n","        <math>\n","          <mi>PR</mi>\n","          <mo>&gt;</mo>\n","          <mo>|</mo>\n","          <mi>T</mi>\n","          <mo>|</mo>\n","        <math>\n","      </th>\n","      <th colspan = 2>STD ERROR OF ESTIMATE</th>\n","    </tr>\n","    <tr>\n","      <td>INTERCEPT</td>\n","      <td colspan = 2 style=\"text-align: center;\">3.950730</td>\n","      <td colspan = 2 style=\"text-align: center;\">1.8094</td>\n","      <td colspan = 2 style=\"text-align: center;\">0.077542</td>\n","      <td colspan = 2 style=\"text-align: center;\">2.183388</td>\n","    </tr>\n","    <tr>\n","      <th style=\"text-align: left;\">\n","        <math>\n","          <msub>\n","            <mi style=\"font-weight: normal;\">X</mi>\n","            <mn style=\"font-weight: normal; \">1</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td colspan = 2 style=\"text-align: center;\">0.038529</td>\n","      <td colspan = 2 style=\"text-align: center;\">1.4433</td>\n","      <td colspan = 2 style=\"text-align: center;\">0.156359</td>\n","      <td colspan = 2 style=\"text-align: center;\">0.026695</td>\n","    </tr>\n","    <tr>\n","      <th style=\"text-align: left;\">\n","        <math>\n","          <msub>\n","            <mi style=\"font-weight: normal;\">X</mi>\n","            <mn style=\"font-weight: normal; \">2</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td colspan = 2 style=\"text-align: center;\">0.307210</td>\n","      <td colspan = 2 style=\"text-align: center;\">8.2530</td>\n","      <td colspan = 2 style=\"text-align: center;\">0.000000</td>\n","      <td colspan = 2 style=\"text-align: center;\">0.037224</td>\n","    </tr>\n","    <tr>\n","      <th style=\"text-align: left;\">\n","        <math>\n","          <msub>\n","            <mi style=\"font-weight: normal;\">X</mi>\n","            <mn style=\"font-weight: normal; \">3</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td colspan = 2 style=\"text-align: center;\">-0.047944</td>\n","      <td colspan = 2 style=\"text-align: center;\">-0.2423</td>\n","      <td colspan = 2 style=\"text-align: center;\">0.809709</td>\n","      <td colspan = 2 style=\"text-align: center;\">0.197853</td>\n","    </tr>\n","    <tr>\n","      <th style=\"text-align: left;\">\n","        <math>\n","          <msub>\n","            <mi style=\"font-weight: normal;\">X</mi>\n","            <mn style=\"font-weight: normal; \">4</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td colspan = 2 style=\"text-align: center;\">-0.275776</td>\n","      <td colspan = 2 style=\"text-align: center;\">-1.7820</td>\n","      <td colspan = 2 style=\"text-align: center;\">0.081986</td>\n","      <td colspan = 2 style=\"text-align: center;\">0.154759</td>\n","    </tr>\n","    <tr>\n","      <th style=\"text-align: left;\">\n","        <math>\n","          <msub>\n","            <mi style=\"font-weight: normal;\">X</mi>\n","            <mn style=\"font-weight: normal; \">5</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td colspan = 2 style=\"text-align: center;\">0.328318</td>\n","      <td colspan = 2 style=\"text-align: center;\">2.3295</td>\n","      <td colspan = 2 style=\"text-align: center;\">0.024717</td>\n","      <td colspan = 2 style=\"text-align: center;\">0.140942</td>\n","    </tr>\n","  </table>\n","  </body>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","\n","\n"]},{"data":{"text/html":["<table style=\" border: none;\n","                      border-collapse: collapse; width:65%; word-break: break-word;\">\n","      <tr \tstyle =\"border-bottom-style: solid; border-width: 1px; text-align: center\">\n","        <th colspan =\"4\"> Prediction intervals for particular values of ['% minority population', '% population 4+ years college', 'geographic region'] </th>\n","      </tr>\n","      <tr style =\"border-bottom-style: solid; border-width: 1px; height: 20px;\">\n","        <th>\n","          <math>\n","            <msub>\n","              <mi>x</mi>\n","              <mi>p</mi>\n","            </msub>\n","          </math>\n","        </th>\n","        <th>\n","          <math>\n","            <msub>\n","              <mrow>\n","                <mover>\n","                  <mi>y</mi>\n","                  <mo>^</mo>\n","                </mover>\n","              <mrow>\n","              <mn>part</mn>\n","            </msub>\n","          <math>\n","        </th>\n","        <th>\n","          <math>\n","            <mi>s</mi>\n","            <mo>(</mo>\n","            <msub>\n","              <mrow>\n","                <mover>\n","                  <mi>y</mi>\n","                  <mo>^</mo>\n","                </mover>\n","              <mrow>\n","              <mn>part</mn>\n","            </msub>\n","            <mo>)</mo>\n","          </math>\n","        </th>\n","        <th>98% prediction interval</th>\n","        \n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: center;\">0,0,0,0,0</td>\n","    <td style=\"text-align: center\">0.0000</td>\n","    <td style=\"text-align: center\">1.7773</td>\n","    <td style=\"text-align: center\">\n","      <math>\n","        <mo>(</mo>\n","        <mn>-4.2982</mn>\n","        <mo>,</mo>\n","        <mn>4.2982</mn>\n","        <mo>)</mo>\n","      </math>\n","    </td>\n","  </tr>\n","      \n","</table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","\n","\n"]},{"data":{"text/html":["<table style=\"width:50%; border: none;\n","                  border-collapse: collapse;\">\n","  <tr style =\"border-bottom-style: solid; border-width: 1px;\">\n","    <th colspan = 6 >Goodness of fit for all possible regressions</th>\n","  </tr>\n","  <tr style =\"border-bottom-style: solid; border-width: 1px; height: 20px;\">\n","    <th>predictor variables</th>\n","    <th>\n","      <math>\n","        <msup>\n","        <mi>R</mi>\n","        <mn>2</mn>\n","        </msup>\n","      </math>\n","    </th>\n","    <th>SSE</th>\n","    <th>MSE</th>\n","    <th>\n","      <math>\n","        <msub>\n","        <mi>C</mi>\n","        <mi>p</mi>\n","        </msup>\n","      </math>\n","    </th>\n","    <th>\n","    <math>\n","        <mi>P</mi>\n","        <mo>-</mo>\n","        <msub>\n","        <mi>C</mi>\n","        <mi>p</mi>\n","        </msub>\n","      </math>\n","    </th>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>1</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.0309</td>\n","    <td style=\"text-align: center;\">696.73</td>\n","    <td style=\"text-align: center;\">15.15</td>\n","    <td style=\"text-align: center;\">176.58</td>\n","    <td style=\"text-align: center;\">174.58</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>2</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.6107</td>\n","    <td style=\"text-align: center;\">279.89</td>\n","    <td style=\"text-align: center;\">6.08</td>\n","    <td style=\"text-align: center;\">44.61</td>\n","    <td style=\"text-align: center;\">42.61</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>3</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.0236</td>\n","    <td style=\"text-align: center;\">701.99</td>\n","    <td style=\"text-align: center;\">15.26</td>\n","    <td style=\"text-align: center;\">178.25</td>\n","    <td style=\"text-align: center;\">176.25</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>4</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.0847</td>\n","    <td style=\"text-align: center;\">658.02</td>\n","    <td style=\"text-align: center;\">14.30</td>\n","    <td style=\"text-align: center;\">164.32</td>\n","    <td style=\"text-align: center;\">162.32</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>5</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.2001</td>\n","    <td style=\"text-align: center;\">575.06</td>\n","    <td style=\"text-align: center;\">12.50</td>\n","    <td style=\"text-align: center;\">138.06</td>\n","    <td style=\"text-align: center;\">136.06</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>1</mn></msub><mo>, </mo><msub><mi>X</mi><mn>2</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.6578</td>\n","    <td style=\"text-align: center;\">246.01</td>\n","    <td style=\"text-align: center;\">5.47</td>\n","    <td style=\"text-align: center;\">35.89</td>\n","    <td style=\"text-align: center;\">32.89</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>1</mn></msub><mo>, </mo><msub><mi>X</mi><mn>3</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.0388</td>\n","    <td style=\"text-align: center;\">691.06</td>\n","    <td style=\"text-align: center;\">15.36</td>\n","    <td style=\"text-align: center;\">176.79</td>\n","    <td style=\"text-align: center;\">173.79</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>1</mn></msub><mo>, </mo><msub><mi>X</mi><mn>4</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.2448</td>\n","    <td style=\"text-align: center;\">542.96</td>\n","    <td style=\"text-align: center;\">12.07</td>\n","    <td style=\"text-align: center;\">129.90</td>\n","    <td style=\"text-align: center;\">126.90</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>1</mn></msub><mo>, </mo><msub><mi>X</mi><mn>5</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.2378</td>\n","    <td style=\"text-align: center;\">547.97</td>\n","    <td style=\"text-align: center;\">12.18</td>\n","    <td style=\"text-align: center;\">131.48</td>\n","    <td style=\"text-align: center;\">128.48</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>2</mn></msub><mo>, </mo><msub><mi>X</mi><mn>3</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.6196</td>\n","    <td style=\"text-align: center;\">273.50</td>\n","    <td style=\"text-align: center;\">6.08</td>\n","    <td style=\"text-align: center;\">44.59</td>\n","    <td style=\"text-align: center;\">41.59</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>2</mn></msub><mo>, </mo><msub><mi>X</mi><mn>4</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.6142</td>\n","    <td style=\"text-align: center;\">277.33</td>\n","    <td style=\"text-align: center;\">6.16</td>\n","    <td style=\"text-align: center;\">45.80</td>\n","    <td style=\"text-align: center;\">42.80</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>2</mn></msub><mo>, </mo><msub><mi>X</mi><mn>5</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.7184</td>\n","    <td style=\"text-align: center;\">202.45</td>\n","    <td style=\"text-align: center;\">4.50</td>\n","    <td style=\"text-align: center;\">22.09</td>\n","    <td style=\"text-align: center;\">19.09</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>3</mn></msub><mo>, </mo><msub><mi>X</mi><mn>4</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.1427</td>\n","    <td style=\"text-align: center;\">616.36</td>\n","    <td style=\"text-align: center;\">13.70</td>\n","    <td style=\"text-align: center;\">153.14</td>\n","    <td style=\"text-align: center;\">150.14</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>3</mn></msub><mo>, </mo><msub><mi>X</mi><mn>5</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.2478</td>\n","    <td style=\"text-align: center;\">540.78</td>\n","    <td style=\"text-align: center;\">12.02</td>\n","    <td style=\"text-align: center;\">129.21</td>\n","    <td style=\"text-align: center;\">126.21</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>4</mn></msub><mo>, </mo><msub><mi>X</mi><mn>5</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.2597</td>\n","    <td style=\"text-align: center;\">532.26</td>\n","    <td style=\"text-align: center;\">11.83</td>\n","    <td style=\"text-align: center;\">126.51</td>\n","    <td style=\"text-align: center;\">123.51</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>1</mn></msub><mo>, </mo><msub><mi>X</mi><mn>2</mn></msub><mo>, </mo><msub><mi>X</mi><mn>3</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.6578</td>\n","    <td style=\"text-align: center;\">246.00</td>\n","    <td style=\"text-align: center;\">5.59</td>\n","    <td style=\"text-align: center;\">37.88</td>\n","    <td style=\"text-align: center;\">33.88</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>1</mn></msub><mo>, </mo><msub><mi>X</mi><mn>2</mn></msub><mo>, </mo><msub><mi>X</mi><mn>4</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.7051</td>\n","    <td style=\"text-align: center;\">212.00</td>\n","    <td style=\"text-align: center;\">4.82</td>\n","    <td style=\"text-align: center;\">27.12</td>\n","    <td style=\"text-align: center;\">23.12</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>1</mn></msub><mo>, </mo><msub><mi>X</mi><mn>2</mn></msub><mo>, </mo><msub><mi>X</mi><mn>5</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.7704</td>\n","    <td style=\"text-align: center;\">165.09</td>\n","    <td style=\"text-align: center;\">3.75</td>\n","    <td style=\"text-align: center;\">12.27</td>\n","    <td style=\"text-align: center;\">8.27</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>1</mn></msub><mo>, </mo><msub><mi>X</mi><mn>3</mn></msub><mo>, </mo><msub><mi>X</mi><mn>4</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.2580</td>\n","    <td style=\"text-align: center;\">533.46</td>\n","    <td style=\"text-align: center;\">12.12</td>\n","    <td style=\"text-align: center;\">128.89</td>\n","    <td style=\"text-align: center;\">124.89</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>1</mn></msub><mo>, </mo><msub><mi>X</mi><mn>3</mn></msub><mo>, </mo><msub><mi>X</mi><mn>5</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.2609</td>\n","    <td style=\"text-align: center;\">531.40</td>\n","    <td style=\"text-align: center;\">12.08</td>\n","    <td style=\"text-align: center;\">128.24</td>\n","    <td style=\"text-align: center;\">124.24</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>1</mn></msub><mo>, </mo><msub><mi>X</mi><mn>4</mn></msub><mo>, </mo><msub><mi>X</mi><mn>5</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.4124</td>\n","    <td style=\"text-align: center;\">422.48</td>\n","    <td style=\"text-align: center;\">9.60</td>\n","    <td style=\"text-align: center;\">93.75</td>\n","    <td style=\"text-align: center;\">89.75</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>2</mn></msub><mo>, </mo><msub><mi>X</mi><mn>3</mn></msub><mo>, </mo><msub><mi>X</mi><mn>4</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.6282</td>\n","    <td style=\"text-align: center;\">267.28</td>\n","    <td style=\"text-align: center;\">6.07</td>\n","    <td style=\"text-align: center;\">44.62</td>\n","    <td style=\"text-align: center;\">40.62</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>2</mn></msub><mo>, </mo><msub><mi>X</mi><mn>3</mn></msub><mo>, </mo><msub><mi>X</mi><mn>5</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.7399</td>\n","    <td style=\"text-align: center;\">186.97</td>\n","    <td style=\"text-align: center;\">4.25</td>\n","    <td style=\"text-align: center;\">19.19</td>\n","    <td style=\"text-align: center;\">15.19</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>2</mn></msub><mo>, </mo><msub><mi>X</mi><mn>4</mn></msub><mo>, </mo><msub><mi>X</mi><mn>5</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.7199</td>\n","    <td style=\"text-align: center;\">201.39</td>\n","    <td style=\"text-align: center;\">4.58</td>\n","    <td style=\"text-align: center;\">23.76</td>\n","    <td style=\"text-align: center;\">19.76</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>3</mn></msub><mo>, </mo><msub><mi>X</mi><mn>4</mn></msub><mo>, </mo><msub><mi>X</mi><mn>5</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.3444</td>\n","    <td style=\"text-align: center;\">471.33</td>\n","    <td style=\"text-align: center;\">10.71</td>\n","    <td style=\"text-align: center;\">109.22</td>\n","    <td style=\"text-align: center;\">105.22</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>1</mn></msub><mo>, </mo><msub><mi>X</mi><mn>2</mn></msub><mo>, </mo><msub><mi>X</mi><mn>3</mn></msub><mo>, </mo><msub><mi>X</mi><mn>4</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.7057</td>\n","    <td style=\"text-align: center;\">211.56</td>\n","    <td style=\"text-align: center;\">4.92</td>\n","    <td style=\"text-align: center;\">28.98</td>\n","    <td style=\"text-align: center;\">23.98</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>1</mn></msub><mo>, </mo><msub><mi>X</mi><mn>2</mn></msub><mo>, </mo><msub><mi>X</mi><mn>3</mn></msub><mo>, </mo><msub><mi>X</mi><mn>5</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.7735</td>\n","    <td style=\"text-align: center;\">162.81</td>\n","    <td style=\"text-align: center;\">3.79</td>\n","    <td style=\"text-align: center;\">13.55</td>\n","    <td style=\"text-align: center;\">8.55</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>1</mn></msub><mo>, </mo><msub><mi>X</mi><mn>2</mn></msub><mo>, </mo><msub><mi>X</mi><mn>4</mn></msub><mo>, </mo><msub><mi>X</mi><mn>5</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.8100</td>\n","    <td style=\"text-align: center;\">136.63</td>\n","    <td style=\"text-align: center;\">3.18</td>\n","    <td style=\"text-align: center;\">5.26</td>\n","    <td style=\"text-align: center;\">0.26</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>1</mn></msub><mo>, </mo><msub><mi>X</mi><mn>3</mn></msub><mo>, </mo><msub><mi>X</mi><mn>4</mn></msub><mo>, </mo><msub><mi>X</mi><mn>5</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.4412</td>\n","    <td style=\"text-align: center;\">401.74</td>\n","    <td style=\"text-align: center;\">9.34</td>\n","    <td style=\"text-align: center;\">89.19</td>\n","    <td style=\"text-align: center;\">84.19</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>2</mn></msub><mo>, </mo><msub><mi>X</mi><mn>3</mn></msub><mo>, </mo><msub><mi>X</mi><mn>4</mn></msub><mo>, </mo><msub><mi>X</mi><mn>5</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.7474</td>\n","    <td style=\"text-align: center;\">181.59</td>\n","    <td style=\"text-align: center;\">4.22</td>\n","    <td style=\"text-align: center;\">19.49</td>\n","    <td style=\"text-align: center;\">14.49</td>\n","  </tr>\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math><msub><mi>X</mi><mn>1</mn></msub><mo>, </mo><msub><mi>X</mi><mn>2</mn></msub><mo>, </mo><msub><mi>X</mi><mn>3</mn></msub><mo>, </mo><msub><mi>X</mi><mn>4</mn></msub><mo>, </mo><msub><mi>X</mi><mn>5</mn></msub>\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">0.8155</td>\n","    <td style=\"text-align: center;\">132.66</td>\n","    <td style=\"text-align: center;\">3.16</td>\n","    <td style=\"text-align: center;\">6.00</td>\n","    <td style=\"text-align: center;\">0.00</td>\n","  </tr><tr style =\"border-bottom-style: solid; border-width: 1px;\">\n","    <th colspan = 6 ></th>\n","  </tr>\n","</table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","\n","\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["def anovatable(title, x, y, B, name, dfreg, SSR, dferror,\n","               SSE, k, InvXprimeX):\n","  #aditional anova calc\n","  SST = SSR + SSE\n","  MSR = SSR/dfreg\n","  MSE = (SSE/dferror)[0][0] #MSE\n","\n","\n","  # F Value calcs\n","  F = MSR/MSE\n","  fstat = f.ppf(1-alpha, dfreg, dferror)\n","  pvaluef = 1- f.cdf(F[0][0], dfreg, dferror)#p value of F\n","\n","  #r\n","  rsquared = SSR/SST #coefficient of multiple determination\n","  r = np.sqrt(rsquared) #correlation coefficient for general model\n","\n","  dftotal = dfreg + dferror #total degrees of freedom\n","\n","  c = np.diag(InvXprimeX)\n","  VarB = c*MSE #coefficient variance vector\n","\n","  T = B/np.sqrt(VarB)[:,np.newaxis] #T-test value for coefficients vector Ho:B=0\n","  pvaluet = 2* (1 - t.cdf(np.abs(T), dferror)) #p-value for coefficient vector Ho:B=0\n","\n","  print (MSE, dferror, SSE)\n","  stdev = math.sqrt(MSE) #std deviation of the model\n","\n","  Avgy = np.nanmean(y) #average of Y\n","  CV = stdev / Avgy #Ratio of std dev to mean of Y.  Should be low\n","\n","  #type I and IV Sum of squares\n","  datax = [x[0]]\n","  SSRTI = ssr(datax, y) # type I sum of square first value\n","  if len(x) > 1:\n","    SSRT4 = sse(x[1:len(x)],y) - SSE# type IV sum of square first value\n","  else:\n","    SSRT4 = [[0]]\n","  for i  in range(1, k):\n","    datax.append(x[i])\n","    SSRTI = np.hstack((SSRTI, sse(datax[:i],y) - sse(datax[:i+1],y))) #type I SS matrix\n","    if len(x) > 1:\n","      datax2 = x.copy()\n","      datax2.pop(i)\n","      SSRT4 = np.hstack((SSRT4, sse(datax2,y) - SSE)) #type IV SS matrix\n","\n","  FvalueI = SSRTI / MSE\n","  if len(x) > 1:\n","    Fvalue4 = SSRT4 / MSE\n","  else:\n","    Fvalue4 = [[0]]\n","  FtestI = 1- f.cdf(FvalueI, 1, dferror)\n","  if len(x) > 1:\n","    Ftest4 = 1- f.cdf(Fvalue4, 1, dferror)\n","  else:\n","    Ftest4 = [[0]]\n","\n","  #Output for linear regression\n","  html_table = \"\"\"<style>\n","  td {\n","    font-size: 0.8755em;\n","  }\n","  th {\n","    font-size: 0.8755em;\n","  }\n","  mi, mo, mn {\n","    font-weight: bold;\n","  }\n","  </style>\n","  <body>\"\"\"\n","  html_table +=\"\"\"\n","  <table style=\"width:65%; border: none;\n","                    border-collapse: collapse; word-break: break-word;\">\n","    <tr>\n","      <td colspan = 9 style=\"text-align: left; height: 30px;\">\n","      {}\n","      </td>\n","    </tr>\n","    <tr>\n","      <td colspan = 9 style=\"text-align: left; height: 30px;\">ESTIMATED REGRESSION EQUATION:\n","        <math>\n","          <mi>Y</mi><mo>=</mo>\"\"\".format(title)\n","  if B[0][0] < 0:\n","    html_table +=\"\"\"<mo>-</mo>\"\"\"\n","  html_table +=\"\"\"<mn>{:.4f}</mn>\"\"\".format(np.abs(B)[0][0])\n","\n","  for i in range(1, len(B)):\n","    if B[i][0] < 0:\n","      html_table +=\"\"\"<mo>-</mo>\"\"\"\n","    else:\n","      html_table +=\"\"\"<mo>+</mo>\"\"\"\n","    html_table += \"\"\"<mn>{:.4f}</mn>\n","                    <msub>\n","                      <mi>X</mi>\n","                      <mn>{}</mn>\n","                    </msub>\"\"\".format(np.abs(B)[i][0], name[i-1])\n","\n","  html_table +=\"\"\"\n","        </math>\n","    </td>\n","    </tr>\n","    <tr>\n","      <td colspan = 9 style=\"text-align: left; height: 30px;\">DEPENDENT VARIABLE: Y</td>\n","    </tr>\n","    <tr>\n","      <th style=\"text-align: left; height: 30px; width:18%;\">SOURCE</th>\n","      <th style=\"text-align: center; width:4%;\">DF</th>\n","      <th style=\"text-align: right; width:17%;\">SUM OF SQUARES</th>\n","      <th colspan = 2 style=\"text-align: right; width:17%;\">MEAN SQUARE</th>\n","      <th style=\"text-align: right; width:10%;\">F VALUE</th>\n","      <th>PR > F</th>\n","      <th>R-SQUARED</th>\n","      <th>CV</th>\n","    </tr>\n","    <tr>\n","      <td style=\"text-align: left; height: 30px;\">MODEL</td>\n","      <td style=\"text-align: center;\">{}</td>\n","      <td style=\"text-align: right;\">{:.6f}</td>\n","      <td colspan = 2 style=\"text-align: right;\">{:.6f}</td>\n","      <td style=\"text-align: right;\">{:.3f}</td>\n","      <td style=\"text-align: center;\">{:.4f}</td>\n","      <td style=\"text-align: center;\">{:.6f}</td>\n","      <td style=\"text-align: center;\">{:.6f}</td>\n","    </tr>\n","    <tr>\n","      <td style=\"text-align: left; height: 30px;\">ERROR</td>\n","      <td style=\"text-align: center;\">{}</td>\n","      <td style=\"text-align: right;\">{:.6f}</td>\n","      <td colspan = 2 style=\"text-align: right;\">{:.6f}</td>\n","      <td></td>\n","      <th>STD DEV</th>\n","      <td></td>\n","      <th>Y MEAN</th>\n","    </tr>\n","    <tr>\n","      <td style=\"text-align: left; height: 30px;\">CORRECTED TOTAL</td>\n","      <td style=\"text-align: center;\">{}</td>\n","      <td style=\"text-align: right;\">{:.6f}</td>\n","      <td colspan = 2 style=\"text-align: right;\"></td>\n","      <td></td>\n","      <td>{:.6f}</td>\n","      <td></td>\n","      <td>{:.6f}</td>\n","    </tr>\n","      <tr><td style=\"height: 30px;\"></td></tr>\n","    <tr>\n","      <th style=\"text-align: left; height: 30px;\">SOURCE</th>\n","      <th>DF</th>\n","      <th>TYPE I SS</th>\n","      <th>F VALUE</th>\n","      <th>PR > F</th>\n","      <th>DF</th>\n","      <th>TYPE IV SS</th>\n","      <th>F VALUE</th>\n","      <th>PR > F</th>\n","    </tr>\"\"\".format(dfreg, SSR[0][0], MSR[0][0], F[0][0], pvaluef, rsquared[0][0], CV,\n","                    dferror, SSE[0][0], MSE,\n","                    dftotal, SST[0][0], stdev, Avgy)\n","  for i in range(k):\n","    html_table += \"\"\"<tr style=\"text-align: left;\">\n","      <th>\n","        <math>\n","          <msub>\n","            <mi style=\"font-weight: normal;\">X</mi>\n","            <mn style=\"font-weight: normal;\">{}</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td style=\"text-align: center;\">1</td>\n","      <td style=\"text-align: center;\">{:.4f}</td>\n","      <td style=\"text-align: center;\">{:.4f}</td>\n","      <td style=\"text-align: center;\">{:.4f}</td>\n","      <td style=\"text-align: center;\">1</td>\n","      <td style=\"text-align: center;\">{:.4f}</td>\n","      <td style=\"text-align: center;\">{:.4f}</td>\n","      <td style=\"text-align: center;\">{:.4f}</td>\n","    </tr>\n","    \"\"\".format(name[i], SSRTI[0][i], FvalueI[0][i], FtestI[0][i], SSRT4[0][i], Fvalue4[0][i], Ftest4[0][i])\n","\n","  html_table +=\"\"\"\n","    <tr><td style=\"height: 30px;\"></td></tr>\n","    <tr>\n","      <th style=\"text-align: left;\">PARAMETER</th>\n","      <th colspan = 2  style=\"text-align: center;\">ESTIMATE</th>\n","      <th colspan = 2>T FOR HO: PARAMETER = 0</th>\n","      <th colspan = 2>\n","        <math>\n","          <mi>PR</mi>\n","          <mo>&gt;</mo>\n","          <mo>|</mo>\n","          <mi>T</mi>\n","          <mo>|</mo>\n","        <math>\n","      </th>\n","      <th colspan = 2>STD ERROR OF ESTIMATE</th>\n","    </tr>\n","    <tr>\n","      <td>INTERCEPT</td>\n","      <td colspan = 2 style=\"text-align: center;\">{:.6f}</td>\n","      <td colspan = 2 style=\"text-align: center;\">{:.4f}</td>\n","      <td colspan = 2 style=\"text-align: center;\">{:.6f}</td>\n","      <td colspan = 2 style=\"text-align: center;\">{:.6f}</td>\n","    </tr>\"\"\".format(B[0][0], T[0][0], pvaluet[0][0], math.sqrt(VarB[0]))\n","\n","  for i in range(1,k+1):\n","    html_table +=\"\"\"\n","    <tr>\n","      <th style=\"text-align: left;\">\n","        <math>\n","          <msub>\n","            <mi style=\"font-weight: normal;\">X</mi>\n","            <mn style=\"font-weight: normal; \">{}</mn>\n","          </msub>\n","        <math>\n","      </th>\n","      <td colspan = 2 style=\"text-align: center;\">{:.6f}</td>\n","      <td colspan = 2 style=\"text-align: center;\">{:.4f}</td>\n","      <td colspan = 2 style=\"text-align: center;\">{:.6f}</td>\n","      <td colspan = 2 style=\"text-align: center;\">{:.6f}</td>\n","    </tr>\"\"\".format(name[i-1], B[i][0], T[i][0], pvaluet[i][0], math.sqrt(VarB[i]))\n","\n","  html_table +=\"\"\"\n","  </table>\n","  </body>\"\"\"\n","\n","  display(HTML(data = html_table))\n","  print(\"\")\n","  print(\"\")\n","  print(\"\")\n","\n","def sums(x, y):\n","  #x and y data standardized for model\n","  X = np.ones(x[0].size)[:,np.newaxis]\n","  for i in x:\n","    X = np.hstack((X, i[:,np.newaxis])) # X matrix for calculations\n","\n","  xdata = X[:,1:] #a matrix with all x data\n","\n","  Y = y[:,np.newaxis] #Y matrix for calculations\n","  Xprime = np.transpose(X)\n","  Yprime = np.transpose(Y)\n","  XprimeX = np.matmul(Xprime, X)\n","  XprimeY = np.matmul(Xprime,Y)\n","  YprimeY = np.matmul(Yprime,Y)\n","  InvXprimeX = np.linalg.inv(XprimeX)\n","\n","  #B matrix calculation\n","  B = np.matmul(InvXprimeX, XprimeY) # coefficient matrix\n","  Bprime = np.transpose(B)\n","\n","  return X, Y, Xprime, Yprime, XprimeX, XprimeY, YprimeY, InvXprimeX, B, Bprime\n","\n","\n","def ssr(x, y):\n","  X, Y, Xprime, Yprime, XprimeX, XprimeY, YprimeY, InvXprimeX, B, Bprime = sums(x, y)\n","  return np.array([[np.sum((np.matmul(X, B)-np.mean(Y))**2)]])\n","\n","def sse(x, y):\n","  X, Y, Xprime, Yprime, XprimeX, XprimeY, YprimeY, InvXprimeX, B, Bprime = sums(x, y)\n","  return np.array([[np.sum((Y - np.matmul(X, B))**2)]])\n","\n","\n","\n","#entradas para la función de cálculo (lista de cadax, y, alpha, xp )\n","#preparing matrices and general data for calculation\n","k = len(x) #Number of predictor variables\n","m = k + 1 #number of linear parameters\n","n = x[0].size #sample size\n","\n","#matrix for calculations\n","X, Y, Xprime, Yprime, XprimeX, XprimeY, YprimeY, InvXprimeX, B, Bprime = sums(x, y)\n","if np.nansum(xp) != 0:\n","  XPprime = np.hstack((np.array((1)), xp))\n","  XP = XPprime[:,np.newaxis]\n","else:\n","  XPprime = np.hstack((np.array((0)), xp))\n","  XP = XPprime[:,np.newaxis]\n","\n","\n","#ANOVA Calculations\n","dfreg = k\n","dferror = n - m\n","dftotal = n - 1\n","\n","SSR = ssr(x, y)\n","SSE = sse(x, y)\n","\n","MSE = (SSE/dferror)[0][0] #MSE\n","\n","\n","# anova table output\n","anovatable(\"ANOVA TABLE\", x, y, B, name, dfreg, SSR, dferror,\n","               SSE, k, InvXprimeX)\n","\n","tstat = t.ppf(1-(alpha/2), dferror) #tstat for confidence interval calc\n","\n","#var and std deviation for prediction curve and particular point\n","VarYavg = MSE*np.matmul(np.matmul(XPprime,InvXprimeX),XP)\n","VarYpart = MSE*(1+np.matmul(np.matmul(XPprime,InvXprimeX),XP))\n","stdevYavg = np.sqrt(VarYavg)\n","stdevYpart = np.sqrt(VarYpart)\n","\n","#residuals\n","yestimated = np.matmul(X,B).reshape((1, n))[0]\n","res = y - yestimated\n","stdres= res/np.sqrt(MSE)\n","\n","\n","#Mallows Cp calculations\n","\n","predictor_combinations = []\n","for i in range(k):\n","    predictor_combinations += list(combinations(x, i))\n","\n","predictor_combinations_names = []\n","for i in range(k):\n","    predictor_combinations_names += list(combinations(name, i))\n","\n","#Cp table calculations for all combinations except all predictors together\n","cptable=[]\n","for xcomb, j in zip(predictor_combinations[1:], predictor_combinations_names[1:]):\n","  kcomb = len(xcomb) #Number of predictor variables for the combination\n","  mcomb = kcomb + 1 #number of linear parameters for the combination\n","\n","  dferrorcomb = n - mcomb\n","\n","  SSRcomb = ssr(xcomb, y)\n","  SSEcomb = sse(xcomb, y)\n","  SSTcomb = SSRcomb + SSEcomb\n","\n","  MSEcomb = (SSEcomb/dferrorcomb)[0][0] #MSE\n","\n","  #rsquared\n","  rsquaredcomb = SSRcomb/SSTcomb #coefficient of multiple determination\n","\n","  #Mallow´s Cp\n","  Cp = (SSEcomb[0][0]/MSE)-(n - 2*mcomb)\n","\n","  #adding current combination results to Cp table\n","  cptable.append([j, SSEcomb[0][0], MSEcomb, Cp, rsquaredcomb[0][0], mcomb])\n","\n","#Cp table calculations for all predictors together combination\n","Cpall = (SSE[0][0]/MSE)-(n - 2*m)\n","rsquared = SSR/(SSR + SSE)\n","cptable.append([name, SSE[0][0], MSE, Cpall, rsquared[0][0], m])\n","\n","\n","#ANOVA Calculations for weighted least squares scenario\n","InvQ = []\n","for i in weightvar[0]:\n","  mask = weightvar[0] == i\n","  InvQ.append(1/np.var(y[mask], ddof = 1))\n","InvQ = np.diagflat(InvQ)\n","Bw = np.matmul(np.matmul(np.matmul(np.linalg.inv(np.matmul(np.matmul(Xprime,InvQ), X)), Xprime), InvQ), Y)\n","Bprimew = np.transpose(Bw)\n","SSRw = np.matmul(Bprimew, XprimeY) - ((np.nansum(Y)**2)/x[0].size)\n","SSEw = np.array([[np.sum((Y - np.matmul(X, Bw))**2)]])\n","\n","# Find the index of the list\n","lindex = next((i for i, lst in enumerate(x) if np.array_equal(x, weightvar[0])), -1)\n","title = \"ANOVA TABLE FOR WEIGHTED LEAST SQUARES ON X{}\".format(name[lindex])\n","\n","# anova table output\n","anovatable(title, x, y, Bw, name, dfreg, SSRw, dferror, SSEw, k, InvXprimeX)\n","\n","#Particular prediction interval table\n","if xp.size > 0:\n","  html_table = \"\"\"<table style=\" border: none;\n","                      border-collapse: collapse; width:65%; word-break: break-word;\">\n","      <tr \tstyle =\"border-bottom-style: solid; border-width: 1px; text-align: center\">\n","        <th colspan =\"4\"> Prediction intervals for particular values of {} </th>\n","      </tr>\n","      <tr style =\"border-bottom-style: solid; border-width: 1px; height: 20px;\">\n","        <th>\n","          <math>\n","            <msub>\n","              <mi>x</mi>\n","              <mi>p</mi>\n","            </msub>\n","          </math>\n","        </th>\n","        <th>\n","          <math>\n","            <msub>\n","              <mrow>\n","                <mover>\n","                  <mi>y</mi>\n","                  <mo>^</mo>\n","                </mover>\n","              <mrow>\n","              <mn>part</mn>\n","            </msub>\n","          <math>\n","        </th>\n","        <th>\n","          <math>\n","            <mi>s</mi>\n","            <mo>(</mo>\n","            <msub>\n","              <mrow>\n","                <mover>\n","                  <mi>y</mi>\n","                  <mo>^</mo>\n","                </mover>\n","              <mrow>\n","              <mn>part</mn>\n","            </msub>\n","            <mo>)</mo>\n","          </math>\n","        </th>\n","        <th>{:.0f}% prediction interval</th>\n","        \"\"\".format(xtitle, (1-alpha)*100)\n","\n","  yavg = np.sum(XP*B)\n","  predictors = \"\"\n","  for i in range(xp.size):\n","    predictors += str(xp[i])+\",\"\n","  predictors = predictors[:-1]\n","  html_table +=\"\"\"\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: center;\">{}</td>\n","    <td style=\"text-align: center\">{:.4f}</td>\n","    <td style=\"text-align: center\">{:.4f}</td>\n","    <td style=\"text-align: center\">\n","      <math>\n","        <mo>(</mo>\n","        <mn>{:.4f}</mn>\n","        <mo>,</mo>\n","        <mn>{:.4f}</mn>\n","        <mo>)</mo>\n","      </math>\n","    </td>\n","  </tr>\n","      \"\"\".format(predictors, yavg, stdevYpart[0], yavg - tstat*stdevYpart[0], yavg + tstat*stdevYpart[0])\n","\n","html_table +=\"\"\"\n","</table>\"\"\"\n","\n","display(HTML(data = html_table))\n","print(\"\")\n","print(\"\")\n","print(\"\")\n","\n","#Mallow´s Cp table for best predictors\n","\n","html_table = \"\"\"<table style=\"width:50%; border: none;\n","                  border-collapse: collapse;\">\n","  <tr style =\"border-bottom-style: solid; border-width: 1px;\">\n","    <th colspan = 6 >Goodness of fit for all possible regressions</th>\n","  </tr>\n","  <tr style =\"border-bottom-style: solid; border-width: 1px; height: 20px;\">\n","    <th>predictor variables</th>\n","    <th>\n","      <math>\n","        <msup>\n","        <mi>R</mi>\n","        <mn>2</mn>\n","        </msup>\n","      </math>\n","    </th>\n","    <th>SSE</th>\n","    <th>MSE</th>\n","    <th>\n","      <math>\n","        <msub>\n","        <mi>C</mi>\n","        <mi>p</mi>\n","        </msup>\n","      </math>\n","    </th>\n","    <th>\n","    <math>\n","        <mi>P</mi>\n","        <mo>-</mo>\n","        <msub>\n","        <mi>C</mi>\n","        <mi>p</mi>\n","        </msub>\n","      </math>\n","    </th>\n","  </tr>\"\"\"\n","\n","\n","for i in cptable:\n","  html_table +=\"\"\"\n","  <tr style=\"height: 20px;\">\n","    <td style=\"text-align: left;\">\n","      <math>\"\"\"\n","  predvar =\"\"\n","  for j in i[0]:\n","    predvar +=\"<msub><mi>X</mi><mn>{}</mn></msub><mo>, </mo>\".format(j)\n","  predvar = predvar[:-11]\n","  html_table += predvar\n","  html_table +=\"\"\"\n","    </math>\n","    </td>\n","    <td style=\"text-align: center;\">{:.4f}</td>\n","    <td style=\"text-align: center;\">{:.2f}</td>\n","    <td style=\"text-align: center;\">{:.2f}</td>\n","    <td style=\"text-align: center;\">{:.2f}</td>\n","    <td style=\"text-align: center;\">{:.2f}</td>\n","  </tr>\"\"\".format(i[4], i[1], i[2], i[3], i[3] - i[5])\n","\n","\n","html_table +=\"\"\"<tr style =\"border-bottom-style: solid; border-width: 1px;\">\n","    <th colspan = 6 ></th>\n","  </tr>\n","</table>\"\"\"\n","\n","display(HTML(data = html_table))\n","print(\"\")\n","print(\"\")\n","print(\"\")\n","\n","#residual scatter graph\n","fig, ax = plt.subplots()\n","#xgraph = np.linspace(0, x.size, x.size )\n","ax.scatter(x5, stdres)\n","ax.set_xlabel(xtitle[0])\n","ax.set_ylabel('Standardized Residuals');"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":219,"status":"ok","timestamp":1727906023351,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"},"user_tz":240},"id":"2be7l18cE5NS","outputId":"b2e9fa33-f47b-4c38-d0e7-3ce1a6328688"},"outputs":[{"data":{"text/plain":["[0.052466520340361186,\n"," 0.4136656048999011,\n"," 0.5468160892884805,\n"," 0.04064101275025947,\n"," 0.42215300792924765,\n"," 0.5591581181778965,\n"," 0.06186230363465769,\n"," 0.6128790754401479,\n"," 0.414034780394415,\n"," 0.54713919630934,\n"," 0.616935609579628,\n"," 0.42338856876079756,\n"," 0.5591684839789868,\n"," 0.6150144916375054,\n"," 0.6182795614686063]"]},"execution_count":88,"metadata":{},"output_type":"execute_result"}],"source":["[math.sqrt(i[4]) for i in cptable]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":188,"status":"ok","timestamp":1727904026551,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"},"user_tz":240},"id":"fnH7VyVmgYs_","outputId":"6c3c2c11-4e87-4446-aff4-a756b7a6ccc1"},"outputs":[{"data":{"text/plain":["48"]},"execution_count":72,"metadata":{},"output_type":"execute_result"}],"source":["x5.size"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":204,"status":"ok","timestamp":1727903874143,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"},"user_tz":240},"id":"yuj7nyR2G0qX","outputId":"f35ec33a-b3d2-4ddb-a18c-702e73bd7cc7"},"outputs":[{"data":{"text/plain":["array([[16223.32494041]])"]},"execution_count":67,"metadata":{},"output_type":"execute_result"}],"source":["SSRw"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":208,"status":"ok","timestamp":1727903749563,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"},"user_tz":240},"id":"NTWbxPJ_FeYX","outputId":"42dd8da7-a7b9-41b0-c9a5-46ad7f3fbf12"},"outputs":[{"data":{"text/plain":["(1, 1)"]},"execution_count":64,"metadata":{},"output_type":"execute_result"}],"source":["np.array([[SSE]]).shape"]},{"cell_type":"markdown","metadata":{"id":"xGS4ia4Q9dUp"},"source":["#NON PARAMETRIC METHODS"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":158},"executionInfo":{"elapsed":2525,"status":"error","timestamp":1728995439955,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"},"user_tz":240},"id":"cIy-je_b4uNC","outputId":"7a78aea3-5ea9-4d13-dd55-389206998d79"},"outputs":[{"ename":"NameError","evalue":"name 'rng' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-f16663fc3c58>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mA\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrng\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'AB'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mB\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrng\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'BAC'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'rng' is not defined"]}],"source":["rng =np.random.RandomState(42)\n","A = pd.DataFrame(rng.randint(0, 20, (2, 2)), columns = list('AB'))\n","B = pd.DataFrame(rng.randint(0, 10, (3, 3)), columns = list('BAC'))"]},{"cell_type":"markdown","metadata":{"id":"VsGnlQds42-g"},"source":["Exercise 15.13\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jIlyjzMXHRG2"},"outputs":[],"source":["df = pd.DataFrame({'test1':[72, 89, 48, 65, 86, 56, 75, 39, 78, 98, 64, 82],\n","                   'test2':[68, 87, 56, 76, 94, 73, 84, 45, 67, 87, 87, 76],\n","                   'test3':[80, 78, 64, 70, 93, 78, 65, 48, 69, 86, 92, 85],\n","                   'test4':[75, 92, 58, 62, 85, 87, 69, 56, 59, 95, 48, 79]},\n","                  index=[i+1 for i in range(12)])\n","df.index.name = 'student'\n","df.columns.name = 'test'\n","# df\n","b = pd.DataFrame(df.rank(method='first', axis = 1).stack(), columns= ['pos'])\n","a = pd.DataFrame(df.unstack().sort_values(),columns=['eval'])\n","c = pd.merge(a,b, left_index = True, right_index= True)\n","df_ranked = c.reset_index().set_index(['test']).groupby(['student','eval']).mean()\n","df_ranked=df_ranked.rename(columns = {'pos':'rank'})\n","c.reset_index(inplace = True)\n","c = c.set_index(['eval', 'student'])\n","df_final = pd.merge(c, df_ranked, left_index= True, right_index= True)\n","df_final.reset_index(inplace = True)\n","#df_final"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":488},"executionInfo":{"elapsed":309,"status":"ok","timestamp":1729455793827,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"},"user_tz":240},"id":"Zdutl73FHOHW","outputId":"894896aa-e497-446c-efc9-40c9bd32ac10"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["test    test1           test2           test3           test4          \n","         eval  pos rank  eval  pos rank  eval  pos rank  eval  pos rank\n","student                                                                \n","1        72.0  2.0  2.0  68.0  1.0  1.0  80.0  4.0  4.0  75.0  3.0  3.0\n","2        89.0  3.0  3.0  87.0  2.0  2.0  78.0  1.0  1.0  92.0  4.0  4.0\n","3        48.0  1.0  1.0  56.0  2.0  2.0  64.0  4.0  4.0  58.0  3.0  3.0\n","4        65.0  2.0  2.0  76.0  4.0  4.0  70.0  3.0  3.0  62.0  1.0  1.0\n","5        86.0  2.0  2.0  94.0  4.0  4.0  93.0  3.0  3.0  85.0  1.0  1.0\n","6        56.0  1.0  1.0  73.0  2.0  2.0  78.0  3.0  3.0  87.0  4.0  4.0\n","7        75.0  3.0  3.0  84.0  4.0  4.0  65.0  1.0  1.0  69.0  2.0  2.0\n","8        39.0  1.0  1.0  45.0  2.0  2.0  48.0  3.0  3.0  56.0  4.0  4.0\n","9        78.0  4.0  4.0  67.0  2.0  2.0  69.0  3.0  3.0  59.0  1.0  1.0\n","10       98.0  4.0  4.0  87.0  2.0  2.0  86.0  1.0  1.0  95.0  3.0  3.0\n","11       64.0  2.0  2.0  87.0  3.0  3.0  92.0  4.0  4.0  48.0  1.0  1.0\n","12       82.0  3.0  3.0  76.0  1.0  1.0  85.0  4.0  4.0  79.0  2.0  2.0"],"text/html":["\n","  <div id=\"df-fb62f752-cfd3-4976-ba9b-fcd7dc6c9f12\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead tr th {\n","        text-align: left;\n","    }\n","\n","    .dataframe thead tr:last-of-type th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr>\n","      <th>test</th>\n","      <th colspan=\"3\" halign=\"left\">test1</th>\n","      <th colspan=\"3\" halign=\"left\">test2</th>\n","      <th colspan=\"3\" halign=\"left\">test3</th>\n","      <th colspan=\"3\" halign=\"left\">test4</th>\n","    </tr>\n","    <tr>\n","      <th></th>\n","      <th>eval</th>\n","      <th>pos</th>\n","      <th>rank</th>\n","      <th>eval</th>\n","      <th>pos</th>\n","      <th>rank</th>\n","      <th>eval</th>\n","      <th>pos</th>\n","      <th>rank</th>\n","      <th>eval</th>\n","      <th>pos</th>\n","      <th>rank</th>\n","    </tr>\n","    <tr>\n","      <th>student</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>72.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>68.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>80.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>75.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>89.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>87.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>78.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>92.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>48.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>56.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>64.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>58.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>65.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>76.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>70.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>62.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>86.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>94.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>93.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>85.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>56.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>73.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>78.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>87.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>75.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>84.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>65.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>69.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>39.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>45.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>48.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>56.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>78.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>67.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>69.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>59.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>98.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>87.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>86.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>95.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>64.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>87.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>92.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>48.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>82.0</td>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","      <td>76.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>85.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>79.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fb62f752-cfd3-4976-ba9b-fcd7dc6c9f12')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-fb62f752-cfd3-4976-ba9b-fcd7dc6c9f12 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-fb62f752-cfd3-4976-ba9b-fcd7dc6c9f12');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5ed71021-466b-456a-9b7b-8f2e6492987f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5ed71021-466b-456a-9b7b-8f2e6492987f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5ed71021-466b-456a-9b7b-8f2e6492987f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df_final\",\n  \"rows\": 12,\n  \"fields\": [\n    {\n      \"column\": [\n        \"student\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 12,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          11,\n          10,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"test1\",\n        \"eval\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.393833808147487,\n        \"min\": 39.0,\n        \"max\": 98.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          64.0,\n          98.0,\n          72.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"test1\",\n        \"pos\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0730867399773196,\n        \"min\": 1.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3.0,\n          4.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"test1\",\n        \"rank\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0730867399773196,\n        \"min\": 1.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3.0,\n          4.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"test2\",\n        \"eval\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.314646028075263,\n        \"min\": 45.0,\n        \"max\": 94.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          45.0,\n          87.0,\n          73.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"test2\",\n        \"pos\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0836246694508318,\n        \"min\": 1.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2.0,\n          3.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"test2\",\n        \"rank\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0836246694508318,\n        \"min\": 1.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2.0,\n          3.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"test3\",\n        \"eval\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.082488874503778,\n        \"min\": 48.0,\n        \"max\": 93.0,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          65.0,\n          80.0,\n          92.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"test3\",\n        \"pos\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1934162828797101,\n        \"min\": 1.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          4.0,\n          1.0,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"test3\",\n        \"rank\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1934162828797101,\n        \"min\": 1.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          4.0,\n          1.0,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"test4\",\n        \"eval\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.628984340485836,\n        \"min\": 48.0,\n        \"max\": 95.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          48.0,\n          95.0,\n          75.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"test4\",\n        \"pos\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2401124093721456,\n        \"min\": 1.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          4.0,\n          2.0,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"test4\",\n        \"rank\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2401124093721456,\n        \"min\": 1.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          4.0,\n          2.0,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":294}],"source":["df_final\n","df_final.set_index(['test', 'student']).stack(level = 0).unstack(level = 0).unstack(level = 1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"fLVwVtQ_F7mc","executionInfo":{"status":"ok","timestamp":1729455796342,"user_tz":240,"elapsed":268,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"}},"outputId":"a049115e-2472-4ef4-83cb-2fde9e0deb31"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["test\n","test1    28.0\n","test2    29.0\n","test3    34.0\n","test4    29.0\n","Name: rank, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>rank</th>\n","    </tr>\n","    <tr>\n","      <th>test</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>test1</th>\n","      <td>28.0</td>\n","    </tr>\n","    <tr>\n","      <th>test2</th>\n","      <td>29.0</td>\n","    </tr>\n","    <tr>\n","      <th>test3</th>\n","      <td>34.0</td>\n","    </tr>\n","    <tr>\n","      <th>test4</th>\n","      <td>29.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":295}],"source":["Rj = df_final.groupby('test').sum()['rank']\n","Rj"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":288,"status":"ok","timestamp":1729456629744,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"},"user_tz":240},"id":"Wjhxlq4qfsgW","outputId":"3af83b06-7e4f-4567-f59a-e598ccf04ec6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Friedman statistic: 1.1000000000000227\n","Degrees of freedom: 3\n","Type 1 Error (alpha) = 0.01\n","chi squared quantile for alpha = 0.01 and 3 degrees of fredom = 11.344866730144373\n"]}],"source":["# Friedman statistic k1 *Rj^2 - k2\n","#k1 = 12/(n*k*(k+1))\n","k = len(pd.unique(df_final['test']))\n","n = len(pd.unique(df_final['student']))\n","k1 = 12/(n*k*(k+1))\n","\n","#k2 = 3*n*(k+1)\n","k2 = 3*n*(k+1)\n","\n","#((Rj**2).sum())*k1 - k2\n","S = ((Rj**2).sum())*k1 - k2\n","print(\"Friedman statistic: {}\".format(S))\n","\n","alpha = 0.01\n","print(\"Degrees of freedom: {}\".format(k-1))\n","print(\"Type 1 Error (alpha) = {}\".format(alpha))\n","print(\"chi squared quantile for alpha = {} and {} degrees of fredom = {}\".format(alpha, k-1, chi2.ppf(1-alpha, k-1)))\n"]},{"cell_type":"markdown","source":["###Exercise 15.15"],"metadata":{"id":"MtrWXNgVpsGJ"}},{"cell_type":"markdown","source":[],"metadata":{"id":"4Oenj5r8ssSY"}},{"cell_type":"code","source":["df = pd.DataFrame({'Temp':[99, 99, 99, 99, 99, 96, 96, 97, 97,\n","                           97, 99, 94, 91, 97, 96, 85, 79, 76,\n","                           84, 90, 76, 78, 81, 90, 93, 90, 96,\n","                           98, 95, 95, 95],\n","                   'power':[153.4, 141.0, 143.1, 156.8, 158.7, 158.5, 158.7, 159.6, 148.3,\n","                            137.8, 160.0, 154.0, 142.2, 149.4, 147.9, 114.2, 94.7, 112.5,\n","                            123.6, 131.1, 119.4, 111.9, 103.5, 103.7, 125.4, 129.0, 135.6,\n","                            142.3, 142.5, 128.9, 124.3],\n","                   })\n","\n","df['rank_temp']=df['Temp'].rank(method='average')\n","df['rank_power']=df['power'].rank(method='average')\n","df['rank_tempxrank_power']=df['rank_temp']*df['rank_power']\n","df['rank_temp_squared']=df['rank_temp']**2\n","df['rank_power_squared']=df['rank_power']**2\n","n = len(df['Temp'])\n","sum_ser = df.sum()\n","r1 = (sum_ser['rank_tempxrank_power']-(sum_ser['rank_temp']*sum_ser['rank_temp']/n))\n","r2 = math.sqrt(sum_ser['rank_temp_squared']-((sum_ser['rank_temp']**2)/n))\n","r3 = math.sqrt(sum_ser['rank_power_squared']-((sum_ser['rank_power']**2)/n))\n","rs = r1/(r2*r3)\n","print(\"Spearman correlation coefficient: {:6f}\".format(rs))\n","print(df)\n","print(sum_ser)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pvxb7HKdp5v1","executionInfo":{"status":"ok","timestamp":1729470873725,"user_tz":240,"elapsed":202,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"}},"outputId":"4f31b988-3c5a-4597-8f39-2482bb1794d6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Spearman correlation coefficient: 0.796769\n","    Temp  power  rank_temp  rank_power  rank_tempxrank_power  \\\n","0     99  153.4       28.5        24.0                684.00   \n","1     99  141.0       28.5        16.0                456.00   \n","2     99  143.1       28.5        20.0                570.00   \n","3     99  156.8       28.5        26.0                741.00   \n","4     99  158.7       28.5        28.5                812.25   \n","5     96  158.5       18.5        27.0                499.50   \n","6     96  158.7       18.5        28.5                527.25   \n","7     97  159.6       22.5        30.0                675.00   \n","8     97  148.3       22.5        22.0                495.00   \n","9     97  137.8       22.5        15.0                337.50   \n","10    99  160.0       28.5        31.0                883.50   \n","11    94  154.0       13.0        25.0                325.00   \n","12    91  142.2       11.0        17.0                187.00   \n","13    97  149.4       22.5        23.0                517.50   \n","14    96  147.9       18.5        21.0                388.50   \n","15    85  114.2        7.0         6.0                 42.00   \n","16    79   94.7        4.0         1.0                  4.00   \n","17    76  112.5        1.5         5.0                  7.50   \n","18    84  123.6        6.0         8.0                 48.00   \n","19    90  131.1        9.0        13.0                117.00   \n","20    76  119.4        1.5         7.0                 10.50   \n","21    78  111.9        3.0         4.0                 12.00   \n","22    81  103.5        5.0         2.0                 10.00   \n","23    90  103.7        9.0         3.0                 27.00   \n","24    93  125.4       12.0        10.0                120.00   \n","25    90  129.0        9.0        12.0                108.00   \n","26    96  135.6       18.5        14.0                259.00   \n","27    98  142.3       25.0        18.0                450.00   \n","28    95  142.5       15.0        19.0                285.00   \n","29    95  128.9       15.0        11.0                165.00   \n","30    95  124.3       15.0         9.0                135.00   \n","\n","    rank_temp_squared  rank_power_squared  \n","0              812.25              576.00  \n","1              812.25              256.00  \n","2              812.25              400.00  \n","3              812.25              676.00  \n","4              812.25              812.25  \n","5              342.25              729.00  \n","6              342.25              812.25  \n","7              506.25              900.00  \n","8              506.25              484.00  \n","9              506.25              225.00  \n","10             812.25              961.00  \n","11             169.00              625.00  \n","12             121.00              289.00  \n","13             506.25              529.00  \n","14             342.25              441.00  \n","15              49.00               36.00  \n","16              16.00                1.00  \n","17               2.25               25.00  \n","18              36.00               64.00  \n","19              81.00              169.00  \n","20               2.25               49.00  \n","21               9.00               16.00  \n","22              25.00                4.00  \n","23              81.00                9.00  \n","24             144.00              100.00  \n","25              81.00              144.00  \n","26             342.25              196.00  \n","27             625.00              324.00  \n","28             225.00              361.00  \n","29             225.00              121.00  \n","30             225.00               81.00  \n","Temp                     2856.0\n","power                    4212.0\n","rank_temp                 496.0\n","rank_power                496.0\n","rank_tempxrank_power     9899.0\n","rank_temp_squared       10384.0\n","rank_power_squared      10415.5\n","dtype: float64\n"]}]},{"cell_type":"markdown","source":["###exercise 15.17"],"metadata":{"id":"_5IK3DMFf1Af"}},{"cell_type":"code","source":["df = pd.DataFrame({'judge1':[2, 6, 5, 9, 3, 7, 9, 2, 6, 2],\n","                   'judge2':[7, 1, 4, 4, 8, 9, 3, 9, 10, 8],\n","                   })\n","\n","df['rank_judge1']=df['judge1'].rank(method='average')\n","df['rank_judge2']=df['judge2'].rank(method='average')\n","df['rank_judge1xrank_judge2']=df['rank_judge1']*df['rank_judge2']\n","df['rank_judge1_squared']=df['rank_judge1']**2\n","df['rank_judge2_squared']=df['rank_judge2']**2\n","n = len(df['judge1'])\n","sum_ser = df.sum()\n","r1 = (sum_ser['rank_judge1xrank_judge2']-(sum_ser['rank_judge1']*sum_ser['rank_judge2']/n))\n","r2 = math.sqrt(sum_ser['rank_judge1_squared']-((sum_ser['rank_judge1']**2)/n))\n","r3 = math.sqrt(sum_ser['rank_judge2_squared']-((sum_ser['rank_judge2']**2)/n))\n","rs = r1/(r2*r3)\n","print(\"Spearman correlation coefficient: {:6f}\".format(rs))\n","print(df)\n","print(sum_ser)"],"metadata":{"id":"CKZO8BaXf5Rd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730464377117,"user_tz":240,"elapsed":326,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"}},"outputId":"2a2f995e-c4ad-42a3-c8da-0f3cae73f728"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Spearman correlation coefficient: -0.339579\n","   judge1  judge2  rank_judge1  rank_judge2  rank_judge1xrank_judge2  \\\n","0       2       7          2.0          5.0                    10.00   \n","1       6       1          6.5          1.0                     6.50   \n","2       5       4          5.0          3.5                    17.50   \n","3       9       4          9.5          3.5                    33.25   \n","4       3       8          4.0          6.5                    26.00   \n","5       7       9          8.0          8.5                    68.00   \n","6       9       3          9.5          2.0                    19.00   \n","7       2       9          2.0          8.5                    17.00   \n","8       6      10          6.5         10.0                    65.00   \n","9       2       8          2.0          6.5                    13.00   \n","\n","   rank_judge1_squared  rank_judge2_squared  \n","0                 4.00                25.00  \n","1                42.25                 1.00  \n","2                25.00                12.25  \n","3                90.25                12.25  \n","4                16.00                42.25  \n","5                64.00                72.25  \n","6                90.25                 4.00  \n","7                 4.00                72.25  \n","8                42.25               100.00  \n","9                 4.00                42.25  \n","judge1                      51.00\n","judge2                      63.00\n","rank_judge1                 55.00\n","rank_judge2                 55.00\n","rank_judge1xrank_judge2    275.25\n","rank_judge1_squared        382.00\n","rank_judge2_squared        383.50\n","dtype: float64\n"]}]},{"cell_type":"code","source":["fig, ax = plt.subplots()\n","x1 = np.linspace(0, 10, 100)\n","x2 = np.linspace(0, 10, 100)\n","X1, X2 = np.meshgrid(x1, x2)\n","y = np.log(X1 + 1) + X2\n","ax.plot_wireframe(X, Y, Z)\n","plt.show();"],"metadata":{"id":"nKTp_PH2tuZd","colab":{"base_uri":"https://localhost:8080/","height":211},"executionInfo":{"status":"error","timestamp":1741955359959,"user_tz":240,"elapsed":30,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"}},"outputId":"6a6c7ce9-16ca-46f5-cac6-348450e936c1"},"execution_count":2,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'plt' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-f722c8cf5003>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplots\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mx1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinspace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mx2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinspace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mX1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmeshgrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX1\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mX2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'plt' is not defined"]}]},{"cell_type":"code","source":["!git init --help\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XDVaheHPoWPV","executionInfo":{"status":"ok","timestamp":1741955420426,"user_tz":240,"elapsed":108,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"}},"outputId":"e20ae5da-0461-4d4b-ad1a-3e28f9e57e75"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["This system has been minimized by removing packages and content that are\n","not required on a system that users do not log into.\n","\n","To restore this content, including manpages, you can run the 'unminimize'\n","command. You will still need to ensure the 'man-db' package is installed.\n"]}]},{"cell_type":"code","source":["!cd drive\n"],"metadata":{"id":"A6nts18_ok-t","executionInfo":{"status":"ok","timestamp":1741956525103,"user_tz":240,"elapsed":105,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["!"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vXtv0ptjsyqt","executionInfo":{"status":"ok","timestamp":1741956530922,"user_tz":240,"elapsed":121,"user":{"displayName":"Donaldo Sanchez","userId":"17571504240371011464"}},"outputId":"952f108e-f313-4e29-8047-859618d2014f"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["/content\n"]}]}],"metadata":{"colab":{"collapsed_sections":["4Cdcm4A9mhVo","VmZxbY3Vnusm"],"provenance":[],"mount_file_id":"1rhcb68Av7Zmub1F_0H1vNWpLBgeGCo8q","authorship_tag":"ABX9TyOTvPeBd4NWVB0DNX9sAaok"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}